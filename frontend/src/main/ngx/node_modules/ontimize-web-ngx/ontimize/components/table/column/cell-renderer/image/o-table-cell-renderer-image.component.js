var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Component, Injector, TemplateRef, ViewChild, ChangeDetectionStrategy } from '@angular/core';
import { Util } from '../../../../../util/util';
import { OBaseTableCellRenderer } from '../o-base-table-cell-renderer.class';
export var DEFAULT_INPUTS_O_TABLE_CELL_RENDERER_IMAGE = [
    'imageType: image-type',
    'emptyImage: empty-image',
    'avatar'
];
export var DEFAULT_OUTPUTS_O_TABLE_CELL_RENDERER_IMAGE = [
    'onClick'
];
var OTableCellRendererImageComponent = (function (_super) {
    __extends(OTableCellRendererImageComponent, _super);
    function OTableCellRendererImageComponent(injector) {
        var _this = _super.call(this, injector) || this;
        _this.injector = injector;
        _this.tableColumn.type = 'image';
        _this.tableColumn.orderable = false;
        _this.tableColumn.searchable = false;
        return _this;
    }
    OTableCellRendererImageComponent.prototype.ngOnInit = function () {
        if (this.table) {
            var oCol = this.table.getOColumn(this.tableColumn.attr);
            oCol.title = Util.isDefined(this.tableColumn.title) ? this.tableColumn.title : undefined;
            oCol.definition.contentAlign = oCol.definition.contentAlign ? oCol.definition.contentAlign : 'center';
        }
    };
    OTableCellRendererImageComponent.prototype.getSource = function (cellData) {
        this._source = '';
        switch (this.imageType) {
            case 'base64':
                this._source = cellData ? ('data:image/png;base64,' + ((typeof (cellData.bytes) !== 'undefined') ? cellData.bytes : cellData)) : this.emptyImage;
                break;
            case 'url':
                this._source = cellData ? cellData : this.emptyImage;
                break;
            default:
                this._source = this.emptyImage;
                break;
        }
        return this._source;
    };
    OTableCellRendererImageComponent.DEFAULT_INPUTS_O_TABLE_CELL_RENDERER_IMAGE = DEFAULT_INPUTS_O_TABLE_CELL_RENDERER_IMAGE;
    OTableCellRendererImageComponent.DEFAULT_OUTPUTS_O_TABLE_CELL_RENDERER_IMAGE = DEFAULT_OUTPUTS_O_TABLE_CELL_RENDERER_IMAGE;
    OTableCellRendererImageComponent.decorators = [
        { type: Component, args: [{
                    moduleId: module.id,
                    selector: 'o-table-cell-renderer-image',
                    template: "\n    <ng-template #templateref let-cellvalue=\"cellvalue\">\n      <div [ngClass]=\"{'image-avatar':avatar,'image-plain':!avatar} \">\n        <img [src]=\"getSource(cellvalue)\">\n      </div>\n    </ng-template>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    inputs: DEFAULT_INPUTS_O_TABLE_CELL_RENDERER_IMAGE
                },] },
    ];
    OTableCellRendererImageComponent.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    OTableCellRendererImageComponent.propDecorators = {
        templateref: [{ type: ViewChild, args: ['templateref', { read: TemplateRef },] }]
    };
    return OTableCellRendererImageComponent;
}(OBaseTableCellRenderer));
export { OTableCellRendererImageComponent };
//# sourceMappingURL=o-table-cell-renderer-image.component.js.map