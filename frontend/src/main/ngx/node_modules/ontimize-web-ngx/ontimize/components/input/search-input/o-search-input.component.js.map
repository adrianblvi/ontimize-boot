{"version":3,"file":"o-search-input.component.js","sourceRoot":"","sources":["../../../../../tmp/ontimize/components/input/search-input/o-search-input.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { CommonModule } from '@angular/common';\nimport { Component, ElementRef, EventEmitter, Injector, NgModule, OnInit, ViewEncapsulation } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { FloatLabelType, MatCheckboxChange, MatFormFieldAppearance } from '@angular/material';\nimport { debounceTime, distinctUntilChanged } from 'rxjs/operators';\n\nimport { O_INPUTS_OPTIONS, OInputsOptions } from '../../../config/app-config';\nimport { InputConverter } from '../../../decorators/input-converter';\nimport { OTranslateService, SnackBarService } from '../../../services';\nimport { OSharedModule } from '../../../shared';\nimport { Util, IExpression, FilterExpressionUtils } from '../../../utils';\n\nexport const DEFAULT_INPUTS_O_SEARCH_INPUT = [\n  'placeholder',\n  'width',\n  'floatLabel: float-label',\n  'appearance',\n  'columns',\n  'filterCaseSensitive: filter-case-sensitive',\n  'showCaseSensitiveCheckbox: show-case-sensitive-checkbox',\n  'showMenu: show-menu'\n];\n\nexport const DEFAULT_OUTPUTS_O_SEARCH_INPUT = [\n  'onSearch'\n];\n\ndeclare type ColumnObject = {\n  column: string;\n  checked: boolean;\n};\n\n@Component({\n  moduleId: module.id,\n  selector: 'o-search-input',\n  template: `\n    <form [formGroup]=\"getFormGroup()\">\n      <mat-form-field [appearance]=\"appearance\" [floatLabel]=\"floatLabel\" [class.custom-width]=\"hasCustomWidth\"\n        class=\"icon-field\" fxFill>\n        <mat-icon *ngIf=\"!showFilterMenu\" svgIcon=\"ontimize:search\" matPrefix></mat-icon>\n        <mat-icon *ngIf=\"showFilterMenu\" svgIcon=\"ontimize:search\" matPrefix [matMenuTriggerFor]=\"menu\"\n          class=\"menu-trigger\" (menuClosed)=\"onMenuClosed()\"></mat-icon>\n        <input #term matInput id=\"term\" type=\"search\" placeholder=\"{{ placeholder | oTranslate }}\" formControlName=\"term\">\n      </mat-form-field>\n    </form>\n\n    <mat-menu #menu=\"matMenu\" class=\"o-search-input-menu\">\n      <div fxLayout=\"column\" class=\"checkbox-container\">\n\n        <ng-container *ngIf=\"colArray.length > 1\">\n          <mat-checkbox (click)=\"$event.stopPropagation()\" [checked]=\"areAllColumnsChecked()\"\n            (change)=\"onSelectAllChange($event)\">\n            {{ 'SELECT_ALL' | oTranslate }}</mat-checkbox>\n          <mat-divider></mat-divider>\n        </ng-container>\n\n        <ng-container *ngFor=\"let item of colArray\">\n          <mat-checkbox (click)=\"$event.stopPropagation()\" [checked]=\"isChecked(item)\"\n            (change)=\"onCheckboxChange(item, $event)\">\n            {{ item.column | oTranslate }}\n          </mat-checkbox>\n        </ng-container>\n\n        <ng-container *ngIf=\"showCaseSensitiveCheckbox\">\n          <mat-divider></mat-divider>\n          <mat-checkbox (click)=\"$event.stopPropagation()\" [checked]=\"filterCaseSensitive\"\n            (change)=\"onFilterCaseSensitiveChange($event)\">\n            {{ 'TABLE.FILTER.CASE_SENSITIVE' | oTranslate }}\n          </mat-checkbox>\n        </ng-container>\n      </div>\n    </mat-menu>\n  `,\n  styles: [`\n    .o-search-input .mat-icon{vertical-align:bottom;cursor:default}.o-search-input .mat-icon.menu-trigger{cursor:pointer}.o-search-input .mat-input-element{line-height:20px}.o-search-input-menu .mat-divider{margin:8px 0}.o-search-input-menu .checkbox-container{padding:6px 12px}\n  `],\n  inputs: DEFAULT_INPUTS_O_SEARCH_INPUT,\n  outputs: DEFAULT_OUTPUTS_O_SEARCH_INPUT,\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    '[class.o-search-input]': 'true'\n  }\n})\nexport class OSearchInputComponent implements OnInit {\n\n  public static DEFAULT_INPUTS_O_SEARCH_INPUT = DEFAULT_INPUTS_O_SEARCH_INPUT;\n  public static DEFAULT_OUTPUTS_O_SEARCH_INPUT = DEFAULT_OUTPUTS_O_SEARCH_INPUT;\n\n  public onSearch: EventEmitter<any> = new EventEmitter<any>();\n\n  public colArray: ColumnObject[] = [];\n  public placeholder: string = 'SEARCH';\n  public width: string;\n  public columns: string;\n  @InputConverter()\n  public showCaseSensitiveCheckbox: boolean = false;\n  @InputConverter()\n  public showMenu: boolean = true;\n  @InputConverter()\n  protected _filterCaseSensitive: boolean = false;\n  protected _floatLabel: FloatLabelType;\n  protected _appearance: MatFormFieldAppearance;\n\n  protected formGroup: FormGroup;\n  protected term: FormControl;\n  protected translateService: OTranslateService;\n  protected oInputsOptions: OInputsOptions;\n  protected snackBarService: SnackBarService;\n\n  constructor(\n    protected injector: Injector,\n    protected elRef: ElementRef\n  ) {\n    this.translateService = this.injector.get(OTranslateService);\n    this.snackBarService = this.injector.get(SnackBarService);\n    this.formGroup = new FormGroup({});\n  }\n\n  public ngOnInit(): void {\n    this.term = new FormControl();\n    this.formGroup.addControl('term', this.term);\n\n    this.term.valueChanges.pipe(debounceTime(400))\n      .pipe(distinctUntilChanged()).subscribe(term => {\n        if (this.checkActiveColumns()) {\n          this.onSearch.emit(term);\n        }\n      });\n\n    const colArray = Util.parseArray(this.columns, true);\n    colArray.forEach((col: string) => {\n      this.colArray.push({\n        column: col,\n        checked: true\n      });\n    });\n  }\n\n  public ngAfterViewInit(): void {\n    try {\n      this.oInputsOptions = this.injector.get(O_INPUTS_OPTIONS);\n    } catch (e) {\n      this.oInputsOptions = {};\n    }\n    Util.parseOInputsOptions(this.elRef, this.oInputsOptions);\n  }\n\n  get floatLabel(): FloatLabelType {\n    return this._floatLabel;\n  }\n\n  set floatLabel(value: FloatLabelType) {\n    const values = ['always', 'never', 'auto'];\n    if (values.indexOf(value) === -1) {\n      value = 'auto';\n    }\n    this._floatLabel = value;\n  }\n\n  get appearance(): MatFormFieldAppearance {\n    return this._appearance;\n  }\n\n  set appearance(value: MatFormFieldAppearance) {\n    const values = ['legacy', 'standard', 'fill', 'outline'];\n    if (values.indexOf(value) === -1) {\n      value = undefined;\n    }\n    this._appearance = value;\n  }\n\n  get filterCaseSensitive(): boolean {\n    return this._filterCaseSensitive;\n  }\n\n  set filterCaseSensitive(value: boolean) {\n    this._filterCaseSensitive = value;\n  }\n\n  public getFormGroup(): FormGroup {\n    return this.formGroup;\n  }\n\n  public getValue(): string {\n    return this.term.value;\n  }\n\n  public setValue(val: string): void {\n    this.term.setValue(val);\n  }\n\n  public getFormControl(): FormControl {\n    return this.term;\n  }\n\n  get hasCustomWidth(): boolean {\n    return this.width !== undefined;\n  }\n\n  get showFilterMenu(): boolean {\n    return this.showMenu && this.colArray.length > 0;\n  }\n\n  public isChecked(column: ColumnObject): boolean {\n    return column.checked;\n  }\n\n  public onCheckboxChange(column: ColumnObject, event: MatCheckboxChange): void {\n    column.checked = event.checked;\n    // triggerOnSearch if we want to trigger search on each change\n  }\n\n  public onSelectAllChange(event: MatCheckboxChange): void {\n    this.colArray.forEach((col: ColumnObject) => {\n      col.checked = event.checked;\n    });\n    // triggerOnSearch if we want to trigger search on each change\n  }\n\n  public areAllColumnsChecked(): boolean {\n    let result: boolean = true;\n    this.colArray.forEach((col: ColumnObject) => {\n      result = result && col.checked;\n    });\n    return result;\n  }\n\n  public onFilterCaseSensitiveChange(event: MatCheckboxChange): void {\n    this.filterCaseSensitive = event.checked;\n    // triggerOnSearch if we want to trigger search on each change\n  }\n\n  public getActiveColumns(): string[] {\n    return this.colArray.filter(col => col.checked).map(col => col.column);\n  }\n\n  public setActiveColumns(arg: string[]): void {\n    this.colArray.forEach((c: ColumnObject) => {\n      c.checked = arg.indexOf(c.column) !== -1;\n    });\n  }\n\n  protected checkActiveColumns(): boolean {\n    if (this.getActiveColumns().length === 0) {\n      this.snackBarService.open('MESSAGES.AVOID_QUERY_WITHOUT_QUICKFILTER_COLUMNS');\n      return false;\n    }\n    return true;\n  }\n\n  protected triggerOnSearch(): void {\n    const term = this.term.value;\n    if (this.checkActiveColumns() && Util.isDefined(term) && term.length > 0) {\n      this.onSearch.emit(term);\n    }\n  }\n\n  public onMenuClosed(): void {\n    this.triggerOnSearch();\n  }\n\n  get filterExpression(): IExpression {\n    let result: IExpression;\n    const termValue = this.getValue();\n    if (Util.isDefined(termValue) && termValue.length > 0) {\n      const filterCols = this.getActiveColumns();\n      if (filterCols.length > 0) {\n        return FilterExpressionUtils.buildArrayExpressionLike(filterCols, termValue);\n      }\n    }\n    return result;\n  }\n}\n\n@NgModule({\n  declarations: [OSearchInputComponent],\n  imports: [CommonModule, OSharedModule],\n  exports: [OSearchInputComponent]\n})\nexport class OSearchInputModule { }\n"]}