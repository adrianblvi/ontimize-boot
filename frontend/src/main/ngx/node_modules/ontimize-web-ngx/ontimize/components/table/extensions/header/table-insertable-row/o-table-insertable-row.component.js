var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { ChangeDetectionStrategy, Component, ComponentFactoryResolver, EventEmitter, Inject, Injector, forwardRef } from '@angular/core';
import { FormControl, Validators } from '@angular/forms';
import { OTableComponent } from '../../../o-table.component';
import { OTranslateService, SnackBarService } from '../../../../../services';
import { ObservableWrapper, Util } from '../../../../../utils';
import { InputConverter } from '../../../../../decorators';
export var DEFAULT_INPUTS_O_TABLE_INSERTABLE_ROW = [
    'columns',
    'requiredColumns : required-columns',
    'position',
    'showPlaceHolder: show-placeholder',
    'includeParentKeys: include-parent-keys'
];
export var DEFAULT_OUTPUTS_O_TABLE_INSERTABLE_ROW = [
    'onPostInsertRecord'
];
var OTableInsertableRowComponent = (function () {
    function OTableInsertableRowComponent(injector, table, resolver) {
        this.injector = injector;
        this.table = table;
        this.resolver = resolver;
        this.columnsArray = [];
        this.requiredColumnsArray = [];
        this.onPostInsertRecord = new EventEmitter();
        this.columnEditors = {};
        this.position = OTableInsertableRowComponent.DEFAULT_ROW_POSITION;
        this.showPlaceHolder = false;
        this.includeParentKeys = true;
        this.enabled = true;
        this.rowData = {};
        this.controls = {};
        this.translateService = this.injector.get(OTranslateService);
        this.snackBarService = this.injector.get(SnackBarService);
    }
    OTableInsertableRowComponent.prototype.ngOnInit = function () {
        this.columnsArray = Util.parseArray(this.columns, true);
        if (this.columnsArray.length === 0) {
            this.columnsArray = this.table.oTableOptions.visibleColumns;
        }
        this.requiredColumnsArray = Util.parseArray(this.requiredColumns, true);
        if (OTableInsertableRowComponent.AVAILABLE_ROW_POSITIONS.indexOf((this.position || '').toLowerCase()) === -1) {
            this.position = OTableInsertableRowComponent.DEFAULT_ROW_POSITION;
        }
        this.table.setOTableInsertableRow(this);
    };
    OTableInsertableRowComponent.prototype.isFirstRow = function () {
        return this.position === 'first';
    };
    OTableInsertableRowComponent.prototype.isColumnInsertable = function (column) {
        return (this.columnsArray.indexOf(column.attr) !== -1);
    };
    OTableInsertableRowComponent.prototype.isColumnRequired = function (column) {
        return (this.requiredColumnsArray.indexOf(column.attr) !== -1);
    };
    OTableInsertableRowComponent.prototype.initializeEditors = function () {
        var _this = this;
        var self = this;
        this.table.oTableOptions.columns.forEach(function (col, i, array) {
            if (self.isColumnInsertable(col)) {
                var columnEditorType = col.editor ? col.editor.type : col.type;
                if (col.definition) {
                    var editor = col.definition.buildCellEditor(columnEditorType, _this.resolver, col.definition.container, col.definition);
                    _this.columnEditors[col.attr] = editor;
                    var disabledCol = !_this.enabled;
                    if (!disabledCol) {
                        var columnPermissions = _this.table.getOColumnPermissions(col.attr);
                        disabledCol = columnPermissions.enabled === false;
                    }
                    editor.enabled = !disabledCol;
                    editor.showPlaceHolder = _this.showPlaceHolder || editor.showPlaceHolder;
                    editor.table = self.table;
                    editor.tableColumn = col.editor ? col.editor.tableColumn : col.definition;
                    editor.orequired = _this.isColumnRequired(col);
                    editor.formControl = _this.getControl(col, disabledCol);
                    editor.controlArgs = { silent: true };
                    editor.rowData = self.rowData;
                    editor.startEdition(self.rowData);
                    editor.formControl.markAsUntouched();
                    col.editor = editor;
                }
            }
            array[i] = col;
        });
    };
    OTableInsertableRowComponent.prototype.useCellEditor = function (column) {
        return this.isColumnInsertable(column) && Util.isDefined(this.columnEditors[column.attr]);
    };
    OTableInsertableRowComponent.prototype.getControl = function (column, disabled) {
        if (disabled === void 0) { disabled = false; }
        if (!this.controls[column.attr]) {
            var validators = this.resolveValidators(column);
            var cfg = {
                value: undefined,
                disabled: disabled
            };
            this.controls[column.attr] = new FormControl(cfg, validators);
        }
        return this.controls[column.attr];
    };
    OTableInsertableRowComponent.prototype.resolveValidators = function (column) {
        var validators = [];
        if (this.isColumnRequired(column)) {
            validators.push(Validators.required);
        }
        return validators;
    };
    OTableInsertableRowComponent.prototype.getPlaceholder = function (column) {
        var showPlaceHolder = this.showPlaceHolder;
        var cellEditor = this.columnEditors[column.attr];
        if (cellEditor) {
            showPlaceHolder = cellEditor.showPlaceHolder;
        }
        else if (column.definition) {
            showPlaceHolder = showPlaceHolder || column.definition.showPlaceHolder;
        }
        return showPlaceHolder ? this.translateService.get(column.title) : undefined;
    };
    OTableInsertableRowComponent.prototype.handleKeyboardEvent = function (event) {
        if (event.keyCode !== 13) {
            return;
        }
        this.trWrapper = event.currentTarget;
        event.preventDefault();
        event.stopPropagation();
        this.insertRecord();
    };
    OTableInsertableRowComponent.prototype.insertRecord = function () {
        var self = this;
        if (!this.validateFields()) {
            return;
        }
        var values = this.getAttributesValuesToInsert();
        var insertObservable = this.table.insertRecord(values);
        if (insertObservable) {
            insertObservable.subscribe(function (res) {
                self.onInsertSuccess(res);
            }, function (error) {
                self.table.showDialogError(error, 'MESSAGES.ERROR_INSERT');
            });
        }
    };
    OTableInsertableRowComponent.prototype.validateFields = function () {
        var _this = this;
        var valid = true;
        Object.keys(this.controls).forEach(function (controlKey) {
            var control = _this.controls[controlKey];
            control.markAsTouched();
            valid = valid && control.valid;
        });
        return valid;
    };
    OTableInsertableRowComponent.prototype.getAttributesValuesToInsert = function () {
        var _this = this;
        var attrValues = {};
        if (this.includeParentKeys) {
            attrValues = this.table.getParentKeysValues();
        }
        Object.keys(this.controls).forEach(function (controlKey) {
            attrValues[controlKey] = _this.controls[controlKey].value;
        });
        return attrValues;
    };
    OTableInsertableRowComponent.prototype.onInsertSuccess = function (res) {
        ObservableWrapper.callEmit(this.onPostInsertRecord, res);
        this.snackBarService.open('MESSAGES.INSERTED', { icon: 'check_circle' });
        this.cleanFields();
        if (this.table.daoTable.usingStaticData) {
            this.table.setDataArray(res);
        }
        else {
            this.table.reloadData();
        }
    };
    OTableInsertableRowComponent.prototype.cleanFields = function () {
        var _this = this;
        var controlKeys = Object.keys(this.controls);
        controlKeys.forEach(function (controlKey) {
            _this.controls[controlKey].setValue(void 0);
        });
        var firstInputEl = this.trWrapper.querySelector('input');
        if (firstInputEl) {
            setTimeout(function () {
                firstInputEl.focus();
            });
        }
    };
    OTableInsertableRowComponent.prototype.columnHasError = function (column, error) {
        var control = this.controls[column.attr];
        return control && control.touched && control.hasError(error);
    };
    OTableInsertableRowComponent.DEFAULT_INPUTS_O_TABLE_INSERTABLE_ROW = DEFAULT_INPUTS_O_TABLE_INSERTABLE_ROW;
    OTableInsertableRowComponent.DEFAULT_OUTPUTS_O_TABLE_INSERTABLE_ROW = DEFAULT_OUTPUTS_O_TABLE_INSERTABLE_ROW;
    OTableInsertableRowComponent.AVAILABLE_ROW_POSITIONS = ['first', 'last'];
    OTableInsertableRowComponent.DEFAULT_ROW_POSITION = 'last';
    OTableInsertableRowComponent.decorators = [
        { type: Component, args: [{
                    moduleId: module.id,
                    selector: 'o-table-insertable-row',
                    template: ' ',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    inputs: DEFAULT_INPUTS_O_TABLE_INSERTABLE_ROW,
                    outputs: DEFAULT_OUTPUTS_O_TABLE_INSERTABLE_ROW
                },] },
    ];
    OTableInsertableRowComponent.ctorParameters = function () { return [
        { type: Injector },
        { type: OTableComponent, decorators: [{ type: Inject, args: [forwardRef(function () { return OTableComponent; }),] }] },
        { type: ComponentFactoryResolver }
    ]; };
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OTableInsertableRowComponent.prototype, "showPlaceHolder", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OTableInsertableRowComponent.prototype, "includeParentKeys", void 0);
    return OTableInsertableRowComponent;
}());
export { OTableInsertableRowComponent };
//# sourceMappingURL=o-table-insertable-row.component.js.map