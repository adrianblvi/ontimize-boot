var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { ChangeDetectorRef, HostListener, NgZone } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { BehaviorSubject, Observable } from 'rxjs';
import { InputConverter } from '../decorators';
import { DialogService, LocalStorageService, OntimizeService } from '../services';
import { Codes, Util } from '../utils';
import { OFormComponent } from './form/o-form.component';
import { ServiceUtils } from './service.utils';
export var DEFAULT_INPUTS_O_SERVICE_BASE_COMPONENT = [
    'oattr: attr',
    'service',
    'serviceType : service-type',
    'entity',
    'queryOnInit: query-on-init',
    'queryOnBind: query-on-bind',
    'queryOnEvent: query-on-event',
    'pageable',
    'columns',
    'keys',
    'parentKeys: parent-keys',
    'staticData: static-data',
    'queryMethod: query-method',
    'paginatedQueryMethod : paginated-query-method',
    'oQueryRows: query-rows',
    'insertMethod: insert-method',
    'updateMethod: update-method',
    'deleteMethod: delete-method',
    'storeState: store-state',
    'queryWithNullParentKeys: query-with-null-parent-keys',
    'queryFallbackFunction: query-fallback-function'
];
var OServiceBaseComponent = (function () {
    function OServiceBaseComponent(injector) {
        this.injector = injector;
        this.queryOnInit = true;
        this.queryOnBind = true;
        this.pageable = false;
        this.queryMethod = Codes.QUERY_METHOD;
        this.paginatedQueryMethod = Codes.PAGINATED_QUERY_METHOD;
        this.originalQueryRows = Codes.DEFAULT_QUERY_ROWS;
        this._queryRows = this.originalQueryRows;
        this.insertMethod = Codes.INSERT_METHOD;
        this.updateMethod = Codes.UPDATE_METHOD;
        this.deleteMethod = Codes.DELETE_METHOD;
        this.storeState = true;
        this.queryWithNullParentKeys = false;
        this.colArray = [];
        this.keysArray = [];
        this._pKeysEquiv = {};
        this.dataArray = [];
        this.oattrFromEntity = false;
        this._state = {};
        this.loadingSubject = new BehaviorSubject(false);
        this.loading = this.loadingSubject.asObservable();
        this.alreadyStored = false;
        this.sqlTypes = undefined;
        this.dialogService = this.injector.get(DialogService);
        this.localStorageService = this.injector.get(LocalStorageService);
        this.router = this.injector.get(Router);
        this.actRoute = this.injector.get(ActivatedRoute);
        try {
            this.cd = this.injector.get(ChangeDetectorRef);
            this.form = this.injector.get(OFormComponent);
        }
        catch (e) {
        }
    }
    Object.defineProperty(OServiceBaseComponent.prototype, "oQueryRows", {
        set: function (value) {
            if (Util.isDefined(value)) {
                this.originalQueryRows = value;
                this._queryRows = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OServiceBaseComponent.prototype, "queryRows", {
        get: function () {
            return this._queryRows;
        },
        set: function (value) {
            if (Util.isDefined(value)) {
                this._queryRows = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    OServiceBaseComponent.prototype.initialize = function () {
        var _this = this;
        if (!Util.isDefined(this.oattr) && Util.isDefined(this.entity)) {
            this.oattr = this.entity.replace('.', '_');
            this.oattrFromEntity = true;
        }
        this.keysArray = Util.parseArray(this.keys);
        this.colArray = Util.parseArray(this.columns, true);
        var pkArray = Util.parseArray(this.parentKeys);
        this._pKeysEquiv = Util.parseParentKeysEquivalences(pkArray, Codes.COLUMNS_ALIAS_SEPARATOR);
        if (this.storeState) {
            this.onRouteChangeStorageSubscription = this.localStorageService.onRouteChange.subscribe(function (res) {
                _this.updateStateStorage();
                _this.alreadyStored = false;
            });
            this.initializeState();
            if (this.state.hasOwnProperty('query-rows')) {
                if (this.state.hasOwnProperty('initial-configuration') && this.state['initial-configuration'].hasOwnProperty['query-rows']
                    && this.state['initial-configuration']['query-rows'] === this.originalQueryRows) {
                    this.queryRows = this.state['query-rows'];
                }
            }
        }
        if (this.staticData) {
            this.queryOnBind = false;
            this.queryOnInit = false;
            this.setDataArray(this.staticData);
        }
        else {
            this.configureService();
        }
        if (this.form && Util.isDefined(this.dataService)) {
            this.setFormComponent(this.form);
        }
        if (Util.isDefined(this.queryOnEvent) && Util.isDefined(this.queryOnEvent.subscribe)) {
            var self_1 = this;
            this.queryOnEventSubscription = this.queryOnEvent.subscribe(function (value) {
                if (Util.isDefined(value) || _this.queryWithNullParentKeys) {
                    self_1.queryData();
                }
            });
        }
        if (typeof this.queryFallbackFunction !== 'function') {
            this.queryFallbackFunction = undefined;
        }
    };
    OServiceBaseComponent.prototype.afterViewInit = function () {
    };
    OServiceBaseComponent.prototype.destroy = function () {
        if (this.onFormDataSubscribe) {
            this.onFormDataSubscribe.unsubscribe();
        }
        if (this.querySubscription) {
            this.querySubscription.unsubscribe();
        }
        if (this.loaderSubscription) {
            this.loaderSubscription.unsubscribe();
        }
        if (this.onRouteChangeStorageSubscription) {
            this.onRouteChangeStorageSubscription.unsubscribe();
        }
        if (this.queryOnEventSubscription) {
            this.queryOnEventSubscription.unsubscribe();
        }
        this.updateStateStorage();
    };
    OServiceBaseComponent.prototype.ngOnChanges = function (changes) {
        if (Util.isDefined(changes['staticData'])) {
            this.setDataArray(changes['staticData'].currentValue);
        }
    };
    OServiceBaseComponent.prototype.beforeunloadHandler = function (event) {
        this.updateStateStorage();
    };
    OServiceBaseComponent.prototype.getAttribute = function () {
        return this.oattr;
    };
    OServiceBaseComponent.prototype.getComponentKey = function () {
        return this.getAttribute();
    };
    OServiceBaseComponent.prototype.getDataToStore = function () {
        return this.state;
    };
    OServiceBaseComponent.prototype.getRouteKey = function () {
        var route = this.router.url;
        this.actRoute.params.subscribe(function (params) {
            Object.keys(params).forEach(function (key) {
                route = route.replace(params[key], key);
            });
        });
        return route;
    };
    OServiceBaseComponent.prototype.getKeys = function () {
        return this.keysArray;
    };
    OServiceBaseComponent.prototype.configureService = function () {
        var loadingService = OntimizeService;
        if (this.serviceType) {
            loadingService = this.serviceType;
        }
        try {
            this.dataService = this.injector.get(loadingService);
            if (Util.isDataService(this.dataService)) {
                var serviceCfg = this.dataService.getDefaultServiceConfiguration(this.service);
                if (this.entity) {
                    serviceCfg['entity'] = this.entity;
                }
                this.dataService.configureService(serviceCfg);
            }
        }
        catch (e) {
            console.error(e);
        }
    };
    OServiceBaseComponent.prototype.getDataArray = function () {
        return this.dataArray;
    };
    OServiceBaseComponent.prototype.setDataArray = function (data) {
        if (Util.isArray(data)) {
            this.dataArray = data;
        }
        else if (Util.isObject(data)) {
            this.dataArray = [data];
        }
        else {
            console.warn('Component has received not supported service data. Supported data are Array or Object');
            this.dataArray = [];
        }
    };
    OServiceBaseComponent.prototype.setFormComponent = function (form) {
        var _this = this;
        if (!Util.isDefined(this.form)) {
            this.form = form;
        }
        if (this.queryOnBind) {
            this.onFormDataSubscribe = this.form.onDataLoaded.subscribe(function () { return _this.pageable ? _this.reloadPaginatedDataFromStart() : _this.reloadData(); });
        }
    };
    OServiceBaseComponent.prototype.queryData = function (filter, ovrrArgs) {
        var _this = this;
        var queryMethodName = this.pageable ? this.paginatedQueryMethod : this.queryMethod;
        if (!this.dataService || !(queryMethodName in this.dataService) || !this.entity) {
            return;
        }
        var filterParentKeys = ServiceUtils.getParentKeysFromForm(this._pKeysEquiv, this.form);
        if (!ServiceUtils.filterContainsAllParentKeys(filterParentKeys, this._pKeysEquiv) && !this.queryWithNullParentKeys) {
            this.setData([], []);
        }
        else {
            filter = Object.assign(filter || {}, filterParentKeys);
            var queryArguments = this.getQueryArguments(filter, ovrrArgs);
            if (this.querySubscription) {
                this.querySubscription.unsubscribe();
            }
            if (this.loaderSubscription) {
                this.loaderSubscription.unsubscribe();
            }
            this.loaderSubscription = this.load();
            var self_2 = this;
            this.queryArguments = queryArguments;
            this.querySubscription = this.dataService[queryMethodName].apply(this.dataService, queryArguments).subscribe(function (res) {
                var data = undefined;
                _this.sqlTypes = undefined;
                if (Util.isArray(res)) {
                    data = res;
                    _this.sqlTypes = {};
                }
                else if ((res.code === Codes.ONTIMIZE_SUCCESSFUL_CODE)) {
                    var arrData = (res.data !== undefined) ? res.data : [];
                    data = Util.isArray(arrData) ? arrData : [];
                    _this.sqlTypes = res.sqlTypes;
                    if (_this.pageable) {
                        _this.updatePaginationInfo(res);
                    }
                }
                self_2.setData(data, _this.sqlTypes, (ovrrArgs && ovrrArgs.replace));
                self_2.loaderSubscription.unsubscribe();
            }, function (err) {
                self_2.setData([], []);
                self_2.loaderSubscription.unsubscribe();
                if (Util.isDefined(self_2.queryFallbackFunction)) {
                    self_2.queryFallbackFunction(err);
                }
                else if (err && typeof err !== 'object') {
                    self_2.dialogService.alert('ERROR', err);
                }
                else {
                    self_2.dialogService.alert('ERROR', 'MESSAGES.ERROR_QUERY');
                }
            });
        }
    };
    OServiceBaseComponent.prototype.reloadData = function () {
        this.queryData();
    };
    OServiceBaseComponent.prototype.reloadPaginatedDataFromStart = function () {
        this.reloadData();
    };
    OServiceBaseComponent.prototype.load = function () {
        var self = this;
        var zone = this.injector.get(NgZone);
        var loadObservable = new Observable(function (observer) {
            var timer = window.setTimeout(function () {
                observer.next(true);
            }, 250);
            return function () {
                window.clearTimeout(timer);
                zone.run(function () {
                    self.loadingSubject.next(false);
                });
            };
        });
        var subscription = loadObservable.subscribe(function (val) {
            zone.run(function () {
                self.loadingSubject.next(val);
            });
        });
        return subscription;
    };
    OServiceBaseComponent.prototype.extractKeysFromRecord = function (item) {
        var result = {};
        if (Util.isObject(item)) {
            this.keysArray.forEach(function (key) {
                if (Util.isDefined(item[key])) {
                    result[key] = item[key];
                }
            });
        }
        return result;
    };
    OServiceBaseComponent.prototype.getAttributesValuesToQuery = function () {
        var result = this.colArray;
        this.keysArray.forEach(function (key) {
            if (result.indexOf(key) === -1) {
                result.push(key);
            }
        });
        return result;
    };
    OServiceBaseComponent.prototype.getQueryArguments = function (filter, ovrrArgs) {
        var compFilter = this.getComponentFilter(filter);
        var queryCols = this.getAttributesValuesToQuery();
        var sqlTypes = (ovrrArgs && ovrrArgs.hasOwnProperty('sqltypes')) ? ovrrArgs.sqltypes : this.form ? this.form.getAttributesSQLTypes() : {};
        var queryArguments = [compFilter, queryCols, this.entity, sqlTypes];
        if (this.pageable) {
            var queryOffset = (ovrrArgs && ovrrArgs.hasOwnProperty('offset')) ? ovrrArgs.offset : this.state.queryRecordOffset;
            var queryRowsN = (ovrrArgs && ovrrArgs.hasOwnProperty('length')) ? ovrrArgs.length : this.queryRows;
            queryArguments = queryArguments.concat([queryOffset, queryRowsN, undefined]);
        }
        return queryArguments;
    };
    OServiceBaseComponent.prototype.updatePaginationInfo = function (queryRes) {
        var resultEndIndex = queryRes.startRecordIndex + (queryRes.data ? queryRes.data.length : 0);
        if (queryRes.startRecordIndex !== undefined) {
            this.state.queryRecordOffset = resultEndIndex;
        }
        if (queryRes.totalQueryRecordsNumber !== undefined) {
            this.state.totalQueryRecordsNumber = queryRes.totalQueryRecordsNumber;
        }
    };
    OServiceBaseComponent.prototype.getTotalRecordsNumber = function () {
        return (this.state && this.state.totalQueryRecordsNumber !== undefined) ? this.state.totalQueryRecordsNumber : undefined;
    };
    OServiceBaseComponent.prototype.getComponentFilter = function (existingFilter) {
        if (existingFilter === void 0) { existingFilter = {}; }
        return existingFilter;
    };
    OServiceBaseComponent.prototype.getSqlTypes = function () {
        return Util.isDefined(this.sqlTypes) ? this.sqlTypes : {};
    };
    Object.defineProperty(OServiceBaseComponent.prototype, "state", {
        get: function () {
            return this._state;
        },
        set: function (arg) {
            this._state = arg;
        },
        enumerable: true,
        configurable: true
    });
    OServiceBaseComponent.prototype.getParentKeysValues = function () {
        return ServiceUtils.getParentKeysFromForm(this._pKeysEquiv, this.form);
    };
    OServiceBaseComponent.prototype.updateStateStorage = function () {
        if (this.localStorageService && this.storeState && !this.alreadyStored) {
            this.alreadyStored = true;
            this.localStorageService.updateComponentStorage(this, this.getRouteKey());
        }
    };
    OServiceBaseComponent.prototype.setData = function (data, sqlTypes, replace) {
    };
    OServiceBaseComponent.prototype.initializeState = function () {
        this.state = this.localStorageService.getComponentStorage(this, this.getRouteKey());
    };
    OServiceBaseComponent.DEFAULT_INPUTS_O_SERVICE_BASE_COMPONENT = DEFAULT_INPUTS_O_SERVICE_BASE_COMPONENT;
    OServiceBaseComponent.propDecorators = {
        beforeunloadHandler: [{ type: HostListener, args: ['window:beforeunload', ['$event'],] }]
    };
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OServiceBaseComponent.prototype, "queryOnInit", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OServiceBaseComponent.prototype, "queryOnBind", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OServiceBaseComponent.prototype, "pageable", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Number),
        __metadata("design:paramtypes", [Number])
    ], OServiceBaseComponent.prototype, "oQueryRows", null);
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OServiceBaseComponent.prototype, "storeState", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OServiceBaseComponent.prototype, "queryWithNullParentKeys", void 0);
    return OServiceBaseComponent;
}());
export { OServiceBaseComponent };
//# sourceMappingURL=o-service-base-component.class.js.map