var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { ChangeDetectionStrategy, Component, Injector, TemplateRef, ViewChild } from '@angular/core';
import { DialogService, OntimizeService } from '../../../../../services';
import { dataServiceFactory } from '../../../../../services/data-service.provider';
import { Codes, Util } from '../../../../../utils';
import { ServiceUtils } from '../../../../service.utils';
import { OBaseTableCellRenderer } from '../o-base-table-cell-renderer.class';
export var DEFAULT_INPUTS_O_TABLE_CELL_RENDERER_SERVICE = [
    'entity',
    'service',
    'columns',
    'valueColumn: value-column',
    'parentKeys: parent-keys',
    'queryMethod: query-method',
    'serviceType : service-type'
];
var ɵ0 = dataServiceFactory;
var OTableCellRendererServiceComponent = (function (_super) {
    __extends(OTableCellRendererServiceComponent, _super);
    function OTableCellRendererServiceComponent(injector) {
        var _this = _super.call(this, injector) || this;
        _this.injector = injector;
        _this.cellValues = [];
        _this.responseMap = {};
        _this.queryMethod = Codes.QUERY_METHOD;
        _this.colArray = [];
        _this._pKeysEquiv = {};
        _this.tableColumn.type = 'service';
        _this.dialogService = injector.get(DialogService);
        return _this;
    }
    OTableCellRendererServiceComponent.prototype.ngOnInit = function () {
        if (this.table) {
            var oCol = this.table.getOColumn(this.column);
            oCol.definition.contentAlign = oCol.definition.contentAlign ? oCol.definition.contentAlign : 'center';
        }
        this.colArray = Util.parseArray(this.columns, true);
        var pkArray = Util.parseArray(this.parentKeys);
        this._pKeysEquiv = Util.parseParentKeysEquivalences(pkArray);
        this.configureService();
    };
    OTableCellRendererServiceComponent.prototype.ngAfterViewInit = function () {
        var oCol = this.table.getOColumn(this.column);
        if (Util.isDefined(oCol.editor)) {
            var self_1 = this;
            this.editorSuscription = oCol.editor.onPostUpdateRecord.subscribe(function (data) {
                self_1.queryData(data[self_1.tableColumn.attr], data);
            });
        }
    };
    OTableCellRendererServiceComponent.prototype.ngOnDestroy = function () {
        if (this.editorSuscription) {
            this.editorSuscription.unsubscribe();
        }
    };
    OTableCellRendererServiceComponent.prototype.getDescriptionValue = function (cellvalue, rowValue) {
        if (cellvalue !== undefined && this.cellValues.indexOf(cellvalue) === -1) {
            this.queryData(cellvalue, rowValue);
            this.cellValues.push(cellvalue);
        }
        return '';
    };
    OTableCellRendererServiceComponent.prototype.queryData = function (cellvalue, parentItem) {
        var _this = this;
        var self = this;
        if (!this.dataService || !(this.queryMethod in this.dataService) || !this.entity) {
            console.warn('Service not properly configured! aborting query');
            return;
        }
        var filter = ServiceUtils.getFilterUsingParentKeys(parentItem, this._pKeysEquiv);
        var tableColAlias = Object.keys(this._pKeysEquiv).find(function (key) { return _this._pKeysEquiv[key] === _this.column; });
        if (Util.isDefined(tableColAlias)) {
            if (!filter[tableColAlias]) {
                filter[tableColAlias] = cellvalue;
            }
        }
        else {
            filter[this.column] = cellvalue;
        }
        this.querySubscription = this.dataService[this.queryMethod](filter, this.colArray, this.entity).subscribe(function (resp) {
            if (resp.code === Codes.ONTIMIZE_SUCCESSFUL_CODE) {
                self.responseMap[cellvalue] = resp.data[0][self.valueColumn];
            }
        }, function (err) {
            console.error(err);
            if (err && typeof err !== 'object') {
                _this.dialogService.alert('ERROR', err);
            }
            else {
                _this.dialogService.alert('ERROR', 'MESSAGES.ERROR_QUERY');
            }
        });
    };
    OTableCellRendererServiceComponent.prototype.configureService = function () {
        var loadingService = OntimizeService;
        if (this.serviceType) {
            loadingService = this.serviceType;
        }
        try {
            this.dataService = this.injector.get(loadingService);
            if (Util.isDataService(this.dataService)) {
                var serviceCfg = this.dataService.getDefaultServiceConfiguration(this.service);
                if (this.entity) {
                    serviceCfg['entity'] = this.entity;
                }
                this.dataService.configureService(serviceCfg);
            }
        }
        catch (e) {
            console.error(e);
        }
    };
    OTableCellRendererServiceComponent.prototype.getCellData = function (cellvalue, rowvalue) {
        return this.responseMap[cellvalue];
    };
    OTableCellRendererServiceComponent.DEFAULT_INPUTS_O_TABLE_CELL_RENDERER_SERVICE = DEFAULT_INPUTS_O_TABLE_CELL_RENDERER_SERVICE;
    OTableCellRendererServiceComponent.decorators = [
        { type: Component, args: [{
                    moduleId: module.id,
                    selector: 'o-table-cell-renderer-service',
                    template: "\n    <ng-template #templateref let-cellvalue=\"cellvalue\" let-rowvalue=\"rowvalue\">\n      {{ getDescriptionValue(cellvalue, rowvalue) }}{{ responseMap[cellvalue] }}\n    </ng-template>\n  ",
                    inputs: DEFAULT_INPUTS_O_TABLE_CELL_RENDERER_SERVICE,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        { provide: OntimizeService, useFactory: ɵ0, deps: [Injector] }
                    ]
                },] },
    ];
    OTableCellRendererServiceComponent.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    OTableCellRendererServiceComponent.propDecorators = {
        templateref: [{ type: ViewChild, args: ['templateref', { read: TemplateRef },] }]
    };
    return OTableCellRendererServiceComponent;
}(OBaseTableCellRenderer));
export { OTableCellRendererServiceComponent };
export { ɵ0 };
//# sourceMappingURL=o-table-cell-renderer-service.component.js.map