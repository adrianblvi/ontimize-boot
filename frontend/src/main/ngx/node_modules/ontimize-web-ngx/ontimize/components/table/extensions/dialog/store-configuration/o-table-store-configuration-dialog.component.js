var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { ChangeDetectionStrategy, Component, Injector, ViewChild } from '@angular/core';
import { FormControl, FormGroup, Validators } from '@angular/forms';
import { MatDialogRef, MatSelectionList } from '@angular/material';
import { OTableBaseDialogClass } from '../o-table-base-dialog.class';
var OTableStoreConfigurationDialogComponent = (function (_super) {
    __extends(OTableStoreConfigurationDialogComponent, _super);
    function OTableStoreConfigurationDialogComponent(dialogRef, injector) {
        var _this = _super.call(this, injector) || this;
        _this.dialogRef = dialogRef;
        _this.injector = injector;
        _this.properties = [{
                property: 'sort',
                name: 'TABLE.DIALOG.PROPERTIES.SORT',
                info: 'TABLE.DIALOG.PROPERTIES.SORT.INFO'
            }, {
                property: 'columns-display',
                name: 'TABLE.DIALOG.PROPERTIES.COLUMNS_DISPLAY',
                info: 'TABLE.DIALOG.PROPERTIES.COLUMNS_DISPLAY.INFO'
            }, {
                property: 'quick-filter',
                name: 'TABLE.DIALOG.PROPERTIES.QUICK_FILTER',
                info: 'TABLE.DIALOG.PROPERTIES.QUICK_FILTER.INFO'
            }, {
                property: 'columns-filter',
                name: 'TABLE.DIALOG.PROPERTIES.COLUMNS_FILTER',
                info: 'TABLE.DIALOG.PROPERTIES.COLUMNS_FILTER.INFO'
            }, {
                property: 'page',
                name: 'TABLE.DIALOG.PROPERTIES.PAGE',
                info: 'TABLE.DIALOG.PROPERTIES.PAGE.INFO'
            }];
        _this.formGroup = new FormGroup({
            name: new FormControl('', [
                Validators.required
            ]),
            description: new FormControl('')
        });
        _this.setFormControl(_this.formGroup.get('name'));
        return _this;
    }
    OTableStoreConfigurationDialogComponent.prototype.ngAfterViewInit = function () {
        this.propertiesList.selectAll();
    };
    OTableStoreConfigurationDialogComponent.prototype.areAllSelected = function () {
        return this.propertiesList && this.propertiesList.options && this.propertiesList.options.length === this.propertiesList.selectedOptions.selected.length;
    };
    OTableStoreConfigurationDialogComponent.prototype.onSelectAllChange = function (event) {
        event.checked ? this.propertiesList.selectAll() : this.propertiesList.deselectAll();
    };
    OTableStoreConfigurationDialogComponent.prototype.getConfigurationAttributes = function () {
        return this.formGroup.value;
    };
    OTableStoreConfigurationDialogComponent.prototype.getSelectedTableProperties = function () {
        var selected = this.propertiesList.selectedOptions.selected;
        return selected.length ? selected.map(function (item) { return item.value; }) : [];
    };
    OTableStoreConfigurationDialogComponent.prototype.isIndeterminate = function () {
        return !this.areAllSelected();
    };
    OTableStoreConfigurationDialogComponent.decorators = [
        { type: Component, args: [{
                    moduleId: module.id,
                    selector: 'o-table-store-configuration-dialog',
                    template: "\n    <span mat-dialog-title>{{ 'TABLE.BUTTONS.SAVE_CONFIGURATION' | oTranslate }}</span>\n\n    <mat-dialog-content>\n      <div mat-subheader>{{ 'TABLE.DIALOG.SAVE_CONFIGURATION' | oTranslate }}</div>\n      <form #form [formGroup]=\"formGroup\" fxLayout=\"column\">\n        <mat-form-field>\n          <input matInput [matTooltip]=\"tooltipText\" [matTooltipClass]=\"tooltipClass\" placeholder=\"{{ 'TABLE.DIALOG.CONFIGURATION_NAME' | oTranslate }}\"\n            formControlName=\"name\" required>\n          <mat-error *ngIf=\"formGroup.controls['name'].hasError('required')\" text=\"{{ 'FORM_VALIDATION.REQUIRED' | oTranslate }}\"></mat-error>\n        </mat-form-field>\n        <mat-form-field class=\"example-full-width\">\n          <textarea matInput placeholder=\"{{ 'TABLE.DIALOG.CONFIGURATION_DESCRIPTION' | oTranslate }}\" formControlName=\"description\" rows=\"4\"\n            cols=\"50\"></textarea>\n        </mat-form-field>\n        <div class=\"inner-subheader\" mat-subheader>{{ 'TABLE.DIALOG.CONFIGURATION_PROPERTIES' | oTranslate }}</div>\n        <div fxLayout=\"column\">\n          <mat-checkbox (change)=\"onSelectAllChange($event)\" [checked]=\"areAllSelected()\" [indeterminate]=\"isIndeterminate()\" class=\"select-all-checkbox\">\n            {{ 'SELECT_ALL' | oTranslate }}\n          </mat-checkbox>\n\n          <mat-selection-list #propertiesList dense class=\"o-table-save-configuration-dialog-list o-scroll\">\n            <mat-list-option checkboxPosition=\"before\" *ngFor=\"let property of properties\" [value]=\"property.property\">\n              <div fxLayout=\"row\" fxLayoutAlign=\"center center\">\n                <span matLine fxFlex>{{ property.name | oTranslate }}</span>\n                <mat-icon *ngIf=\"property.info\" matTooltip=\"{{ property.info | oTranslate }}\" class=\"o-tscd-list-tooltip\">info</mat-icon>\n              </div>\n            </mat-list-option>\n          </mat-selection-list>\n        </div>\n      </form>\n    </mat-dialog-content>\n\n    <mat-dialog-actions align=\"end\">\n      <button type=\"button\" mat-stroked-button class=\"mat-primary\" [mat-dialog-close]=\"false\">{{ 'CANCEL' | oTranslate | uppercase }}</button>\n      <button type=\"button\" mat-stroked-button class=\"mat-primary\" [mat-dialog-close]=\"true\"\n        [disabled]=\"!formGroup.valid || propertiesList.selectedOptions.selected.length===0\">{{ 'SAVE' | oTranslate | uppercase }}</button>\n    </mat-dialog-actions>\n  ",
                    styles: ["\n    .select-all-checkbox{padding:6px 0}.o-table-save-configuration-dialog-list{max-height:120px;overflow-y:scroll}.o-table-save-configuration-dialog-list .mat-list-item{height:30px}.o-table-save-configuration-dialog-list .mat-list-item .o-tscd-list-tooltip.mat-icon{opacity:.25}\n  "],
                    changeDetection: ChangeDetectionStrategy.OnPush
                },] },
    ];
    OTableStoreConfigurationDialogComponent.ctorParameters = function () { return [
        { type: MatDialogRef },
        { type: Injector }
    ]; };
    OTableStoreConfigurationDialogComponent.propDecorators = {
        propertiesList: [{ type: ViewChild, args: ['propertiesList',] }]
    };
    return OTableStoreConfigurationDialogComponent;
}(OTableBaseDialogClass));
export { OTableStoreConfigurationDialogComponent };
//# sourceMappingURL=o-table-store-configuration-dialog.component.js.map