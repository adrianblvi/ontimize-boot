{"version":3,"file":"o-slide-toggle.component.js","sourceRoot":"","sources":["../../../../../tmp/ontimize/components/input/slide-toggle/o-slide-toggle.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { CommonModule } from '@angular/common';\nimport { Component, ElementRef, forwardRef, Inject, Injector, NgModule, Optional, ViewEncapsulation } from '@angular/core';\nimport { ThemePalette } from '@angular/material';\nimport { OSharedModule } from '../../../shared/shared.module';\nimport { Util } from '../../../util/util';\nimport { OFormComponent, OFormValue } from '../../form/form-components';\nimport { DEFAULT_INPUTS_O_FORM_DATA_COMPONENT, DEFAULT_OUTPUTS_O_FORM_DATA_COMPONENT, OFormDataComponent } from '../../o-form-data-component.class';\n\n\nexport const DEFAULT_INPUTS_O_SLIDETOGGLE = [\n  // true-value: true value. Default: true.\n  'trueValue: true-value',\n  // false-value: false value. Default: false.\n  'falseValue: false-value',\n  // boolean-type [number|boolean|string]: cellData value type. Default: boolean\n  'booleanType: boolean-type',\n  // color: Theme color palette for the component.\n  'color',\n  // label-position: Whether the label should appear after or before the slide-toggle. Defaults to 'after'\n  'labelPosition: label-position',\n  ...DEFAULT_INPUTS_O_FORM_DATA_COMPONENT\n];\n\nexport const DEFAULT_OUTPUTS_O_SLIDETOGGLE = [\n  ...DEFAULT_OUTPUTS_O_FORM_DATA_COMPONENT\n];\n\n@Component({\n  moduleId: module.id,\n  selector: 'o-slide-toggle',\n  inputs: DEFAULT_INPUTS_O_SLIDETOGGLE,\n  outputs: DEFAULT_OUTPUTS_O_SLIDETOGGLE,\n  template: `\n    <div [class.custom-width]=\"hasCustomWidth\" [formGroup]=\"getFormGroup()\" class=\"relative\" [matTooltip]=\"tooltip\"\n      [matTooltipClass]=\"tooltipClass\" [matTooltipPosition]=\"tooltipPosition\" [matTooltipShowDelay]=\"tooltipShowDelay\"\n      [matTooltipHideDelay]=\"tooltipHideDelay\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxFill>\n      <mat-slide-toggle [id]=\"getAttribute()\" [formControlName]=\"getAttribute()\" [checked]=\"isChecked()\"\n        [required]=\"isRequired\" [labelPosition]=\"labelPosition\" [color]=\"color\" (change)=\"onChangeEvent($event)\">\n        <ng-container *ngIf=\"labelVisible\">{{ olabel | oTranslate }}</ng-container>\n        <mat-error *ngIf=\"hasError('required')\" text=\"{{ 'FORM_VALIDATION.REQUIRED' | oTranslate }}\"></mat-error>\n        <mat-error *ngFor=\"let oError of getActiveOErrors()\" text=\"{{ oError.text | oTranslate }}\"></mat-error>\n      </mat-slide-toggle>\n      <div *ngIf=\"isReadOnly\" (click)=\"onClickBlocker($event)\" class=\"read-only-blocker\" fxFill></div>\n    </div>\n  `,\n  styles: [`\n    .o-slide-toggle .read-only-blocker{z-index:2;position:absolute;top:0;left:0;right:0}\n  `],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    '[class.o-slide-toggle]': 'true'\n  }\n})\nexport class OSlideToggleComponent extends OFormDataComponent {\n\n  public static DEFAULT_INPUTS_O_CHECKBOX = DEFAULT_INPUTS_O_SLIDETOGGLE;\n  public static DEFAULT_OUTPUTS_O_CHECKBOX = DEFAULT_OUTPUTS_O_SLIDETOGGLE;\n\n  public trueValue: number | boolean | string = true;\n  public falseValue: number | boolean | string = false;\n  public booleanType: 'number' | 'boolean' | 'string' = 'boolean';\n  public color: ThemePalette;\n  public labelPosition: 'before' | 'after' = 'after';\n\n  constructor(\n    @Optional() @Inject(forwardRef(() => OFormComponent)) form: OFormComponent,\n    elRef: ElementRef,\n    injector: Injector\n  ) {\n    super(form, elRef, injector);\n    this._defaultSQLTypeKey = 'BOOLEAN';\n    this.defaultValue = false;\n  }\n\n  initialize() {\n    super.initialize();\n    if (!Util.isDefined(this.sqlType)) {\n      switch (this.booleanType) {\n        case 'number':\n          this.sqlType = 'INTEGER';\n          break;\n        case 'string':\n          this.sqlType = 'VARCHAR';\n          break;\n        case 'boolean':\n        default:\n          this.sqlType = 'BOOLEAN';\n      }\n    }\n    this.defaultValue = this.falseValue;\n  }\n\n  ensureOFormValue(value: any) {\n    if (value instanceof OFormValue) {\n      if (!Util.isDefined(value.value)) {\n        value.value = this.falseValue;\n      }\n      this.value = new OFormValue(value.value);\n    } else {\n      this.value = new OFormValue(value === this.trueValue ? this.trueValue : this.falseValue);\n    }\n  }\n\n  isChecked(): boolean {\n    if (this.value instanceof OFormValue) {\n      return this.value.value === this.trueValue;\n    }\n    return false;\n  }\n\n  onClickBlocker(e: Event) {\n    e.stopPropagation();\n  }\n\n}\n\n@NgModule({\n  declarations: [OSlideToggleComponent],\n  imports: [CommonModule, OSharedModule],\n  exports: [OSlideToggleComponent]\n})\nexport class OSlideToggleModule { }\n"]}