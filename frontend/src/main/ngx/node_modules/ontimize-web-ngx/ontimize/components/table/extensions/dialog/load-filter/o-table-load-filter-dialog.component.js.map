{"version":3,"file":"o-table-load-filter-dialog.component.js","sourceRoot":"","sources":["../../../../../../../tmp/ontimize/components/table/extensions/dialog/load-filter/o-table-load-filter-dialog.component.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,YAAY,EAAE,MAAM,EAAE,QAAQ,EAAU,SAAS,EAAE,uBAAuB,EAAE,iBAAiB,EAAE,MAAM,eAAe,CAAC;AACzI,OAAO,EAAE,eAAe,EAAE,YAAY,EAAiB,gBAAgB,EAAE,MAAM,mBAAmB,CAAC;AACnG,OAAO,EAAE,cAAc,EAAE,MAAM,0BAA0B,CAAC;AAG1D,OAAO,EAAE,aAAa,EAAE,MAAM,wCAAwC,CAAC;AAEvE;IA2CE,yCACS,SAAwD,EACtC,IAAgC,EAC/C,QAAkB;QAFrB,cAAS,GAAT,SAAS,CAA+C;QAErD,aAAQ,GAAR,QAAQ,CAAU;QAV9B,YAAO,GAA+B,EAAE,CAAC;QAEzC,aAAQ,GAAyB,IAAI,YAAY,EAAE,CAAC;QAUlD,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QACvB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;QACtD,IAAI;YACF,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;SAChD;QAAC,OAAO,CAAC,EAAE;SAEX;IACH,CAAC;IAED,kDAAQ,GAAR;QACE,IAAI,CAAC,UAAU,CAAC,eAAe,GAAG,IAAI,cAAc,CAAgB,KAAK,CAAC,CAAC;IAC7E,CAAC;IAED,qDAAW,GAAX,UAAY,OAAmC;QAC7C,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,CAAC;IAED,+DAAqB,GAArB;QACE,IAAI,QAAQ,GAAoB,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,QAAQ,CAAC;QACzE,OAAO,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;IACtD,CAAC;IAED,sDAAY,GAAZ,UAAa,UAAkB;QAA/B,iBAOC;QANC,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,SAAS,EAAE,oCAAoC,CAAC,CAAC,IAAI,CAAC,UAAA,MAAM;YACrF,IAAI,MAAM,EAAE;gBACV,KAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;gBAC/B,KAAI,CAAC,EAAE,CAAC,aAAa,EAAE,CAAC;aACzB;QACH,CAAC,CAAC,CAAC;IACL,CAAC;;gBA7EF,SAAS,SAAC;oBACT,QAAQ,EAAE,MAAM,CAAC,EAAE;oBACnB,QAAQ,EAAE,4BAA4B;oBACtC,QAAQ,EAAE,uhDAuBT;oBACD,MAAM,EAAE,CAAC,QAER,CAAC;oBACF,eAAe,EAAE,uBAAuB,CAAC,MAAM;iBAChD;;;gBArCyB,YAAY;gBAmDH,KAAK,uBAAnC,MAAM,SAAC,eAAe;gBApDe,QAAQ;;;6BAyC/C,SAAS,SAAC,gBAAgB;;IA6C7B,sCAAC;CAAA,AA/ED,IA+EC;SA/CY,+BAA+B","sourcesContent":["import { Component, EventEmitter, Inject, Injector, OnInit, ViewChild, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef, MatListOption, MatSelectionList } from '@angular/material';\nimport { SelectionModel } from '@angular/cdk/collections';\n\nimport { ITableFiltersStatus } from '../../o-table-storage.class';\nimport { DialogService } from '../../../../../services/dialog.service';\n\n@Component({\n  moduleId: module.id,\n  selector: 'o-table-load-filter-dialog',\n  template: `\n    <span mat-dialog-title>{{ 'TABLE.BUTTONS.FILTER_LOAD' | oTranslate }}</span>\n    <mat-dialog-content fxLayout=\"column\">\n      <div mat-subheader>{{ 'TABLE.DIALOG.LOAD_FILTER' | oTranslate }}</div>\n      <mat-selection-list #filterList dense class=\"o-table-load-filter-dialog-list\">\n        <mat-list-option *ngFor=\"let filter of filters \" [value]=\"filter.name\" checkboxPosition=\"before\">\n          <span matLine class=\"o-table-load-filter-dialog-list-title\">{{ filter.name }}</span>\n          <span matLine>{{ filter.description }}</span>\n        </mat-list-option>\n        <mat-list-item *ngIf=\"filters.length === 0\">\n          <span class=\"empty-filter-list\">{{ 'TABLE.DIALOG.EMPTY_FILTER_LIST' | oTranslate }}</span>\n        </mat-list-item>\n      </mat-selection-list>\n    </mat-dialog-content>\n\n    <mat-dialog-actions align=\"end\">\n      <button type=\"button\" mat-stroked-button [disabled]=\"filterList.selectedOptions.selected.length!==1\"\n        (click)=\"removeFilter(filterList.selectedOptions.selected[0].value)\">{{ 'DELETE' | oTranslate | uppercase }}</button>\n      <span fxFlex></span>\n      <button type=\"button\" mat-stroked-button class=\"mat-primary\" [mat-dialog-close]=\"false\">{{ 'CANCEL' | oTranslate | uppercase }}</button>\n      <button type=\"button\" mat-stroked-button class=\"mat-primary\" [mat-dialog-close]=\"true\"\n        [disabled]=\"filterList.selectedOptions.selected.length!==1\">{{ 'TABLE.BUTTONS.APPLY' | oTranslate | uppercase }}</button>\n    </mat-dialog-actions>\n  `,\n  styles: [`\n\n  `],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class OTableLoadFilterDialogComponent implements OnInit {\n\n  @ViewChild(MatSelectionList) filterList: MatSelectionList;\n\n  filters: Array<ITableFiltersStatus> = [];\n\n  onDelete: EventEmitter<string> = new EventEmitter();\n\n  protected dialogService: DialogService;\n  protected cd: ChangeDetectorRef;\n\n  constructor(\n    public dialogRef: MatDialogRef<OTableLoadFilterDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) data: Array<ITableFiltersStatus>,\n    protected injector: Injector\n  ) {\n    this.loadFilters(data);\n    this.dialogService = this.injector.get(DialogService);\n    try {\n      this.cd = this.injector.get(ChangeDetectorRef);\n    } catch (e) {\n      // no parent form\n    }\n  }\n\n  ngOnInit(): void {\n    this.filterList.selectedOptions = new SelectionModel<MatListOption>(false);\n  }\n\n  loadFilters(filters: Array<ITableFiltersStatus>): void {\n    this.filters = filters;\n  }\n\n  getSelectedFilterName(): string {\n    let selected: MatListOption[] = this.filterList.selectedOptions.selected;\n    return selected.length ? selected[0].value : void 0;\n  }\n\n  removeFilter(filterName: string): void {\n    this.dialogService.confirm('CONFIRM', 'TABLE.DIALOG.CONFIRM_REMOVE_FILTER').then(result => {\n      if (result) {\n        this.onDelete.emit(filterName);\n        this.cd.detectChanges();\n      }\n    });\n  }\n\n}\n"]}