{"version":3,"file":"o-table-visible-columns-dialog.component.js","sourceRoot":"","sources":["../../../../../../../tmp/ontimize/components/table/extensions/dialog/visible-columns/o-table-visible-columns-dialog.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, Inject, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, Injector } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\nimport { Util, Codes } from '../../../../../utils';\nimport { OColumn } from '../../../o-table.component';\nimport { DragDropService } from '@churchs19/ng2-dnd';\n\n@Component({\n  moduleId: module.id,\n  selector: 'o-table-visible-columns-dialog',\n  template: `\n    <span mat-dialog-title>{{ 'TABLE.BUTTONS.COLVIS' | oTranslate }}</span>\n\n    <mat-dialog-content>\n      <mat-list dnd-sortable-container [sortableData]=\"columns\" [ngClass]=\"rowHeight\">\n        <ng-container *ngFor=\"let column of columns; let x = index\">\n          <mat-list-item *ngIf=\"column.showInList\" (click)=\"onClickColumn(column)\" dnd-sortable [sortableIndex]=\"x\"\n            [dragData]=\"column\" [dragEnabled]=\"true\" (onDragSuccess)=\"onDragSuccess($event)\">\n            <mat-icon mat-list-icon svgIcon=\"ontimize:drag_handle\"></mat-icon>\n            <span mat-line>{{ (column.title || column.attr) | oTranslate }}</span>\n            <mat-icon *ngIf=\"column.visible\" svgIcon=\"ontimize:visibility\"></mat-icon>\n            <mat-icon *ngIf=\"!column.visible\" svgIcon=\"ontimize:visibility_off\"></mat-icon>\n          </mat-list-item>\n        </ng-container>\n      </mat-list>\n    </mat-dialog-content>\n\n    <mat-dialog-actions fxLayoutAlign=\"end center\">\n      <button type=\"button\" mat-stroked-button [mat-dialog-close]=\"false\">{{ 'CANCEL' | oTranslate | uppercase }}</button>\n      <button type=\"button\" mat-stroked-button [mat-dialog-close]=\"true\">{{ 'ACCEPT' | oTranslate | uppercase }}</button>\n    </mat-dialog-actions>\n  `,\n  styles: [`\n    .o-table-visible-columns-dialog .mat-dialog-content.mat-dialog-content{overflow:auto;padding-top:0;margin-top:24px}.o-table-visible-columns-dialog .mat-dialog-content.mat-dialog-content .mat-list{padding-top:24px}.o-table-visible-columns-dialog .mat-dialog-content.mat-dialog-content .mat-list .mat-list-item{cursor:pointer}.o-table-visible-columns-dialog .mat-dialog-content.mat-dialog-content .mat-list .mat-list-item .mat-list-item-content{padding:0}.o-table-visible-columns-dialog .mat-dialog-content.mat-dialog-content .mat-list .mat-list-item .mat-list-item-content div.mat-list-text{padding:0 8px}.o-table-visible-columns-dialog .mat-dialog-content.mat-dialog-content .mat-icon[svgicon=\"ontimize:drag_handle\"]{cursor:move}.o-table-visible-columns-dialog .mat-dialog-content.mat-dialog-content .mat-icon[svgicon=\"ontimize:visibility\"],.o-table-visible-columns-dialog .mat-dialog-content.mat-dialog-content .mat-icon[svgicon=\"ontimize:visibility_off\"]{width:32px}\n  `],\n  encapsulation: ViewEncapsulation.None,\n  providers: [DragDropService],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.o-table-visible-columns-dialog]': 'true'\n  }\n})\nexport class OTableVisibleColumnsDialogComponent {\n\n  columns: Array<any> = [];\n  protected cd: ChangeDetectorRef;\n  rowHeight: string = Codes.DEFAULT_ROW_HEIGHT;\n\n  constructor(\n    protected injector: Injector,\n    public dialogRef: MatDialogRef<OTableVisibleColumnsDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) data: any\n  ) {\n    try {\n      this.cd = this.injector.get(ChangeDetectorRef);\n    } catch (e) {\n      // no parent form\n    }\n    if (Util.isArray(data.columnsData) && Util.isArray(data.originalVisibleColumns)) {\n      let originalCols = data.originalVisibleColumns;\n      data.columnsData.forEach((oCol: OColumn) => {\n        this.columns.push({\n          attr: oCol.attr,\n          title: oCol.title,\n          visible: oCol.visible,\n          showInList: (oCol.definition !== undefined || oCol.visible || originalCols.indexOf(oCol.attr) !== -1)\n        });\n      });\n    }\n    if (Util.isDefined(data.rowHeight)) {\n      this.rowHeight = data.rowHeight;\n    }\n  }\n\n  getVisibleColumns(): Array<string> {\n    return this.columns.filter(col => col.visible).map(col => col.attr);\n  }\n\n  getColumnsOrder(): Array<string> {\n    return this.columns.map(col => col.attr);\n  }\n\n  onClickColumn(col: OColumn): void {\n    col.visible = !col.visible;\n  }\n\n  onDragSuccess(arg: any) {\n    this.cd.detectChanges();\n  }\n}\n"]}