var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { FormControl } from '@angular/forms';
var OFormControl = (function (_super) {
    __extends(OFormControl, _super);
    function OFormControl(formState, validatorOrOpts, asyncValidator) {
        if (formState === void 0) { formState = null; }
        return _super.call(this, formState, validatorOrOpts, asyncValidator) || this;
    }
    OFormControl.prototype.markAsTouched = function (opts) {
        if (opts === void 0) { opts = {}; }
        _super.prototype.markAsTouched.call(this, opts);
        if (!this.fControlChildren) {
            return;
        }
        this.fControlChildren.forEach(function (x) {
            if (x instanceof FormControl) {
                x.markAsTouched(opts);
            }
            else {
                if (x.getFormControl()) {
                    x.getFormControl().markAsTouched();
                }
            }
        });
    };
    OFormControl.prototype.markAsDirty = function (opts) {
        if (opts === void 0) { opts = {}; }
        _super.prototype.markAsDirty.call(this, opts);
        if (!this.fControlChildren) {
            return;
        }
        this.fControlChildren.forEach(function (x) {
            if (x instanceof FormControl) {
                x.markAsDirty(opts);
            }
            else {
                if (x.getFormControl()) {
                    x.getFormControl().markAsDirty();
                }
            }
        });
    };
    OFormControl.prototype.markAsPristine = function (opts) {
        if (opts === void 0) { opts = {}; }
        _super.prototype.markAsPristine.call(this, opts);
        if (!this.fControlChildren) {
            return;
        }
        this.fControlChildren.forEach(function (x) {
            if (x instanceof FormControl) {
                x.markAsPristine(opts);
            }
            else {
                if (x.getFormControl()) {
                    x.getFormControl().markAsPristine();
                }
            }
        });
    };
    OFormControl.prototype.getValue = function () {
        return this.value;
    };
    return OFormControl;
}(FormControl));
export { OFormControl };
//# sourceMappingURL=o-form-control.class.js.map