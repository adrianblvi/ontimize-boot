{"version":3,"file":"o-filter-builder.component.js","sourceRoot":"","sources":["../../../../tmp/ontimize/components/filter-builder/o-filter-builder.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { AfterViewInit, Component, EventEmitter, forwardRef, Inject, Injector, NgModule, OnDestroy, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\nimport { Codes, Util } from '../../utils';\nimport { OSharedModule } from '../../shared';\nimport { InputConverter } from '../../decorators';\nimport { OFilterBuilderClearDirective } from './o-filter-builder-clear.directive';\nimport { OFilterBuilderQueryDirective } from './o-filter-builder-query.directive';\nimport { OFormComponent, OServiceComponent } from '../../components';\nimport { FilterExpressionUtils, IExpression, IBasicExpression } from '../filter-expression.utils';\nimport { IFormDataComponent } from '../o-form-data-component.class';\n\nexport const DEFAULT_INPUTS_O_FILTER_BUILDER = [\n  // filters: [string] List of pairs of form component attributes and target component colums (targetColumn1:componentAttr1;targetColumn2:componentAttr2;...). Separated by ';'.\n  'filters',\n\n  // target [`OServiceComponent` instance]: Component whose data will be filtered.\n  'targetCmp: target',\n\n  // expression-builder [funtion]: Funtion called for creating the expression.\n  'expressionBuilder: expression-builder',\n\n  // query-on-change [yes|no|true|false]: Indicates whether or not to trigger the target component refresh when a filter component `onChange` event is fired. Default: no.\n  'queryOnChange: query-on-change',\n\n  // query-on-change-delay [number]: Delay time in milliseconds `query-on-change` method is triggered. Default: 0.\n  'queryOnChangeDelay: query-on-change-delay'\n];\n\nexport const DEFAULT_OUTPUTS_O_FILTER_BUILDER = [\n  // Event triggered when the filter action is executed.\n  'onFilter',\n\n  // Event triggered when the clear action is excuted.\n  'onClear'\n];\n\nexport interface IFilterBuilderCmpTarget {\n  formComponentAttr: string;\n  targetAttr: string;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'o-filter-builder',\n  template: `\n\n  `,\n  inputs: DEFAULT_INPUTS_O_FILTER_BUILDER,\n  outputs: DEFAULT_OUTPUTS_O_FILTER_BUILDER\n})\n/**\n * The OFilterBuilderComponent.\n */\nexport class OFilterBuilderComponent implements AfterViewInit, OnDestroy, OnInit {\n\n  public onFilter: EventEmitter<any> = new EventEmitter<any>();\n  public onClear: EventEmitter<any> = new EventEmitter<any>();\n\n  public filters: string;\n  public targetCmp: OServiceComponent;\n  public expressionBuilder: (values: Array<{ attr, value }>) => IExpression;\n  @InputConverter()\n  public queryOnChange: boolean = false;\n  @InputConverter()\n  public queryOnChangeDelay: number = 0;\n\n  protected filterComponents: Array<IFilterBuilderCmpTarget> = [];\n\n  protected subscriptions: Subscription = new Subscription();\n\n  constructor(\n    @Inject(forwardRef(() => OFormComponent)) public form: OFormComponent,\n    injector: Injector\n  ) { }\n\n  ngOnInit(): void {\n    this.initialize();\n  }\n\n  ngAfterViewInit(): void {\n    this.initializeListeners();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscriptions) {\n      this.subscriptions.unsubscribe();\n    }\n  }\n\n  initialize(): void {\n    // Parse filters\n    if (this.filters) {\n      let filterArray: Array<string> = Util.parseArray(this.filters);\n      filterArray.forEach(filter => {\n        let filterElms = filter.split(Codes.COLUMNS_ALIAS_SEPARATOR);\n        this.filterComponents.push({\n          targetAttr: filterElms[0],\n          formComponentAttr: filterElms[1] ? filterElms[1] : filterElms[0]\n        });\n      });\n    }\n\n    if (Util.isDefined(this.targetCmp)) {\n      this.targetCmp.setFilterBuilder(this);\n    }\n  }\n\n  initializeListeners(): void {\n    if (this.queryOnChange) {\n      this.filterComponents.forEach((filterComponent: IFilterBuilderCmpTarget) => {\n        let formComponent: IFormDataComponent = this.form.getComponents()[filterComponent.formComponentAttr];\n        if (formComponent) {\n          this.subscriptions.add(\n            formComponent.getFormControl().valueChanges\n              .pipe(debounceTime(this.queryOnChangeDelay))\n              .subscribe(a => this.triggerReload()));\n        }\n      });\n    }\n  }\n\n  /**\n   * Returns an `IExpression` object with the filter.\n   * @returns the `IExpression` object with the filter.\n   */\n  getExpression(): IExpression {\n    // Prepare form filter values [... { attr, value }]\n    let formComponents = this.form.getComponents();\n    let params: Array<{ attr, value }> = [];\n    this.filterComponents.forEach((filterComponent: IFilterBuilderCmpTarget) => {\n      let formComponent: IFormDataComponent = formComponents[filterComponent.formComponentAttr];\n      let value = formComponent.getValue();\n      params.push({\n        attr: filterComponent.targetAttr,\n        value: value\n      });\n    });\n\n    // Trigger the function provided by the user\n    if (this.expressionBuilder) {\n      return this.expressionBuilder(params);\n    }\n\n    // Generate desfault expression\n    let expressions: Array<IExpression> = [];\n    params.forEach(elem => {\n      if (Util.isDefined(elem.value)) {\n        expressions.push(FilterExpressionUtils.buildExpressionEquals(elem.attr, elem.value));\n      }\n    });\n\n    return expressions.length ? expressions.reduce((fe1, fe2) => FilterExpressionUtils.buildComplexExpression(fe1, fe2, FilterExpressionUtils.OP_OR)) : undefined;\n  }\n\n  /**\n   * Returns an `IBasicExpression` object with the filter.\n   * @returns the `IBasicExpression` object with the filter.\n   */\n  getBasicExpression(): IBasicExpression {\n    return FilterExpressionUtils.buildBasicExpression(this.getExpression());\n  }\n\n  /**\n   * Returns the filter builder target component.\n   * @returns the target component.\n   */\n  getTargetComponent(): OServiceComponent {\n    return this.targetCmp;\n  }\n\n  /**\n   * Trigger the `reloadData` method from the target component.\n   */\n  triggerReload(): void {\n    if (!this.targetCmp) {\n      return;\n    }\n    if (this.targetCmp.pageable) {\n      this.targetCmp.reloadPaginatedDataFromStart();\n    } else {\n      this.targetCmp.reloadData();\n    }\n    this.onFilter.emit();\n  }\n\n  /**\n   * Clear the form components used for the filter.\n   */\n  clearFilter(): void {\n    let formComponents = this.form.getComponents();\n    this.getFilterAttrs().forEach((attr: string) => {\n      formComponents[attr].setValue(void 0);\n    });\n    this.onClear.emit();\n  }\n\n  /**\n   * Returns an array with the attributes of the filterable components\n   */\n  protected getFilterAttrs(): Array<string> {\n    return this.filterComponents.map((elem: IFilterBuilderCmpTarget) => elem.formComponentAttr);\n  }\n\n}\n\n@NgModule({\n  imports: [\n    OSharedModule,\n    CommonModule\n  ],\n  declarations: [\n    OFilterBuilderComponent,\n    OFilterBuilderClearDirective,\n    OFilterBuilderQueryDirective\n  ],\n  exports: [\n    OFilterBuilderComponent,\n    OFilterBuilderClearDirective,\n    OFilterBuilderQueryDirective\n  ]\n})\nexport class OFilterBuilderModule { }\n"]}