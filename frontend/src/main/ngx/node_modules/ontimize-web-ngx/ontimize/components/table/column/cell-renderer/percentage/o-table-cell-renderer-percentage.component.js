var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Component, Injector, TemplateRef, ViewChild, ChangeDetectionStrategy } from '@angular/core';
import { NumberService } from '../../../../../services';
import { OPercentPipe } from '../../../../../pipes';
import { DEFAULT_INPUTS_O_TABLE_CELL_RENDERER_REAL, OTableCellRendererRealComponent } from '../real/o-table-cell-renderer-real.component';
export var DEFAULT_INPUTS_O_TABLE_CELL_RENDERER_PERCENTAGE = DEFAULT_INPUTS_O_TABLE_CELL_RENDERER_REAL.concat([
    'valueBase: value-base'
]);
var OTableCellRendererPercentageComponent = (function (_super) {
    __extends(OTableCellRendererPercentageComponent, _super);
    function OTableCellRendererPercentageComponent(injector) {
        var _this = _super.call(this, injector) || this;
        _this.injector = injector;
        _this.decimalSeparator = '.';
        _this.minDecimalDigits = 0;
        _this.maxDecimalDigits = 0;
        _this.valueBase = 1;
        _this.tableColumn.type = 'real';
        _this.numberService = _this.injector.get(NumberService);
        _this.setComponentPipe();
        return _this;
    }
    OTableCellRendererPercentageComponent.prototype.setComponentPipe = function () {
        this.componentPipe = new OPercentPipe(this.injector);
    };
    OTableCellRendererPercentageComponent.prototype.ngOnInit = function () {
        this.pipeArguments = {
            minDecimalDigits: this.minDecimalDigits,
            maxDecimalDigits: this.maxDecimalDigits,
            decimalSeparator: this.decimalSeparator,
            grouping: this.grouping,
            thousandSeparator: this.thousandSeparator,
            valueBase: this.valueBase
        };
    };
    OTableCellRendererPercentageComponent.DEFAULT_INPUTS_O_TABLE_CELL_RENDERER_PERCENTAGE = DEFAULT_INPUTS_O_TABLE_CELL_RENDERER_PERCENTAGE;
    OTableCellRendererPercentageComponent.decorators = [
        { type: Component, args: [{
                    moduleId: module.id,
                    selector: 'o-table-cell-renderer-percentage',
                    template: "\n    <ng-template #templateref let-cellvalue=\"cellvalue\">\n            {{ getCellData(cellvalue)}}\n    </ng-template>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    inputs: DEFAULT_INPUTS_O_TABLE_CELL_RENDERER_PERCENTAGE
                },] },
    ];
    OTableCellRendererPercentageComponent.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    OTableCellRendererPercentageComponent.propDecorators = {
        templateref: [{ type: ViewChild, args: ['templateref', { read: TemplateRef },] }]
    };
    return OTableCellRendererPercentageComponent;
}(OTableCellRendererRealComponent));
export { OTableCellRendererPercentageComponent };
//# sourceMappingURL=o-table-cell-renderer-percentage.component.js.map