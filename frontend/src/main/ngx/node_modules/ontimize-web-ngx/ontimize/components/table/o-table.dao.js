import { BehaviorSubject, merge, of } from 'rxjs';
var OTableDao = (function () {
    function OTableDao(dataService, entity, methods) {
        this.dataService = dataService;
        this.entity = entity;
        this.methods = methods;
        this.usingStaticData = false;
        this._isLoadingResults = false;
        this.dataChange = new BehaviorSubject([]);
        this.sqlTypesChange = new BehaviorSubject({});
    }
    Object.defineProperty(OTableDao.prototype, "data", {
        get: function () { return this.dataChange.value; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableDao.prototype, "sqlTypes", {
        get: function () { return this.sqlTypesChange.value; },
        enumerable: true,
        configurable: true
    });
    OTableDao.prototype.getQuery = function (queryArgs) {
        this.isLoadingResults = true;
        return this.dataService[this.methods.query].apply(this.dataService, queryArgs);
    };
    OTableDao.prototype.removeQuery = function (filters) {
        var _this = this;
        return merge.apply(void 0, filters.map((function (kv) { return _this.dataService[_this.methods.delete](kv, _this.entity); })));
    };
    OTableDao.prototype.insertQuery = function (av, sqlTypes) {
        if (this.usingStaticData) {
            this.data.push(av);
            return of(this.data);
        }
        else {
            return this.dataService[this.methods.insert](av, this.entity, sqlTypes);
        }
    };
    OTableDao.prototype.updateQuery = function (kv, av, sqlTypes) {
        if (this.usingStaticData) {
            return of(this.data);
        }
        else {
            return this.dataService[this.methods.update](kv, av, this.entity, sqlTypes);
        }
    };
    OTableDao.prototype.setDataArray = function (data) {
        this.dataChange.next(data);
        this.isLoadingResults = false;
        return of(data);
    };
    OTableDao.prototype.setAsynchronousColumn = function (value, rowData) {
        var index = null;
        for (var i = 0; i < this.data.length; i++) {
            if (this.data[i] === rowData) {
                index = i;
                break;
            }
        }
        if (index !== null) {
            Object.assign(this.data[index], value);
        }
    };
    Object.defineProperty(OTableDao.prototype, "isLoadingResults", {
        get: function () {
            return this._isLoadingResults;
        },
        set: function (val) {
            var _this = this;
            if (val) {
                this.cleanTimer();
                this.loadingTimer = setTimeout(function () {
                    _this._isLoadingResults = val;
                }, 500);
            }
            else {
                this.cleanTimer();
                this._isLoadingResults = val;
            }
        },
        enumerable: true,
        configurable: true
    });
    OTableDao.prototype.cleanTimer = function () {
        if (this.loadingTimer) {
            clearTimeout(this.loadingTimer);
        }
    };
    return OTableDao;
}());
export { OTableDao };
//# sourceMappingURL=o-table.dao.js.map