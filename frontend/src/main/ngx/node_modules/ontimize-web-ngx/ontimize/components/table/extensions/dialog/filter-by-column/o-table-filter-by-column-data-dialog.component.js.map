{"version":3,"file":"o-table-filter-by-column-data-dialog.component.js","sourceRoot":"","sources":["../../../../../../../tmp/ontimize/components/table/extensions/dialog/filter-by-column/o-table-filter-by-column-data-dialog.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { AfterViewInit, ChangeDetectionStrategy, Component, ElementRef, Inject, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { BehaviorSubject, Observable, fromEvent } from 'rxjs';\nimport { ColumnValueFilterOperator, IColumnValueFilter } from '../../header/o-table-header-components';\nimport { MAT_DIALOG_DATA, MatCheckboxChange, MatDialogRef, MatSelectionList, MatSlideToggleChange } from '@angular/material';\nimport { debounceTime, distinctUntilChanged } from 'rxjs/operators';\n\nimport { FormControl } from '@angular/forms';\nimport { OColumn } from '../../../o-table.component';\nimport { Util } from '../../../../../util/util';\n\nexport interface ITableFilterByColumnDataInterface {\n  value: any;\n  selected: boolean;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'o-table-filter-by-column-data-dialog',\n  template: `\n    <span mat-dialog-title>{{ 'TABLE.BUTTONS.FILTER_BY_COLUMN' | oTranslate }}: {{ column.title | oTranslate }}</span>\n    <div mat-dialog-content fxLayout=\"row\" fxLayoutAlign=\"space-between stretch\" class=\"dialog-list-container\">\n      <div fxLayout=\"column\" class=\"content-wrapper\"  [class.content-wrapper-fixed-dimension]=\"getFixedDimensionClass()\">\n        <mat-slide-toggle #customFilterSlide (change)=\"onSlideChange($event)\" [checked]=\"(isCustomFilter | async)\"\n          *ngIf=\"isDefaultFilter | async\">\n          {{ 'TABLE.FILTER_BY_COLUMN.CUSTOM_FILTER' | oTranslate }}\n        </mat-slide-toggle>\n        <div fxFlex *ngIf=\"!(isCustomFilter | async);else customFilterTemplate\" fxLayout=\"column\">\n          <mat-form-field class=\"hinted\">\n            <mat-icon matPrefix svgIcon=\"ontimize:search\"></mat-icon>\n            <input matInput #filter placeholder=\"{{ 'TABLE.FILTER' | oTranslate }}\">\n            <mat-hint>{{ 'TABLE.FILTER_BY_COLUMN.HINT_STAR' | oTranslate }}</mat-hint>\n          </mat-form-field>\n          <mat-checkbox (change)=\"onSelectAllChange($event)\" [checked]=\"areAllSelected()\"\n            [indeterminate]=\"isIndeterminate()\" [disabled]=\"!listData\" class=\"select-all-checkbox\">\n            {{ 'TABLE.FILTER_BY_COLUMN.CHECK_ALL' | oTranslate }}\n          </mat-checkbox>\n          <span *ngIf=\"!listData\" class=\"column-filter-empty-list\">\n            {{ 'TABLE.FILTER_BY_COLUMN.LIST_EMPTY_FILTER' | oTranslate }}\n          </span>\n          <span *ngIf=\"listData?.length === 0\" class=\"column-filter-empty-list\">{{ 'TABLE.FILTER_BY_COLUMN.LIST_EMPTY' |\n            oTranslate }}</span>\n          <mat-selection-list *ngIf=\"preloadValues || listData\" #filterValueList fxFlex fxLayout=\"column\"\n            class=\"select-values-list\">\n            <mat-list-option *ngFor=\"let record of listData; let i = index\" checkboxPosition=\"before\"\n              [selected]=\"record.selected\" [value]=\"record.value\">\n              <ng-container *ngIf=\"!column.renderer\">\n                {{ record.value || ('TABLE.FILTER_BY_COLUMN.EMPTY_VALUE' | oTranslate) }}\n              </ng-container>\n              <ng-template *ngIf=\"column.renderer\" [ngTemplateOutlet]=\"column.renderer.templateref\"\n                [ngTemplateOutletContext]=\"{ cellvalue: record.value, rowvalue: getRowValue(i) }\"></ng-template>\n            </mat-list-option>\n          </mat-selection-list>\n        </div>\n\n      </div>\n    </div>\n\n    <mat-dialog-actions align=\"end\">\n      <button type=\"button\" mat-stroked-button class=\"mat-primary\" [mat-dialog-close]=\"false\">\n        {{ 'CANCEL' | oTranslate | uppercase }} </button>\n      <button type=\"button\" mat-stroked-button class=\"mat-primary\" [mat-dialog-close]=\"true\">\n        {{ 'ACCEPT' | oTranslate | uppercase }} </button>\n    </mat-dialog-actions>\n\n    <!-- TEMPLATE CUSTOM FILTER-->\n    <ng-template #customFilterTemplate>\n      <div *ngIf=\"isTextType()\">\n        <mat-form-field fxFlex class=\"hinted\">\n          <input matInput #filterText [formControl]=\"fcText\" placeholder=\"{{ 'TABLE.FILTER' | oTranslate }}\">\n          <mat-hint>{{ 'TABLE.FILTER_BY_COLUMN.HINT_STAR' | oTranslate }}</mat-hint>\n        </mat-form-field>\n      </div>\n      <div *ngIf=\"isNumericType()\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n        <mat-form-field fxFlex=\"45\">\n          <input matInput [formControl]=\"fcFrom\" placeholder=\"{{ 'TABLE.FILTER_BY_COLUMN.FROM' | oTranslate }}\">\n        </mat-form-field>\n        <mat-form-field fxFlex=\"45\">\n          <input matInput [formControl]=\"fcTo\" placeholder=\"{{ 'TABLE.FILTER_BY_COLUMN.TO' | oTranslate }}\">\n        </mat-form-field>\n      </div>\n      <div *ngIf=\"isDateType()\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n        <mat-form-field fxFlex=\"45\">\n          <input matInput [matDatepicker]=\"datepickerFrom\" [max]=\"fcTo.value\" [formControl]=\"fcFrom\"\n            placeholder=\"{{ 'TABLE.FILTER_BY_COLUMN.FROM' | oTranslate }}\">\n          <mat-datepicker-toggle matSuffix [for]=\"datepickerFrom\">\n            <mat-icon matDatepickerToggleIcon>today</mat-icon>\n          </mat-datepicker-toggle>\n          <mat-datepicker #datepickerFrom></mat-datepicker>\n        </mat-form-field>\n        <mat-form-field fxFlex=\"45\">\n          <input matInput [matDatepicker]=\"datepickerTo\" [min]=\"fcFrom.value\" [formControl]=\"fcTo\"\n            placeholder=\"{{ 'TABLE.FILTER_BY_COLUMN.TO' | oTranslate }}\">\n          <mat-datepicker-toggle matSuffix [for]=\"datepickerTo\">\n            <mat-icon matDatepickerToggleIcon>today</mat-icon>\n          </mat-datepicker-toggle>\n          <mat-datepicker #datepickerTo></mat-datepicker>\n        </mat-form-field>\n      </div>\n\n    </ng-template>\n  `,\n  styles: [`\n    .o-filter-by-column-dialog .mat-slide-toggle{padding-bottom:24px}.o-filter-by-column-dialog .content-wrapper{padding:24px 0 12px;margin:0}.o-filter-by-column-dialog .content-wrapper.content-wrapper-fixed-dimension{max-height:430px;min-height:430px;min-width:250px}.o-filter-by-column-dialog .content-wrapper .mat-form-field.hinted{margin-bottom:24px}.o-filter-by-column-dialog .content-wrapper .select-all-checkbox{padding-bottom:6px}.o-filter-by-column-dialog .content-wrapper .select-values-list{padding-top:0;overflow-y:auto;overflow-x:hidden;outline:none}.o-filter-by-column-dialog .content-wrapper .select-values-list .mat-list-item{height:30px}.o-filter-by-column-dialog .content-wrapper .select-values-list .mat-list-item .mat-list-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.o-filter-by-column-dialog .content-wrapper .select-values-list .mat-list-item .mat-list-text .mat-icon{font-size:24px}.o-filter-by-column-dialog .content-wrapper .column-filter-empty-list{text-align:center}\n  `],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.o-filter-by-column-dialog]': 'true'\n  }\n})\nexport class OTableFilterByColumnDataDialogComponent implements AfterViewInit {\n\n  column: OColumn;\n  preloadValues: boolean = true;\n  mode: string;\n  private isCustomFilterSubject = new BehaviorSubject<boolean>(false);\n  isCustomFilter: Observable<boolean> = this.isCustomFilterSubject.asObservable();\n\n  private isDefaultFilterSubject = new BehaviorSubject<boolean>(false);\n  isDefaultFilter: Observable<boolean> = this.isDefaultFilterSubject.asObservable();\n\n  fcText = new FormControl();\n  fcFrom = new FormControl();\n  fcTo = new FormControl();\n\n  protected columnData: Array<ITableFilterByColumnDataInterface> = [];\n  protected tableData: Array<any> = [];\n  protected _listData: Array<ITableFilterByColumnDataInterface>;\n\n  @ViewChild('filter') filter: ElementRef;\n  @ViewChild('filterValueList') filterValueList: MatSelectionList;\n\n  constructor(\n    public dialogRef: MatDialogRef<OTableFilterByColumnDataDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) data: any\n  ) {\n    if (data.column) {\n      this.column = data.column;\n    }\n    let previousFilter: IColumnValueFilter = {\n      attr: undefined,\n      operator: undefined,\n      values: undefined\n    };\n    if (data.mode) {\n      this.isDefaultFilterSubject.next(data.mode === 'default');\n      this.isCustomFilterSubject.next(data.mode === 'custom');\n      this.mode = data.mode;\n    }\n\n    if (data.previousFilter) {\n      previousFilter = data.previousFilter;\n      this.isCustomFilterSubject.next([ColumnValueFilterOperator.LESS_EQUAL, ColumnValueFilterOperator.MORE_EQUAL, ColumnValueFilterOperator.BETWEEN, ColumnValueFilterOperator.EQUAL].indexOf(previousFilter.operator) !== -1);\n    }\n    if (data.hasOwnProperty('preloadValues')) {\n      this.preloadValues = data.preloadValues;\n    }\n    if (data.tableData && Array.isArray(data.tableData)) {\n      this.getDistinctValues(data.tableData, previousFilter);\n      this.initializeCustomFilterValues(previousFilter);\n      this.initializeDataList(previousFilter);\n    }\n\n    if (data.mode) {\n      this.mode = data.mode;\n    }\n  }\n\n  ngAfterViewInit() {\n    this.initializeFilterEvent();\n  }\n\n  get listData(): Array<ITableFilterByColumnDataInterface> {\n    return this._listData;\n  }\n\n  set listData(arg: Array<ITableFilterByColumnDataInterface>) {\n    this._listData = arg;\n  }\n\n  initializeDataList(filter?: IColumnValueFilter): void {\n    if (this.preloadValues || (filter && filter.operator === ColumnValueFilterOperator.IN)) {\n      this.listData = this.columnData.slice();\n    }\n  }\n\n  initializeFilterEvent() {\n    if (this.filter) {\n      const self = this;\n      fromEvent(this.filter.nativeElement, 'keyup')\n        .pipe(debounceTime(150))\n        .pipe(distinctUntilChanged())\n        .subscribe(() => {\n          let filterValue: string = self.filter.nativeElement.value;\n          filterValue = Util.normalizeString(filterValue);\n          if (filterValue.indexOf('*') !== -1) {\n            self.listData = self.columnData.filter(item => new RegExp('^' + Util.normalizeString(filterValue).split('*').join('.*') + '$').test(Util.normalizeString(item.value)));\n          } else {\n            self.listData = self.columnData.filter(item => (Util.normalizeString(item.value).indexOf(filterValue) !== -1));\n          }\n        });\n    }\n  }\n\n  initializeCustomFilterValues(filter: IColumnValueFilter): void {\n    if (filter.operator !== ColumnValueFilterOperator.IN) {\n      if (ColumnValueFilterOperator.EQUAL === filter.operator) {\n        if (this.isTextType()) {\n          this.fcText.setValue(filter.values);\n        }\n      }\n      if (filter.operator === ColumnValueFilterOperator.BETWEEN) {\n        if (this.isDateType()) {\n          this.fcFrom.setValue(new Date(filter.values[0]));\n          this.fcTo.setValue(new Date(filter.values[1]));\n        } else {\n          this.fcFrom.setValue(filter.values[0]);\n          this.fcTo.setValue(filter.values[1]);\n        }\n      } else {\n        if (filter.operator === ColumnValueFilterOperator.MORE_EQUAL) {\n          if (this.isDateType()) {\n            this.fcFrom.setValue(new Date(filter.values));\n          } else {\n            this.fcFrom.setValue(filter.values);\n          }\n        }\n        if (filter.operator === ColumnValueFilterOperator.LESS_EQUAL) {\n          if (this.isDateType()) {\n            this.fcTo.setValue(new Date(filter.values));\n          } else {\n            this.fcTo.setValue(filter.values);\n          }\n        }\n      }\n    }\n  }\n\n  get selectedValues(): Array<ITableFilterByColumnDataInterface> {\n    return this.filterValueList ? this.filterValueList.selectedOptions.selected : [];\n  }\n\n  areAllSelected(): boolean {\n    return this.selectedValues.length === this.columnData.length;\n  }\n\n  isIndeterminate(): boolean {\n    return this.selectedValues.length > 0 && this.selectedValues.length !== this.columnData.length;\n  }\n\n  onSelectAllChange(event: MatCheckboxChange) {\n    if (event.checked) {\n      this.filterValueList.selectAll();\n    } else {\n      this.filterValueList.deselectAll();\n    }\n  }\n\n  getDistinctValues(data: Array<any>, filter: IColumnValueFilter): void {\n    let colValues: any[] = data.map(elem => elem[this.column.attr]);\n    colValues.forEach((value, i) => {\n      if (this.columnData.find(item => item.value === value) === undefined) {\n        this.columnData.push({\n          value: value,\n          selected: filter.operator === ColumnValueFilterOperator.IN && (filter.values || []).indexOf(value) !== -1\n        });\n        this.tableData.push(data[i]);\n      }\n    });\n  }\n\n  getColumnValuesFilter(): IColumnValueFilter {\n    let filter = {\n      attr: this.column.attr,\n      operator: undefined,\n      values: undefined\n    };\n\n    if (!this.isCustomFilterSubject.getValue()) {\n      if (this.selectedValues.length) {\n        filter.operator = ColumnValueFilterOperator.IN;\n        filter.values = this.selectedValues.map((item) => item.value);\n      }\n    } else {\n      if (this.fcText.value) {\n        filter.operator = ColumnValueFilterOperator.EQUAL;\n        filter.values = this.getTypedValue(this.fcText);\n      }\n      if (this.fcFrom.value && this.fcTo.value) {\n        filter.operator = ColumnValueFilterOperator.BETWEEN;\n        let fromValue = this.getTypedValue(this.fcFrom);\n        let toValue = this.getTypedValue(this.fcTo);\n        filter.values = fromValue <= toValue ? [fromValue, toValue] : [toValue, fromValue];\n      } else {\n        if (this.fcFrom.value) {\n          filter.operator = ColumnValueFilterOperator.MORE_EQUAL;\n          filter.values = this.getTypedValue(this.fcFrom);\n        }\n        if (this.fcTo.value) {\n          filter.operator = ColumnValueFilterOperator.LESS_EQUAL;\n          filter.values = this.getTypedValue(this.fcTo);\n        }\n      }\n    }\n    return filter;\n  }\n\n  onSlideChange(e: MatSlideToggleChange): void {\n    this.isCustomFilterSubject.next(e.checked);\n\n    if (!e.checked) {\n      //Selection mode\n      this.initializeDataList();\n      const self = this;\n      setTimeout(() => {\n        self.initializeFilterEvent();\n      }, 0);\n    }\n  }\n\n  isTextType(): boolean {\n    return !this.isNumericType() && !this.isDateType();\n  }\n\n  isNumericType(): boolean {\n    return ['integer', 'real', 'currency'].indexOf(this.column.type) !== -1;\n  }\n\n  isDateType(): boolean {\n    return 'date' === this.column.type;\n  }\n\n  getRowValue(i: number): any {\n    return this.tableData[i];\n  }\n\n  getFixedDimensionClass() {\n    return this.mode === 'selection' || this.mode === 'default';\n  }\n\n  protected getTypedValue(control: FormControl): any {\n    let value = control.value;\n    if (this.isNumericType()) {\n      value = control.value;\n    }\n    if (this.isDateType()) {\n      value = control.value.valueOf();\n    }\n    return value;\n  }\n\n}\n"]}