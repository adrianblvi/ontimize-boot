{"version":3,"file":"o-table.dao.js","sourceRoot":"","sources":["../../../../tmp/ontimize/components/table/o-table.dao.ts"],"names":[],"mappings":"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","sourcesContent":["import { BehaviorSubject, Observable, merge, of } from 'rxjs';\nimport { OQueryDataArgs } from '../service.utils';\n\nexport class OTableDao {\n\n  usingStaticData: boolean = false;\n\n  protected loadingTimer;\n  protected _isLoadingResults: boolean = false;\n\n  /** Stream that emits whenever the data has been modified. */\n  dataChange = new BehaviorSubject<any[]>([]);\n  sqlTypesChange = new BehaviorSubject<Object>({});\n  get data(): any[] { return this.dataChange.value; }\n  get sqlTypes(): Object { return this.sqlTypesChange.value; }\n\n  constructor(\n    private dataService: any,\n    private entity: string,\n    private methods: any\n  ) { }\n\n  /**\n   * Call the service query and emit data has ben modified\n   */\n  getQuery(queryArgs: OQueryDataArgs): Observable<any> {\n    this.isLoadingResults = true;\n    return this.dataService[this.methods.query].apply(this.dataService, queryArgs);\n  }\n\n  removeQuery(filters: any): Observable<any> {\n    return merge(...filters.map((kv => this.dataService[this.methods.delete](kv, this.entity))));\n  }\n\n  insertQuery(av: Object, sqlTypes?: Object): Observable<any> {\n    if (this.usingStaticData) {\n      this.data.push(av);\n      return of(this.data);\n    } else {\n      return this.dataService[this.methods.insert](av, this.entity, sqlTypes);\n    }\n  }\n\n  updateQuery(kv: Object, av: Object, sqlTypes?: Object): Observable<any> {\n    if (this.usingStaticData) {\n      return of(this.data);\n    } else {\n      return this.dataService[this.methods.update](kv, av, this.entity, sqlTypes);\n    }\n  }\n\n  /**\n   * Set data array and emit data has ben modified\n   * @param data\n   */\n  setDataArray(data: Array<any>) {\n    this.dataChange.next(data);\n    this.isLoadingResults = false;\n    return of(data);\n  }\n\n  setAsynchronousColumn(value: Array<any>, rowData: any) {\n    // Object.assign(this.data[rowIndex], value);\n    let index = null;\n    for (let i = 0; i < this.data.length; i++) {\n      if (this.data[i] === rowData) {\n        index = i;\n        break;\n      }\n    }\n    if (index !== null) {\n      Object.assign(this.data[index], value);\n    }\n  }\n\n  get isLoadingResults(): boolean {\n    return this._isLoadingResults;\n  }\n\n  set isLoadingResults(val: boolean) {\n    if (val) {\n      this.cleanTimer();\n      this.loadingTimer = setTimeout(() => {\n        this._isLoadingResults = val;\n      }, 500);\n    } else {\n      this.cleanTimer();\n      this._isLoadingResults = val;\n    }\n  }\n\n  protected cleanTimer() {\n    if (this.loadingTimer) {\n      clearTimeout(this.loadingTimer);\n    }\n  }\n\n}\n"]}