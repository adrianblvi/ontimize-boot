{"version":3,"file":"o-table-cell-renderer-integer.component.js","sourceRoot":"","sources":["../../../../../../../tmp/ontimize/components/table/column/cell-renderer/integer/o-table-cell-renderer-integer.component.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAoB,SAAS,EAAE,QAAQ,EAAU,WAAW,EAAE,SAAS,EAAE,uBAAuB,EAAE,MAAM,eAAe,CAAC;AAE/H,OAAO,EAAE,cAAc,EAAE,MAAM,2BAA2B,CAAC;AAC3D,OAAO,EAAwB,YAAY,EAAE,MAAM,sBAAsB,CAAC;AAC1E,OAAO,EAAE,sBAAsB,EAAE,MAAM,qCAAqC,CAAC;AAE7E,MAAM,CAAC,IAAM,4CAA4C,GAAG;IAE1D,UAAU;IAEV,uCAAuC;CACxC,CAAC;AAEF;IAWwD,sDAAsB;IAY5E,4CAAsB,QAAkB;QAAxC,YACE,kBAAM,QAAQ,CAAC,SAGhB;QAJqB,cAAQ,GAAR,QAAQ,CAAU;QAP9B,cAAQ,GAAY,IAAI,CAAC;QACzB,uBAAiB,GAAW,GAAG,CAAC;QAQxC,KAAI,CAAC,WAAW,CAAC,IAAI,GAAG,SAAS,CAAC;QAClC,KAAI,CAAC,gBAAgB,EAAE,CAAC;;IAC1B,CAAC;IAED,6DAAgB,GAAhB;QACE,IAAI,CAAC,aAAa,GAAG,IAAI,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACvD,CAAC;IAED,qDAAQ,GAAR;QACE,IAAI,CAAC,aAAa,GAAG;YACnB,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,iBAAiB,EAAE,IAAI,CAAC,iBAAiB;SAC1C,CAAC;IACJ,CAAC;IAED,+DAAkB,GAAlB;QACE,iBAAM,kBAAkB,WAAE,CAAC;IAC7B,CAAC;IA7Ba,+EAA4C,GAAG,4CAA4C,CAAC;;gBAb3G,SAAS,SAAC;oBACT,QAAQ,EAAE,MAAM,CAAC,EAAE;oBACnB,QAAQ,EAAE,+BAA+B;oBACzC,QAAQ,EAAE,2HAIT;oBACD,eAAe,EAAE,uBAAuB,CAAC,MAAM;oBAC/C,MAAM,EAAE,4CAA4C;iBACrD;;;gBAvBqC,QAAQ;;;8BAkC3C,SAAS,SAAC,aAAa,EAAE,EAAE,IAAI,EAAE,WAAW,EAAE;;IAL/C;QADC,cAAc,EAAE;;wEACkB;IA4BrC,yCAAC;CAAA,AA5CD,CAWwD,sBAAsB,GAiC7E;SAjCY,kCAAkC","sourcesContent":["import { AfterContentInit, Component, Injector, OnInit, TemplateRef, ViewChild, ChangeDetectionStrategy } from '@angular/core';\n\nimport { InputConverter } from '../../../../../decorators';\nimport { IIntegerPipeArgument, OIntegerPipe } from '../../../../../pipes';\nimport { OBaseTableCellRenderer } from '../o-base-table-cell-renderer.class';\n\nexport const DEFAULT_INPUTS_O_TABLE_CELL_RENDERER_INTEGER = [\n  // grouping [no|yes]: grouping thousands. Default: yes.\n  'grouping',\n  // thousand-separator [string]: thousands separator when grouping. Default: comma (,).\n  'thousandSeparator: thousand-separator'\n];\n\n@Component({\n  moduleId: module.id,\n  selector: 'o-table-cell-renderer-integer',\n  template: `\n    <ng-template #templateref let-cellvalue=\"cellvalue\">\n        {{ getCellData(cellvalue)}}\n    </ng-template>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: DEFAULT_INPUTS_O_TABLE_CELL_RENDERER_INTEGER\n})\nexport class OTableCellRendererIntegerComponent extends OBaseTableCellRenderer implements AfterContentInit, OnInit {\n\n  public static DEFAULT_INPUTS_O_TABLE_CELL_RENDERER_INTEGER = DEFAULT_INPUTS_O_TABLE_CELL_RENDERER_INTEGER;\n\n  @InputConverter()\n  protected grouping: boolean = true;\n  protected thousandSeparator: string = ',';\n  protected componentPipe: OIntegerPipe;\n  protected pipeArguments: IIntegerPipeArgument;\n\n  @ViewChild('templateref', { read: TemplateRef }) public templateref: TemplateRef<any>;\n\n  constructor(protected injector: Injector) {\n    super(injector);\n    this.tableColumn.type = 'integer';\n    this.setComponentPipe();\n  }\n\n  setComponentPipe() {\n    this.componentPipe = new OIntegerPipe(this.injector);\n  }\n\n  ngOnInit() {\n    this.pipeArguments = {\n      grouping: this.grouping,\n      thousandSeparator: this.thousandSeparator\n    };\n  }\n\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n}\n"]}