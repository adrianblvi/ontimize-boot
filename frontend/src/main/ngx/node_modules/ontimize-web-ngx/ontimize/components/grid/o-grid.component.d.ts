import { AfterViewChecked, AfterViewInit, ElementRef, EventEmitter, Injector, OnChanges, OnDestroy, OnInit, QueryList, SimpleChange } from '@angular/core';
import { ObservableMedia } from '@angular/flex-layout';
import { MatPaginator, PageEvent } from '@angular/material';
import { Subscription } from 'rxjs';
import { OFormComponent } from '../form/form-components';
import { OServiceComponent } from '../o-service-component.class';
import { ISQLOrder, OQueryDataArgs } from '../service.utils';
import { OGridItemComponent } from './grid-item/o-grid-item.component';
import { OGridItemDirective } from './grid-item/o-grid-item.directive';
export declare const DEFAULT_INPUTS_O_GRID: string[];
export declare const DEFAULT_OUTPUTS_O_GRID: string[];
export declare class OGridComponent extends OServiceComponent implements AfterViewChecked, AfterViewInit, OnChanges, OnDestroy, OnInit {
    static DEFAULT_INPUTS_O_GRID: string[];
    static DEFAULT_OUTPUTS_O_GRID: string[];
    queryRows: number;
    fixedHeader: boolean;
    showPageSize: boolean;
    showSort: boolean;
    showFooter: boolean;
    gridItemHeight: string;
    refreshButton: boolean;
    paginationControls: boolean;
    gutterSize: string;
    cols: number;
    pageSizeOptions: number[];
    sortableColumns: ISQLOrder[];
    quickFilterColumns: string;
    onClick: EventEmitter<any>;
    onDoubleClick: EventEmitter<any>;
    onDataLoaded: EventEmitter<any>;
    onPaginatedDataLoaded: EventEmitter<any>;
    inputGridItems: QueryList<OGridItemComponent>;
    gridItemDirectives: QueryList<OGridItemDirective>;
    matpaginator: MatPaginator;
    protected _sortableColumns: ISQLOrder[];
    protected sortColumnOrder: ISQLOrder;
    protected _cols: any;
    protected _colsDefault: number;
    protected _pageSizeOptions: number[];
    protected sortColumn: string;
    protected dataResponseArray: any[];
    protected storePaginationState: boolean;
    gridItems: OGridItemComponent[];
    protected _gridItems: OGridItemComponent[];
    currentPage: number;
    protected _currentPage: number;
    protected subscription: Subscription;
    protected media: ObservableMedia;
    constructor(injector: Injector, elRef: ElementRef, form: OFormComponent);
    ngOnInit(): void;
    initialize(): void;
    ngAfterContentInit(): void;
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    ngOnChanges(changes: {
        [propName: string]: SimpleChange;
    }): void;
    reloadData(): void;
    reloadPaginatedDataFromStart(): void;
    setDataArray(data: any): void;
    filterData(value?: string, loadMore?: boolean): void;
    registerGridItem(item: OGridItemDirective): void;
    onItemDetailClick(item: OGridItemDirective): void;
    onItemDetailDblClick(item: OGridItemDirective): void;
    ngOnDestroy(): void;
    destroy(): void;
    loadMore(): void;
    readonly totalRecords: number;
    getQueryArguments(filter: Object, ovrrArgs?: OQueryDataArgs): any[];
    parseSortColumn(): void;
    currentOrderColumn: number;
    onChangePage(e: PageEvent): void;
    getDataToStore(): Object;
    getSortOptionText(col: ISQLOrder): string;
    protected setData(data: any, sqlTypes?: any, replace?: boolean): void;
    protected saveDataNavigationInLocalStorage(): void;
    protected setGridItemDirectivesData(): void;
}
export declare class OGridModule {
}
