var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, Injector, TemplateRef, ViewChild, ChangeDetectionStrategy } from '@angular/core';
import { CurrencyService } from '../../../../../services';
import { OCurrencyPipe } from '../../../../../pipes';
import { OBaseTableCellRenderer } from '../o-base-table-cell-renderer.class';
import { OTableCellRendererRealComponent } from '../real/o-table-cell-renderer-real.component';
import { InputConverter } from '../../../../../decorators';
export var DEFAULT_INPUTS_O_TABLE_CELL_RENDERER_CURRENCY = OTableCellRendererRealComponent.DEFAULT_INPUTS_O_TABLE_CELL_RENDERER_REAL.concat([
    'currencySymbol: currency-symbol',
    'currencySymbolPosition: currency-symbol-position'
]);
var OTableCellRendererCurrencyComponent = (function (_super) {
    __extends(OTableCellRendererCurrencyComponent, _super);
    function OTableCellRendererCurrencyComponent(injector) {
        var _this = _super.call(this, injector) || this;
        _this.injector = injector;
        _this.minDecimalDigits = 2;
        _this.maxDecimalDigits = 2;
        _this.decimalSeparator = '.';
        _this.grouping = true;
        _this.thousandSeparator = ',';
        _this.tableColumn.type = 'currency';
        _this.currencyService = _this.injector.get(CurrencyService);
        _this.setComponentPipe();
        return _this;
    }
    OTableCellRendererCurrencyComponent.prototype.setComponentPipe = function () {
        this.componentPipe = new OCurrencyPipe(this.injector);
    };
    OTableCellRendererCurrencyComponent.prototype.ngOnInit = function () {
        if (typeof this.currencySymbol === 'undefined') {
            this.currencySymbol = this.currencyService.symbol;
        }
        if (typeof this.currencySymbolPosition === 'undefined') {
            this.currencySymbolPosition = this.currencyService.symbolPosition;
        }
        this.pipeArguments = {
            currencySimbol: this.currencySymbol,
            currencySymbolPosition: this.currencySymbolPosition,
            minDecimalDigits: this.minDecimalDigits,
            maxDecimalDigits: this.maxDecimalDigits,
            decimalSeparator: this.decimalSeparator,
            grouping: this.grouping,
            thousandSeparator: this.thousandSeparator
        };
    };
    OTableCellRendererCurrencyComponent.DEFAULT_INPUTS_O_TABLE_CELL_RENDERER_CURRENCY = DEFAULT_INPUTS_O_TABLE_CELL_RENDERER_CURRENCY;
    OTableCellRendererCurrencyComponent.decorators = [
        { type: Component, args: [{
                    moduleId: module.id,
                    selector: 'o-table-cell-renderer-currency',
                    template: "\n    <ng-template #templateref let-cellvalue=\"cellvalue\">\n      {{getCellData(cellvalue)}}\n    </ng-template>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    inputs: DEFAULT_INPUTS_O_TABLE_CELL_RENDERER_CURRENCY
                },] },
    ];
    OTableCellRendererCurrencyComponent.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    OTableCellRendererCurrencyComponent.propDecorators = {
        templateref: [{ type: ViewChild, args: ['templateref', { read: TemplateRef },] }]
    };
    __decorate([
        InputConverter(),
        __metadata("design:type", Number)
    ], OTableCellRendererCurrencyComponent.prototype, "minDecimalDigits", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Number)
    ], OTableCellRendererCurrencyComponent.prototype, "maxDecimalDigits", void 0);
    return OTableCellRendererCurrencyComponent;
}(OBaseTableCellRenderer));
export { OTableCellRendererCurrencyComponent };
//# sourceMappingURL=o-table-cell-renderer-currency.component.js.map