import { Component, forwardRef, Inject, Injector, ViewEncapsulation } from '@angular/core';
import { Router } from '@angular/router';
import { NavigationService } from '../../../services/navigation.service';
import { OntimizeService } from '../../../services/ontimize.service';
import { dataServiceFactory } from '../../../services/data-service.provider';
import { Codes, Util } from '../../../utils';
import { OFormComponent } from '../o-form.component';
var Éµ0 = dataServiceFactory;
var OFormNavigationComponent = (function () {
    function OFormNavigationComponent(injector, _form, router) {
        this.injector = injector;
        this._form = _form;
        this.router = router;
        this.navigationData = [];
        this._currentIndex = 0;
        this.formNavigation = this._form.getFormNavigation();
        this.navigationService = this.injector.get(NavigationService);
        this.formLayoutManager = this._form.getFormManager();
        var navData;
        if (this.formLayoutManager && this.formLayoutManager.isDialogMode()) {
            navData = this.navigationService.getLastItem();
        }
        else {
            navData = this.navigationService.getPreviousRouteData();
        }
        if (Util.isDefined(navData)) {
            this.navigationData = navData.keysValues || [];
            this.queryConf = navData.queryConfiguration;
        }
        this.currentIndex = this.getCurrentIndex();
        this.configureService();
    }
    OFormNavigationComponent.prototype.configureService = function () {
        if (!this.queryConf) {
            return;
        }
        var loadingService = OntimizeService;
        if (this.queryConf.serviceType) {
            loadingService = this.queryConf.serviceType;
        }
        try {
            this.dataService = this.injector.get(loadingService);
            if (Util.isDataService(this.dataService)) {
                var serviceCfg = this.dataService.getDefaultServiceConfiguration(this.queryConf.service);
                if (this.queryConf.entity) {
                    serviceCfg['entity'] = this.queryConf.entity;
                }
                this.dataService.configureService(serviceCfg);
            }
        }
        catch (e) {
            console.error(e);
        }
    };
    OFormNavigationComponent.prototype.queryNavigationData = function (offset, length) {
        if (length === void 0) { length = undefined; }
        var self = this;
        return new Promise(function (resolve, reject) {
            var conf = self.queryConf;
            var queryArgs = conf.queryArguments;
            queryArgs[1] = self.getKeysArray();
            queryArgs[4] = offset;
            queryArgs[5] = length ? length : conf.queryRows;
            self.querySubscription = self.dataService[conf.queryMethod].apply(self.dataService, queryArgs).subscribe(function (res) {
                if (res.code === Codes.ONTIMIZE_SUCCESSFUL_CODE) {
                    self.navigationData = res.data;
                    self.queryConf.queryRecordOffset = offset;
                }
                resolve();
            }, function () {
                reject();
            });
        });
    };
    OFormNavigationComponent.prototype.ngOnDestroy = function () {
        if (this.querySubscription) {
            this.querySubscription.unsubscribe();
        }
    };
    OFormNavigationComponent.prototype.getKeysArray = function () {
        var navData = this.navigationData ? (this.navigationData[0] || {}) : {};
        var keysArray = [];
        this._form.keysArray.forEach(function (key) {
            if (navData.hasOwnProperty(key)) {
                keysArray.push(key);
            }
        });
        return keysArray;
    };
    OFormNavigationComponent.prototype.getCurrentIndex = function () {
        var keysArray = this.getKeysArray();
        var currentKeys = {};
        var currentItem = this.formNavigation.getUrlParams();
        keysArray.forEach(function (key) {
            currentKeys[key] = currentItem[key];
        });
        var index = (this.navigationData || []).findIndex(function (item) {
            var itemKeys = {};
            keysArray.forEach(function (key) {
                itemKeys[key] = item[key];
            });
            return Util.isEquivalent(itemKeys, currentKeys);
        });
        return index >= 0 ? index : 0;
    };
    OFormNavigationComponent.prototype.next = function () {
        var _this = this;
        var total = this.navigationData.length;
        var index = this.currentIndex + 1;
        if (total > index) {
            this.move(index);
        }
        else if (this.queryConf) {
            var offset = (this.queryConf.queryRecordOffset || 0) + this.queryConf.queryRows;
            this.queryNavigationData(offset).then(function () {
                _this.move(0);
            });
        }
        else {
            console.error('form-toolbar->next(): total > index');
        }
    };
    OFormNavigationComponent.prototype.previous = function () {
        var _this = this;
        var index = this.currentIndex - 1;
        if (index >= 0) {
            this.move(index);
        }
        else if (this.queryConf) {
            var offset = this.queryConf.queryRecordOffset - this.queryConf.queryRows;
            this.queryNavigationData(offset).then(function () {
                _this.move(_this.navigationData.length - 1);
            });
        }
        else {
            console.error('form-toolbar->next(): index < 0');
        }
    };
    OFormNavigationComponent.prototype.first = function () {
        var _this = this;
        if (!this.queryConf || this.queryConf.queryRecordOffset === 0) {
            this.move(0);
        }
        else {
            this.queryNavigationData(0).then(function () {
                _this.move(0);
            });
        }
    };
    OFormNavigationComponent.prototype.last = function () {
        var _this = this;
        if (!this.queryConf || this.isLast()) {
            var index = this.navigationData.length - 1;
            this.move(index);
        }
        else {
            var offset = this.queryConf.totalRecordsNumber - this.queryConf.queryRows;
            this.queryNavigationData(offset, this.queryConf.queryRows).then(function () {
                _this.move(_this.navigationData.length - 1);
            });
        }
    };
    OFormNavigationComponent.prototype.isFirst = function () {
        var result = this.currentIndex === 0;
        if (result && this.queryConf) {
            result = this.queryConf.queryRecordOffset === 0;
        }
        return result;
    };
    OFormNavigationComponent.prototype.isLast = function () {
        var result = this.currentIndex === (this.navigationData.length - 1);
        if (result && this.queryConf) {
            result = (this.queryConf.queryRecordOffset + this.queryConf.queryRows)
                >= this.queryConf.totalRecordsNumber;
        }
        return result;
    };
    OFormNavigationComponent.prototype.move = function (index) {
        var _this = this;
        this._form.showConfirmDiscardChanges().then(function (res) {
            if (res === true) {
                _this.currentIndex = index;
                if (_this.formLayoutManager && _this.formLayoutManager.isDialogMode()) {
                    _this.moveInDialogManager(_this.formLayoutManager, index);
                }
                else {
                    _this.moveWithoutManager(index);
                }
            }
        });
    };
    OFormNavigationComponent.prototype.moveWithoutManager = function (index) {
        var _this = this;
        var route = this.getRouteOfSelectedRow(this.navigationData[index]);
        if (route.length > 0) {
            this.navigationService.removeLastItem();
            var navData = this.navigationService.getLastItem();
            if (navData) {
                var extras = {};
                extras[Codes.QUERY_PARAMS] = Codes.getIsDetailObject();
                var detailRoute = navData.getDetailFormRoute();
                if (Util.isDefined(detailRoute)) {
                    route.unshift(detailRoute);
                }
                route.unshift(navData.url);
                this._form.canDiscardChanges = true;
                this.router.navigate(route, extras).then(function (navigationDone) {
                    if (navigationDone) {
                        _this.currentIndex = index;
                    }
                });
            }
        }
    };
    OFormNavigationComponent.prototype.moveInDialogManager = function (formLayoutManager, index) {
        formLayoutManager.dialogRef.componentInstance.urlParams = this.navigationData[index];
        this._form.setUrlParamsAndReload(this.navigationData[index]);
    };
    OFormNavigationComponent.prototype.getRouteOfSelectedRow = function (item) {
        var route = [];
        if (Util.isObject(item)) {
            this._form.keysArray.forEach(function (key) {
                if (Util.isDefined(item[key])) {
                    route.push(item[key]);
                }
            });
        }
        return route;
    };
    OFormNavigationComponent.prototype.showNavigation = function () {
        return (this.navigationData || []).length > 1;
    };
    Object.defineProperty(OFormNavigationComponent.prototype, "currentIndex", {
        get: function () {
            return this._currentIndex;
        },
        set: function (arg) {
            this._currentIndex = arg;
        },
        enumerable: true,
        configurable: true
    });
    OFormNavigationComponent.prototype.getRecordIndex = function () {
        var index = this.currentIndex + 1;
        if (this.queryConf) {
            index += this.queryConf.queryRecordOffset;
        }
        return index;
    };
    OFormNavigationComponent.prototype.getTotalRecordsNumber = function () {
        if (this.queryConf && this.queryConf.totalRecordsNumber) {
            return this.queryConf.totalRecordsNumber;
        }
        return this.navigationData.length;
    };
    OFormNavigationComponent.decorators = [
        { type: Component, args: [{
                    moduleId: module.id,
                    selector: 'o-form-navigation',
                    template: "\n    <ng-container *ngIf=\"showNavigation()\">\n      <button mat-icon-button class=\"o-form-toolbar-button\" [disabled]=\"isFirst()\" (click)=\"first()\">\n        <mat-icon aria-label=\"First\" layout-padding svgIcon=\"ontimize:first_page\"></mat-icon>\n      </button>\n      <button mat-icon-button class=\"o-form-toolbar-button\" [disabled]=\"isFirst()\" (click)=\"previous()\">\n        <mat-icon aria-label=\"Previous\" layout-padding svgIcon=\"ontimize:keyboard_arrow_left\"></mat-icon>\n      </button>\n      <span layout-padding>{{ getRecordIndex() }} / {{ getTotalRecordsNumber() }}</span>\n      <button mat-icon-button class=\"o-form-toolbar-button\" [disabled]=\"isLast()\" (click)=\"next()\">\n        <mat-icon aria-label=\"Next\" layout-padding svgIcon=\"ontimize:keyboard_arrow_right\"></mat-icon>\n      </button>\n      <button mat-icon-button class=\"o-form-toolbar-button\" [disabled]=\"isLast()\" (click)=\"last()\">\n        <mat-icon aria-label=\"Last\" layout-padding svgIcon=\"ontimize:last_page\"></mat-icon>\n      </button>\n    </ng-container>\n  ",
                    styles: ["\n    .o-form-navigation .mat-icon{cursor:pointer}.o-form-navigation span{cursor:default}\n  "],
                    encapsulation: ViewEncapsulation.None,
                    host: {
                        '[class.o-form-navigation]': 'true'
                    },
                    providers: [
                        { provide: OntimizeService, useFactory: Éµ0, deps: [Injector] }
                    ]
                },] },
    ];
    OFormNavigationComponent.ctorParameters = function () { return [
        { type: Injector },
        { type: OFormComponent, decorators: [{ type: Inject, args: [forwardRef(function () { return OFormComponent; }),] }] },
        { type: Router }
    ]; };
    return OFormNavigationComponent;
}());
export { OFormNavigationComponent };
export { Éµ0 };
//# sourceMappingURL=o-form-navigation.component.js.map