var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { ChangeDetectionStrategy, Component, Injector, TemplateRef, ViewChild, ViewEncapsulation } from '@angular/core';
import { InputConverter } from '../../../../../decorators';
import { OBaseTableCellEditor } from '../o-base-table-cell-editor.class';
import { Util } from '../../../../../utils';
export var DEFAULT_INPUTS_O_TABLE_CELL_EDITOR_BOOLEAN = OBaseTableCellEditor.DEFAULT_INPUTS_O_TABLE_CELL_EDITOR.concat([
    'indeterminateOnNull: indeterminate-on-null',
    'trueValue: true-value',
    'falseValue: false-value',
    'booleanType: boolean-type',
    'autoCommit: auto-commit'
]);
export var DEFAULT_OUTPUTS_O_TABLE_CELL_EDITOR_BOOLEAN = OBaseTableCellEditor.DEFAULT_OUTPUTS_O_TABLE_CELL_EDITOR.slice();
var OTableCellEditorBooleanComponent = (function (_super) {
    __extends(OTableCellEditorBooleanComponent, _super);
    function OTableCellEditorBooleanComponent(injector) {
        var _this = _super.call(this, injector) || this;
        _this.injector = injector;
        _this.indeterminate = false;
        _this.indeterminateOnNull = false;
        _this.booleanType = 'boolean';
        _this.autoCommit = true;
        return _this;
    }
    OTableCellEditorBooleanComponent.prototype.ngOnInit = function () {
        _super.prototype.ngOnInit.call(this);
        this.parseInputs();
    };
    OTableCellEditorBooleanComponent.prototype.parseInputs = function () {
        switch (this.booleanType) {
            case 'string':
                this.parseStringInputs();
                break;
            case 'number':
                this.parseNumberInputs();
                break;
            default:
                this.trueValue = true;
                this.falseValue = false;
                break;
        }
    };
    OTableCellEditorBooleanComponent.prototype.parseStringInputs = function () {
        if ((this.trueValue || '').length === 0) {
            this.trueValue = undefined;
        }
        if ((this.falseValue || '').length === 0) {
            this.falseValue = undefined;
        }
    };
    OTableCellEditorBooleanComponent.prototype.parseNumberInputs = function () {
        this.trueValue = parseInt(this.trueValue);
        if (isNaN(this.trueValue)) {
            this.trueValue = 1;
        }
        this.falseValue = parseInt(this.falseValue);
        if (isNaN(this.falseValue)) {
            this.falseValue = 0;
        }
    };
    OTableCellEditorBooleanComponent.prototype.startEdition = function (data) {
        _super.prototype.startEdition.call(this, data);
        var self = this;
        setTimeout(function () {
            if (self.autoCommit) {
                var isTrue = (self.formControl.value === self.trueValue);
                self.formControl.setValue(isTrue ? self.falseValue : self.trueValue, { emitEvent: false });
                self.commitEdition();
            }
            else {
                var isTrue = (self.formControl.value === self.trueValue);
                self.formControl.setValue(isTrue ? self.trueValue : self.falseValue, { emitEvent: false });
            }
        }, 0);
    };
    OTableCellEditorBooleanComponent.prototype.getCellData = function () {
        var cellData = _super.prototype.getCellData.call(this);
        this.indeterminate = this.indeterminateOnNull && !Util.isDefined(cellData);
        if (!this.indeterminate) {
            cellData = this.parseValueByType(cellData);
        }
        return cellData;
    };
    OTableCellEditorBooleanComponent.prototype.hasCellDataTrueValue = function (cellData) {
        var result = undefined;
        if (Util.isDefined(cellData)) {
            result = (cellData === this.trueValue);
            if (this.booleanType === 'string' && !Util.isDefined(this.trueValue)) {
                result = Util.parseBoolean(cellData, false);
            }
        }
        return result;
    };
    OTableCellEditorBooleanComponent.prototype.parseValueByType = function (val) {
        var result = val;
        var cellIsTrue = this.hasCellDataTrueValue(val);
        var value = cellIsTrue ? this.trueValue : this.falseValue;
        switch (this.booleanType) {
            case 'string':
                result = this.translateService.get(value);
                break;
            case 'number':
                result = parseInt(value);
                break;
            default:
                break;
        }
        return result;
    };
    OTableCellEditorBooleanComponent.prototype.onChange = function (arg) {
        this.formControl.setValue(arg.checked ? this.trueValue : this.falseValue, { emitEvent: false });
        this.commitEdition();
    };
    OTableCellEditorBooleanComponent.DEFAULT_INPUTS_O_TABLE_CELL_EDITOR_BOOLEAN = DEFAULT_INPUTS_O_TABLE_CELL_EDITOR_BOOLEAN;
    OTableCellEditorBooleanComponent.DEFAULT_OUTPUTS_O_TABLE_CELL_EDITOR_BOOLEAN = DEFAULT_OUTPUTS_O_TABLE_CELL_EDITOR_BOOLEAN;
    OTableCellEditorBooleanComponent.decorators = [
        { type: Component, args: [{
                    moduleId: module.id,
                    selector: 'o-table-cell-editor-boolean',
                    template: "\n    <ng-template #templateref let-cellvalue=\"cellvalue\" let-rowvalue=\"rowvalue\">\n      <div class=\"o-table-cell-editor-boolean\" [formGroup]=\"formGroup\">\n        <mat-checkbox (click)=\"$event.stopPropagation()\" (change)=\"onChange($event)\" [indeterminate]=\"indeterminate\"\n          [formControl]=\"formControl\">\n        </mat-checkbox>\n      </div>\n    </ng-template>\n  ",
                    styles: ["\n    .o-table-cell-editor-boolean .mat-checkbox-ripple{display:none}\n  "],
                    inputs: DEFAULT_INPUTS_O_TABLE_CELL_EDITOR_BOOLEAN,
                    outputs: DEFAULT_OUTPUTS_O_TABLE_CELL_EDITOR_BOOLEAN,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    encapsulation: ViewEncapsulation.None,
                    host: {
                        '[class.o-table-cell-editor-boolean]': 'true'
                    }
                },] },
    ];
    OTableCellEditorBooleanComponent.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    OTableCellEditorBooleanComponent.propDecorators = {
        templateref: [{ type: ViewChild, args: ['templateref', { read: TemplateRef },] }]
    };
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OTableCellEditorBooleanComponent.prototype, "indeterminateOnNull", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OTableCellEditorBooleanComponent.prototype, "autoCommit", void 0);
    return OTableCellEditorBooleanComponent;
}(OBaseTableCellEditor));
export { OTableCellEditorBooleanComponent };
//# sourceMappingURL=o-table-cell-editor-boolean.component.js.map