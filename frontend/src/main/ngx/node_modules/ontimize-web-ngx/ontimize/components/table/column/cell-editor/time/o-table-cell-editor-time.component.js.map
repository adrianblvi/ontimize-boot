{"version":3,"file":"o-table-cell-editor-time.component.js","sourceRoot":"","sources":["../../../../../../../tmp/ontimize/components/table/column/cell-editor/time/o-table-cell-editor-time.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { ChangeDetectionStrategy, Component, ElementRef, HostListener, Injector, OnInit, TemplateRef, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { FormControl, ValidatorFn } from '@angular/forms';\nimport { DateAdapter, MatDatepicker, MatDatepickerInput, MatDatepickerInputEvent, MAT_DATE_FORMATS, MAT_DATE_LOCALE } from '@angular/material';\nimport { MAT_MOMENT_DATE_FORMATS, MomentDateAdapter } from '@angular/material-moment-adapter';\nimport moment from 'moment';\nimport { MomentService } from '../../../../../services/moment.service';\nimport { Codes } from '../../../../../util/codes';\nimport { Util } from '../../../../../util/util';\nimport { IFormValueOptions } from '../../../../form/form-components';\nimport { OBaseTableCellEditor } from '../o-base-table-cell-editor.class';\n\nexport const DEFAULT_INPUTS_O_TABLE_CELL_EDITOR_TIME = [\n  ...OBaseTableCellEditor.DEFAULT_INPUTS_O_TABLE_CELL_EDITOR,\n  'oDateFormat: date-format',\n  'oDateLocale: date-locale',\n  'oDateStartView: date-start-view',\n  'oMinDate: date-min',\n  'oMaxDate: date-max',\n  'oDateTouchUi: date-touch-ui',\n  'oDateStartAt: date-start-at',\n  'oHourFormat: hour-format',\n  'oHourMin: hour-min',\n  'oHourMax: hour-max',\n  'oHourPlaceholder: hour-placeholder',\n  'oDatePlaceholder: date-placeholder'\n];\n\nexport const DEFAULT_OUTPUTS_O_TABLE_CELL_EDITOR_TIME = [\n  ...OBaseTableCellEditor.DEFAULT_OUTPUTS_O_TABLE_CELL_EDITOR\n];\n\n@Component({\n  moduleId: module.id,\n  selector: 'o-table-cell-editor-time',\n  template: `\n    <ng-template #templateref let-cellvalue=\"cellvalue\" let-rowvalue=\"rowvalue\">\n      <div [formGroup]=\"formGroup\" class=\"o-table-cell-editor-time\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\"\n        fxLayoutGap=\"8px\">\n        <mat-form-field floatLabel=\"never\">\n\n          <input #dateInput matInput [placeholder]=\"getPlaceholderDate()\" [formControl]=\"formControlDate\"\n            [required]=\"orequired\" [matDatepicker]=\"d\" (dateChange)=\"onDateChange($event)\" [min]=\"minDate\" [max]=\"maxDate\"\n            (focus)=\"enabledCommitOnTabPress = false\">\n\n          <mat-datepicker #d [startView]=\"oStartView\" [startAt]=\"oStartAt\" [touchUi]=\"oTouchUi\" (closed)=\"onDatepickerClosed()\">\n          </mat-datepicker>\n\n          <span class=\"icon-btn\" (click)=\"openDatepicker(d)\" matSuffix>\n            <mat-icon svgIcon=\"ontimize:today\"></mat-icon>\n          </span>\n\n          <mat-error *ngIf=\"hasErrorDate('required') || hasErrorHour('required')\"\n            text=\"{{ 'FORM_VALIDATION.REQUIRED' | oTranslate }}\"></mat-error>\n          <mat-error *ngIf=\"hasErrorDate('matDatepickerParse')\"\n            text=\"{{ 'FORM_VALIDATION.DATE_PARSE' | oTranslate }} {{ format }}\"></mat-error>\n\n          <mat-error *ngIf=\"hasErrorDate('matDatepickerFilter')\" text=\"{{ 'FORM_VALIDATION.DATE_FILTER' | oTranslate }}\">\n          </mat-error>\n          <mat-error *ngIf=\"hasErrorDate('matDatepickerMin')\"\n            text=\"{{ 'FORM_VALIDATION.DATE_MIN' | oTranslate }} {{ minDateString }}\"></mat-error>\n\n          <mat-error *ngIf=\"hasErrorDate('matDatepickerMax')\"\n            text=\"{{ 'FORM_VALIDATION.DATE_MAX' | oTranslate }} {{ maxDateString }}\"></mat-error>\n\n        </mat-form-field>\n\n        <span class=\"separator\">&ndash;</span>\n\n        <mat-form-field floatLabel=\"never\">\n\n          <input #hourInput matInput [ngxTimepicker]=\"picker\" [placeholder]=\"getPlaceholderHour()\"\n            [formControl]=\"formControlHour\" [required]=\"orequired\" (change)=\"onHourChange($event)\" [min]=\"oHourMin\"\n            [max]=\"oHourMax\" (keydown)=\"onKeyDown($event)\" [disableClick]=\"true\" [format]=\"oHourFormat\"\n            (blur)=\"enabledCommitOnTabPress = true\">\n\n          <button type=\"button\" matSuffix mat-icon-button (click)=\"open($event)\">\n            <mat-icon ngxMaterialTimepickerToggleIcon svgIcon=\"ontimize:clock\"></mat-icon>\n          </button>\n\n          <mat-error *ngIf=\"hasErrorHour('invalidFormatHour')\"\n            text=\"{{ 'FORM_VALIDATION.HOUR_FORMAT' | oTranslate }} {{ formatString }}\"></mat-error>\n\n        </mat-form-field>\n\n        <ngx-material-timepicker #picker (timeSet)=\"onHourChange($event)\" [confirmBtnTmpl]=\"confirmBtn\"\n          [cancelBtnTmpl]=\"cancelBtn\" (closed)=\"onTimepickerClosed($event)\"></ngx-material-timepicker>\n        <ng-template #confirmBtn>\n          <button mat-stroked-button type=\"button\" (click)=\"setTime($event)\"><span>{{'OK' | oTranslate}}</span></button>\n        </ng-template>\n        <ng-template #cancelBtn>\n          <button mat-stroked-button type=\"button\" (click)=\"picker.close()\"><span>{{'CANCEL' | oTranslate}}</span></button>\n        </ng-template>\n      </div>\n\n    </ng-template>\n  `,\n  styles: [`\n    .separator{cursor:default}.mat-form-field:not(.custom-width) .mat-form-field-infix{width:84px}button.mat-stroked-button{margin:0 6px}\n  `],\n  inputs: DEFAULT_INPUTS_O_TABLE_CELL_EDITOR_TIME,\n  outputs: DEFAULT_OUTPUTS_O_TABLE_CELL_EDITOR_TIME,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [\n    { provide: DateAdapter, useClass: MomentDateAdapter, deps: [MAT_DATE_LOCALE] },\n    { provide: MAT_DATE_FORMATS, useValue: MAT_MOMENT_DATE_FORMATS },\n  ],\n})\n\nexport class OTableCellEditorTimeComponent extends OBaseTableCellEditor implements OnInit {\n\n  public static DEFAULT_INPUTS_O_TABLE_CELL_EDITOR_TIME = DEFAULT_INPUTS_O_TABLE_CELL_EDITOR_TIME;\n  public static DEFAULT_OUTPUTS_O_TABLE_CELL_EDITOR_TIME = DEFAULT_OUTPUTS_O_TABLE_CELL_EDITOR_TIME;\n\n  @ViewChild('templateref', { read: TemplateRef }) public templateref: TemplateRef<any>;\n\n  @ViewChild('dateInput')\n  protected dateInput: ElementRef;\n\n  @ViewChild('hourInput')\n  protected hourInput: ElementRef;\n\n  @ViewChild('picker')\n  private picker: any; // NgxMaterialTimepickerComponent from ngx-material-timepicker\n\n  oStartView: 'month' | 'year' = 'month';\n\n  @ViewChild(MatDatepickerInput)\n  public datepickerInput: MatDatepickerInput<Date>;\n\n  formControlHour: FormControl;\n  formControlDate: FormControl;\n\n  public oDateFormat: string = 'L';\n  public oHourMax: string;\n  public oHourMin: string;\n\n  private _oDateLocale;\n  protected oHourPlaceholder: string;\n  protected oDatePlaceholder: string;\n  protected oHourFormat: number = Codes.TWENTY_FOUR_HOUR_FORMAT;\n  protected onKeyboardInputDone = false;\n  protected oMinDate: string;\n  protected oMaxDate: string;\n  protected _minDateString: string;\n  protected _maxDateString: string;\n  protected datepicker: MatDatepicker<Date>;\n  private momentSrv: MomentService;\n\n  // only true when hour input is focused\n  public enabledCommitOnTabPress: boolean = false;\n  protected activeKeys: Object = {};\n\n  @HostListener('document:keydown', ['$event'])\n  onDocumentKeydown(event: KeyboardEvent) {\n    this.handleKeydown(event);\n  }\n\n  constructor(\n    protected injector: Injector,\n    private adapter: DateAdapter<any>\n  ) {\n    super(injector);\n    this.momentSrv = this.injector.get(MomentService);\n  }\n\n  ngOnInit(): void {\n    super.ngOnInit();\n    this.createInternalFormControl();\n    if (!this._oDateLocale) {\n      this.oDateLocale = this.momentSrv.getLocale();\n    }\n\n    if (this.oMinDate) {\n      const date = new Date(this.oMinDate);\n      const momentD = moment(date);\n      if (momentD.isValid()) {\n        this.minDateString = momentD.format(this.oDateFormat);\n      }\n    }\n\n    if (this.oMaxDate) {\n      const date = new Date(this.oMaxDate);\n      const momentD = moment(date);\n      if (momentD.isValid()) {\n        this.maxDateString = momentD.format(this.oDateFormat);\n      }\n    }\n  }\n\n  createInternalFormControl() {\n    if (!this.formControlDate) {\n      const validators: ValidatorFn[] = this.resolveValidators();\n      const cfg = {\n        value: undefined,\n        disabled: !this.enabled\n      };\n      this.formControlDate = new FormControl(cfg, validators);\n      this.formGroup.addControl('dateInput', this.formControlDate);\n    }\n\n    if (!this.formControlHour) {\n      const validators: ValidatorFn[] = this.resolveValidators();\n      const cfg = {\n        value: undefined,\n        disabled: !this.enabled\n      };\n      this.formControlHour = new FormControl(cfg, validators);\n      this.formGroup.addControl('hourInput', this.formControlHour);\n    }\n  }\n\n  public ngAfterViewChecked(): void {\n    this.modifyPickerMethods();\n  }\n\n  setTime(event) {\n    event.preventDefault();\n    event.stopPropagation();\n    this.picker.setTime();\n  }\n\n  onDateChange(event: MatDatepickerInputEvent<any>) {\n    const isValid = event.value && event.value.isValid && event.value.isValid();\n    let val = isValid ? event.value.valueOf() : moment().startOf('day');\n\n    this.formControlDate.setValue(val, {\n      emitModelToViewChange: false,\n      emitEvent: false\n    });\n    this.updateComponentValue();\n  }\n\n  protected updateValeOnInputChange(blurEvent: any): void {\n    if (this.onKeyboardInputDone) {\n      let value: string = blurEvent.currentTarget.value;\n      // ngx-material-timepicker does not allow writing characters on input, so we add 'AM/PM' in order to make validation work properly\n      value = this.parseHour(value);\n      this.formControlHour.setValue(value);\n    }\n    this.onKeyboardInputDone = false;\n  }\n\n  /**\n   * Receives an hour input introduced by the user and returns the hour formated acording current format\n   * @param value\n   */\n  protected parseHour(value: string): string {\n    const strArray = value.split(':');\n    let hour: any = strArray[0];\n\n    if (Codes.TWELVE_FOUR_HOUR_FORMAT === this.oHourFormat) {\n      if (hour) {\n        hour = parseInt(hour);\n        const period = hour <= 12 ? ' AM' : ' PM';\n        if (hour > 12) {\n          hour = hour - 12;\n        }\n        strArray[0] = hour;\n        value = strArray.join(':') + period;\n      }\n    }\n    return value;\n  }\n\n  public onHourChange(event) {\n    let value;\n    if (event instanceof Event) {\n      this.updateValeOnInputChange(event);\n    } else {\n      value = this.convertToFormatString(event);\n      /** emitModelToViewChange: false  because onChange event is trigger in ngModelChange */\n      this.formControlHour.setValue(value, {\n        emitEvent: false,\n        emitModelToViewChange: false\n      });\n    }\n    this.updateComponentValue();\n  }\n\n  public setTimestampValue(value: any, options?: IFormValueOptions): void {\n    let parsedValue;\n    const momentV = Util.isDefined(value) ? moment(value) : value;\n    if (momentV && momentV.isValid()) {\n      parsedValue = momentV.utcOffset(0).format(this.formatString);\n    }\n    this.formControlHour.setValue(parsedValue, options);\n  }\n\n  protected convertToFormatString(value): string {\n    if (value === '00:00' || !Util.isDefined(value)) {\n      return value;\n    }\n    const formatStr = this.oHourFormat === Codes.TWENTY_FOUR_HOUR_FORMAT ? 'HH:mm' : 'hh:mm a';\n    let result = value;\n    if (typeof value === 'number') {\n      result = moment(value).format(formatStr);\n    } else {\n      result = value ? moment(value, 'h:mm A').format(formatStr) : value;\n    }\n    return result;\n  }\n\n  openDatepicker(d: MatDatepicker<Date>) {\n    this.datepicker = d;\n    d.open();\n  }\n\n  getPlaceholderHour() {\n    let placeholder = '';\n    if (this.oHourPlaceholder) {\n      placeholder = this.translateService.get(this.oHourPlaceholder);\n    } else {\n      placeholder = super.getPlaceholder();\n    }\n    return placeholder;\n  }\n\n  getPlaceholderDate() {\n    let placeholder = '';\n    if (this.oDatePlaceholder) {\n      placeholder = this.translateService.get(this.oDatePlaceholder);\n    } else {\n      placeholder = super.getPlaceholder();\n    }\n    return placeholder;\n  }\n\n  public open(e?: Event): void {\n    if (Util.isDefined(e)) {\n      e.stopPropagation();\n    }\n    if (this.picker) {\n      this.picker.open();\n    }\n  }\n\n  protected handleKeydown(e: KeyboardEvent) {\n    this.activeKeys[e.keyCode] = true;\n  }\n\n  protected handleKeyup(e: KeyboardEvent) {\n    this.activeKeys[e.keyCode] = false;\n    const oColumn = this.table.getOColumn(this.tableColumn.attr);\n    if (!oColumn) {\n      return;\n    }\n    if (e.keyCode === 9 && (this.activeKeys[16] || !this.enabledCommitOnTabPress)) {\n      // tab + shift or tab pressed with focus in the date component\n      return;\n    }\n    if (!oColumn.editing && this.datepicker && this.datepicker.opened) {\n      this.datepicker.close();\n    } else {\n      super.handleKeyup(e);\n    }\n  }\n\n  protected updateComponentValue(): void {\n\n    let timeValue: number;\n    const values = this.formGroup.getRawValue();\n    const mDate = (values['dateInput'] ? moment(values['dateInput']) : moment()).startOf('day');\n\n    const mHour = moment(values['hourInput'], this.formatString);\n    timeValue = mDate.clone()\n      .set('hour', mHour.get('hour'))\n      .set('minute', mHour.get('minutes'))\n      .valueOf();\n\n    if (this.formControl) {\n      this.formControl.setValue(timeValue);\n      this.formControl.markAsDirty();\n    }\n  }\n\n  protected modifyPickerMethods(): void {\n    if (this.picker) {\n      const ngxTimepicker = this.picker.timepickerInput;\n      if (ngxTimepicker && ngxTimepicker.onInput) {\n        ngxTimepicker.onInput = (value: string) => this.onKeyboardInputDone = true;\n      }\n    }\n  }\n\n  hasErrorDate(error: string): boolean {\n    return this.formControlDate && this.formControlDate.touched && this.hasErrorExclusive(error);\n  }\n\n  hasErrorExclusive(error: string): boolean {\n    let hasError = false;\n    const errorsOrder = ['matDatepickerMax', 'matDatepickerMin', 'matDatepickerFilter', 'matDatepickerParse', 'required'];\n    const errors = this.formControlDate.errors;\n    if (Util.isDefined(errors)) {\n      if (Object.keys(errors).length === 1) {\n        return errors.hasOwnProperty(error);\n      } else {\n        for (let i = 0, len = errorsOrder.length; i < len; i++) {\n          hasError = errors.hasOwnProperty(errorsOrder[i]);\n          if (hasError) {\n            hasError = (errorsOrder[i] === error);\n            break;\n          }\n        }\n      }\n    }\n    return hasError;\n  }\n  hasErrorHour(error: string): boolean {\n    return this.formControlHour && this.formControlHour.touched;\n  }\n\n  getCellDataDate(): any {\n    let value = super.getCellData();\n    if (Util.isDefined(value)) {\n      const m = moment(value);\n      let result = value;\n      if (Util.isDefined(m)) {\n        result = m.toDate();\n      }\n      return result;\n    }\n    return value;\n  }\n\n  getCellDataHour(): any {\n    let value = super.getCellData();\n    if (Util.isDefined(value)) {\n      const m = moment(value);\n      let result = value;\n      if (Util.isDefined(m)) {\n        result = m.format(Codes.formatString(this.oHourFormat));\n      }\n      return result;\n    }\n    return value;\n  }\n\n  startEdition(data: any) {\n    super.startEdition(data);\n    const cellDataDate = this.getCellDataDate();\n    this.formControlDate.setValue(cellDataDate);\n\n    const cellDataHour = this.getCellDataHour();\n    this.formControlHour.setValue(cellDataHour);\n    this.formGroup.markAsTouched();\n  }\n\n  get formatString(): string {\n    return Codes.formatString(this.oHourFormat);\n  }\n\n  get minDateString(): string {\n    return this._minDateString;\n  }\n\n  set minDateString(val: string) {\n    this._minDateString = val;\n  }\n\n  get maxDateString(): string {\n    return this._maxDateString;\n  }\n\n  set maxDateString(val: string) {\n    this._maxDateString = val;\n  }\n\n  public set oDateLocale(value: string) {\n    this._oDateLocale = value;\n    if (Util.isDefined(this._oDateLocale)) {\n      this.adapter.setLocale(value);\n    }\n  }\n\n  get minDate(): Date {\n    return new Date(this.oMinDate);\n  }\n\n  get maxDate(): Date {\n    return new Date(this.oMaxDate);\n  }\n\n  onDatepickerClosed() {\n    this.dateInput.nativeElement.focus();\n  }\n\n  onTimepickerClosed() {\n    this.hourInput.nativeElement.focus();\n  }\n\n  commitEdition() {\n    if (!this.formGroup.invalid) {\n      super.commitEdition();\n    }\n  }\n\n  public onKeyDown(e: KeyboardEvent): void {\n    if (!Codes.isHourInputAllowed(e)) {\n      e.preventDefault();\n    }\n  }\n\n}\n"]}