var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { CommonModule } from '@angular/common';
import { Component, ContentChildren, ElementRef, EventEmitter, forwardRef, Inject, Injector, NgModule, Optional, QueryList, ViewChild, ViewChildren } from '@angular/core';
import { ObservableMedia } from '@angular/flex-layout';
import { MatPaginator } from '@angular/material';
import { RouterModule } from '@angular/router';
import { Subscription } from 'rxjs';
import { OSearchInputModule } from '../../components';
import { InputConverter } from '../../decorators';
import { OntimizeService } from '../../services';
import { dataServiceFactory } from '../../services/data-service.provider';
import { OSharedModule } from '../../shared';
import { Codes, ObservableWrapper, Util } from '../../utils';
import { OFormComponent } from '../form/form-components';
import { OServiceComponent } from '../o-service-component.class';
import { ServiceUtils } from '../service.utils';
import { OGridItemComponent, OGridItemModule } from './grid-item/o-grid-item.component';
import { OGridItemDirective } from './grid-item/o-grid-item.directive';
export var DEFAULT_INPUTS_O_GRID = OServiceComponent.DEFAULT_INPUTS_O_SERVICE_COMPONENT.concat([
    'cols',
    'pageSizeOptions: page-size-options',
    'showPageSize: show-page-size',
    'showSort: orderable',
    'sortableColumns: sortable-columns',
    'sortColumn: sort-column',
    'quickFilterColumns: quick-filter-columns',
    'gridItemHeight: grid-item-height',
    'refreshButton: refresh-button',
    'paginationControls: pagination-controls',
    'gutterSize:gutter-size',
    'fixedHeader:fixed-header',
    'showFooter:show-footer'
]);
export var DEFAULT_OUTPUTS_O_GRID = [
    'onClick',
    'onDoubleClick',
    'onDataLoaded',
    'onPaginatedDataLoaded'
];
var PAGE_SIZE_OPTIONS = [8, 16, 24, 32, 64];
var Éµ0 = dataServiceFactory;
var OGridComponent = (function (_super) {
    __extends(OGridComponent, _super);
    function OGridComponent(injector, elRef, form) {
        var _this = _super.call(this, injector, elRef, form) || this;
        _this.queryRows = 32;
        _this.fixedHeader = false;
        _this.showPageSize = false;
        _this.showSort = false;
        _this.showFooter = true;
        _this.gridItemHeight = '1:1';
        _this.refreshButton = true;
        _this.paginationControls = false;
        _this.gutterSize = '1px';
        _this.onClick = new EventEmitter();
        _this.onDoubleClick = new EventEmitter();
        _this.onDataLoaded = new EventEmitter();
        _this.onPaginatedDataLoaded = new EventEmitter();
        _this._sortableColumns = [];
        _this._colsDefault = 1;
        _this._pageSizeOptions = PAGE_SIZE_OPTIONS;
        _this.dataResponseArray = [];
        _this.storePaginationState = false;
        _this._currentPage = 0;
        _this.subscription = new Subscription();
        _this.media = _this.injector.get(ObservableMedia);
        return _this;
    }
    Object.defineProperty(OGridComponent.prototype, "cols", {
        get: function () {
            return this._cols || this._colsDefault;
        },
        set: function (value) {
            this._cols = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OGridComponent.prototype, "pageSizeOptions", {
        get: function () {
            return this._pageSizeOptions;
        },
        set: function (val) {
            if (!(val instanceof Array)) {
                val = Util.parseArray(String(val)).map(function (a) { return parseInt(a); });
            }
            this._pageSizeOptions = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OGridComponent.prototype, "sortableColumns", {
        get: function () {
            return this._sortableColumns;
        },
        set: function (val) {
            var parsed = [];
            if (!Util.isArray(val)) {
                parsed = ServiceUtils.parseSortColumns(String(val));
            }
            this._sortableColumns = parsed;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OGridComponent.prototype, "gridItems", {
        get: function () {
            return this._gridItems;
        },
        set: function (value) {
            this._gridItems = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OGridComponent.prototype, "currentPage", {
        get: function () {
            return this._currentPage;
        },
        set: function (val) {
            this._currentPage = val;
        },
        enumerable: true,
        configurable: true
    });
    OGridComponent.prototype.ngOnInit = function () {
        this.initialize();
    };
    OGridComponent.prototype.initialize = function () {
        var _this = this;
        _super.prototype.initialize.call(this);
        if (this.state.hasOwnProperty('sort-column')) {
            this.sortColumn = this.state['sort-column'];
        }
        this.parseSortColumn();
        var existingOption = this.pageSizeOptions.find(function (option) { return option === _this.queryRows; });
        if (!Util.isDefined(existingOption)) {
            this._pageSizeOptions.push(this.queryRows);
            this._pageSizeOptions.sort(function (i, j) { return i - j; });
        }
        if (!Util.isDefined(this.quickFilterColumns)) {
            this.quickFilterColumns = this.columns;
        }
        this.quickFilterColArray = Util.parseArray(this.quickFilterColumns, true);
        if (this.state.hasOwnProperty('currentPage')) {
            this.currentPage = this.state['currentPage'];
        }
        if (this.queryOnInit) {
            this.queryData();
        }
    };
    OGridComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.gridItems = this.inputGridItems.toArray();
        this.subscription.add(this.inputGridItems.changes.subscribe(function (queryChanges) {
            _this.gridItems = queryChanges._results;
        }));
    };
    OGridComponent.prototype.ngAfterViewInit = function () {
        _super.prototype.afterViewInit.call(this);
        this.setGridItemDirectivesData();
        if (this.searchInputComponent) {
            this.registerQuickFilter(this.searchInputComponent);
        }
    };
    OGridComponent.prototype.ngAfterViewChecked = function () {
        var _this = this;
        this.subscription.add(this.media.subscribe(function (change) {
            switch (change.mqAlias) {
                case 'xs':
                case 'sm':
                    _this._colsDefault = 1;
                    break;
                case 'md':
                    _this._colsDefault = 2;
                    break;
                case 'lg':
                case 'xl':
                    _this._colsDefault = 4;
            }
        }));
    };
    OGridComponent.prototype.ngOnChanges = function (changes) {
        _super.prototype.ngOnChanges.call(this, changes);
    };
    OGridComponent.prototype.reloadData = function () {
        if (!this.pageable) {
            this.filterData();
        }
        else {
            var queryArgs = {};
            queryArgs = {
                offset: this.paginationControls ? (this.currentPage * this.queryRows) : 0,
                length: Math.max(this.queryRows, this.dataResponseArray.length),
                replace: true
            };
            this.queryData(void 0, queryArgs);
        }
    };
    OGridComponent.prototype.reloadPaginatedDataFromStart = function () {
        this.currentPage = 0;
        this.dataResponseArray = [];
        this.reloadData();
    };
    OGridComponent.prototype.setDataArray = function (data) {
        if (Util.isArray(data)) {
            this.dataResponseArray = data;
        }
        else if (Util.isObject(data)) {
            this.dataResponseArray = [data];
        }
        else {
            console.warn('Component has received not supported service data. Supported data are Array or Object');
            this.dataResponseArray = [];
        }
        this.filterData();
    };
    OGridComponent.prototype.filterData = function (value, loadMore) {
        value = Util.isDefined(value) ? value : Util.isDefined(this.quickFilterComponent) ? this.quickFilterComponent.getValue() : void 0;
        if (this.state && Util.isDefined(value)) {
            this.state.filterValue = value;
        }
        if (this.pageable) {
            var queryArgs = {
                offset: 0,
                length: this.queryRows,
                replace: true
            };
            this.queryData(void 0, queryArgs);
            return;
        }
        if (this.dataResponseArray && this.dataResponseArray.length > 0) {
            var filteredData = this.dataResponseArray.slice(0);
            if (value && value.length > 0) {
                var caseSensitive_1 = this.isFilterCaseSensitive();
                var self_1 = this;
                filteredData = filteredData.filter(function (item) {
                    return self_1.getQuickFilterColumns().some(function (col) {
                        var regExpStr = Util.escapeSpecialCharacter(Util.normalizeString(value, !caseSensitive_1));
                        return new RegExp(regExpStr).test(Util.normalizeString(item[col] + '', !caseSensitive_1));
                    });
                });
            }
            if (Util.isDefined(this.sortColumnOrder)) {
                var sort_1 = this.sortColumnOrder;
                var factor_1 = (sort_1.ascendent ? 1 : -1);
                filteredData.sort(function (a, b) {
                    var aOp = isNaN(a[sort_1.columnName]) ? Util.normalizeString(a[sort_1.columnName]) : a[sort_1.columnName];
                    var bOp = isNaN(b[sort_1.columnName]) ? Util.normalizeString(b[sort_1.columnName]) : b[sort_1.columnName];
                    return (aOp > bOp) ? (1 * factor_1) : (bOp > aOp) ? (-1 * factor_1) : 0;
                });
            }
            if (this.paginationControls) {
                this.dataArray = filteredData.splice(this.currentPage * this.queryRows, this.queryRows);
            }
            else {
                this.dataArray = filteredData.splice(0, this.queryRows * (this.currentPage + 1));
            }
        }
        else {
            this.dataArray = this.dataResponseArray;
        }
    };
    OGridComponent.prototype.registerGridItem = function (item) {
        if (item) {
            var self_2 = this;
            if (self_2.detailMode === Codes.DETAIL_MODE_CLICK) {
                item.onClick(function (gridItem) { return self_2.onItemDetailClick(gridItem); });
            }
            if (Codes.isDoubleClickMode(self_2.detailMode)) {
                item.onDoubleClick(function (gridItem) { return self_2.onItemDetailDblClick(gridItem); });
            }
        }
    };
    OGridComponent.prototype.onItemDetailClick = function (item) {
        if (this.oenabled && this.detailMode === Codes.DETAIL_MODE_CLICK) {
            this.saveDataNavigationInLocalStorage();
            this.viewDetail(item.getItemData());
            ObservableWrapper.callEmit(this.onClick, item);
        }
    };
    OGridComponent.prototype.onItemDetailDblClick = function (item) {
        if (this.oenabled && Codes.isDoubleClickMode(this.detailMode)) {
            this.saveDataNavigationInLocalStorage();
            this.viewDetail(item.getItemData());
            ObservableWrapper.callEmit(this.onDoubleClick, item);
        }
    };
    OGridComponent.prototype.ngOnDestroy = function () {
        this.destroy();
    };
    OGridComponent.prototype.destroy = function () {
        _super.prototype.destroy.call(this);
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    };
    OGridComponent.prototype.loadMore = function () {
        this.currentPage += 1;
        if (this.pageable) {
            var queryArgs = {
                offset: this.state.queryRecordOffset,
                length: this.queryRows
            };
            this.queryData(void 0, queryArgs);
        }
        else {
            this.filterData(void 0, true);
        }
    };
    Object.defineProperty(OGridComponent.prototype, "totalRecords", {
        get: function () {
            if (this.pageable) {
                return this.getTotalRecordsNumber();
            }
            return this.dataResponseArray.length;
        },
        enumerable: true,
        configurable: true
    });
    OGridComponent.prototype.getQueryArguments = function (filter, ovrrArgs) {
        var queryArguments = _super.prototype.getQueryArguments.call(this, filter, ovrrArgs);
        if (this.pageable && Util.isDefined(this.sortColumn)) {
            queryArguments[6] = this.sortColumnOrder ? [this.sortColumnOrder] : this.sortColumnOrder;
        }
        return queryArguments;
    };
    OGridComponent.prototype.parseSortColumn = function () {
        var parsed = (ServiceUtils.parseSortColumns(this.sortColumn) || [])[0];
        var exists = parsed ? this.sortableColumns.find(function (item) { return (item.columnName === parsed.columnName) && (item.ascendent === parsed.ascendent); }) : false;
        if (exists) {
            this.sortColumnOrder = parsed;
        }
    };
    Object.defineProperty(OGridComponent.prototype, "currentOrderColumn", {
        get: function () {
            var _this = this;
            if (!Util.isDefined(this.sortColumnOrder)) {
                return undefined;
            }
            var index;
            this.sortableColumns.forEach(function (item, i) {
                if ((item.columnName === _this.sortColumnOrder.columnName) &&
                    (item.ascendent === _this.sortColumnOrder.ascendent)) {
                    index = i;
                }
            });
            return index;
        },
        set: function (val) {
            this.sortColumnOrder = this.sortableColumns[val];
        },
        enumerable: true,
        configurable: true
    });
    OGridComponent.prototype.onChangePage = function (e) {
        if (!this.pageable) {
            this.currentPage = e.pageIndex;
            this.queryRows = e.pageSize;
            this.filterData();
            return;
        }
        var tableState = this.state;
        var goingBack = e.pageIndex < this.currentPage;
        this.currentPage = e.pageIndex;
        var pageSize = e.pageSize;
        var oldQueryRows = this.queryRows;
        var changingPageSize = (oldQueryRows !== pageSize);
        this.queryRows = pageSize;
        var newStartRecord;
        var queryLength;
        if (goingBack || changingPageSize) {
            newStartRecord = (this.currentPage * this.queryRows);
            queryLength = this.queryRows;
        }
        else {
            newStartRecord = Math.max(tableState.queryRecordOffset, (this.currentPage * this.queryRows));
            var newEndRecord = Math.min(newStartRecord + this.queryRows, tableState.totalQueryRecordsNumber);
            queryLength = Math.min(this.queryRows, newEndRecord - newStartRecord);
        }
        var queryArgs = {
            offset: newStartRecord,
            length: queryLength
        };
        this.queryData(void 0, queryArgs);
    };
    OGridComponent.prototype.getDataToStore = function () {
        var dataToStore = _super.prototype.getDataToStore.call(this);
        dataToStore['currentPage'] = this.currentPage;
        if (this.storePaginationState) {
            dataToStore['queryRecordOffset'] = Math.max((this.state.queryRecordOffset - this.dataArray.length), (this.state.queryRecordOffset - this.queryRows));
        }
        else {
            delete dataToStore['queryRecordOffset'];
        }
        if (Util.isDefined(this.sortColumnOrder)) {
            dataToStore['sort-column'] = this.sortColumnOrder.columnName + Codes.COLUMNS_ALIAS_SEPARATOR +
                (this.sortColumnOrder.ascendent ? Codes.ASC_SORT : Codes.DESC_SORT);
        }
        return dataToStore;
    };
    OGridComponent.prototype.getSortOptionText = function (col) {
        var result;
        var colTextKey = "GRID.SORT_BY_" + col.columnName.toUpperCase() + "_" + (col.ascendent ? 'ASC' : 'DESC');
        result = this.translateService.get(colTextKey);
        if (result !== colTextKey) {
            return result;
        }
        colTextKey = 'GRID.SORT_BY_' + (col.ascendent ? 'ASC' : 'DESC');
        result = this.translateService.get(colTextKey, [(this.translateService.get(col.columnName) || '')]);
        return result;
    };
    OGridComponent.prototype.setData = function (data, sqlTypes, replace) {
        if (Util.isArray(data)) {
            var dataArray = data;
            var respDataArray = data;
            if (!replace) {
                if (this.pageable) {
                    dataArray = this.paginationControls ? data : (this.dataArray || []).concat(data);
                    respDataArray = this.paginationControls ? data : (this.dataResponseArray || []).concat(data);
                }
                else {
                    dataArray = data.slice(this.paginationControls ? ((this.queryRows * (this.currentPage + 1)) - this.queryRows) : 0, this.queryRows * (this.currentPage + 1));
                    respDataArray = data;
                }
            }
            this.dataArray = dataArray;
            this.dataResponseArray = respDataArray;
            if (!this.pageable) {
                this.filterData();
            }
        }
        else {
            this.dataArray = [];
            this.dataResponseArray = [];
        }
        if (this.loaderSubscription) {
            this.loaderSubscription.unsubscribe();
        }
        if (this.pageable) {
            ObservableWrapper.callEmit(this.onPaginatedDataLoaded, data);
        }
        ObservableWrapper.callEmit(this.onDataLoaded, this.dataResponseArray);
    };
    OGridComponent.prototype.saveDataNavigationInLocalStorage = function () {
        _super.prototype.saveDataNavigationInLocalStorage.call(this);
        this.storePaginationState = true;
    };
    OGridComponent.prototype.setGridItemDirectivesData = function () {
        var _this = this;
        var self = this;
        this.gridItemDirectives.changes.subscribe(function () {
            _this.gridItemDirectives.toArray().forEach(function (element, index) {
                element.setItemData(self.dataArray[index]);
                element.setGridComponent(self);
                self.registerGridItem(element);
            });
        });
    };
    OGridComponent.DEFAULT_INPUTS_O_GRID = DEFAULT_INPUTS_O_GRID;
    OGridComponent.DEFAULT_OUTPUTS_O_GRID = DEFAULT_OUTPUTS_O_GRID;
    OGridComponent.decorators = [
        { type: Component, args: [{
                    moduleId: module.id,
                    selector: 'o-grid',
                    providers: [
                        { provide: OntimizeService, useFactory: Éµ0, deps: [Injector] }
                    ],
                    inputs: DEFAULT_INPUTS_O_GRID,
                    outputs: DEFAULT_OUTPUTS_O_GRID,
                    template: "\n    <div [style.display]=\"isVisible()? '' : 'none'\" class=\"o-grid-container\" fxLayout=\"column\" fxLayoutAlign=\"start stretch\">\n      <!--TOOLBAR-->\n      <mat-toolbar *ngIf=\"hasControls()\" class=\"o-grid-toolbar\">\n        <div class=\"mat-toolbar-tools\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"8px\" fxFill>\n          <!--button refresh-->\n          <button type=\"button\" mat-icon-button aria-label=\"Refresh\" (click)=\"reloadData()\" *ngIf=\"refreshButton\">\n            <mat-icon svgIcon=\"ontimize:autorenew\"></mat-icon>\n          </button>\n\n          <!--O-GRID-PAGINATOR-->\n          <div class=\"o-grid-paginator\" *ngIf=\"showPageSize\">\n            <div class=\"o-grid-page-size-label\">{{ 'GRID.ITEMS_PER_PAGE' | oTranslate }}:</div>\n            <mat-form-field class=\"o-grid-select-page\" floatLabel=\"never\">\n              <mat-select placeholder=\"\" #pageSizeSelect [(value)]=\"queryRows\" (selectionChange)=\"reloadData()\">\n                <mat-option *ngFor=\"let page of pageSizeOptions\" [value]=\"page\">\n                  {{ page }}\n                </mat-option>\n              </mat-select>\n            </mat-form-field>\n          </div>\n\n          <!--O-GRID-SORT-->\n          <div class=\"o-grid-sort\" *ngIf=\"showSort && sortableColumns.length > 0\">\n            <mat-form-field class=\"o-grid-select-sort\" floatLabel=\"never\">\n              <mat-icon matPrefix>sort</mat-icon>\n              <mat-select #sortSelect [(value)]=\"currentOrderColumn\" (selectionChange)=\"reloadData()\" placeholder=\" {{ 'GRID.SORT_BY' | oTranslate }}\">\n                <mat-option *ngFor=\"let column of sortableColumns; let i = index\" [value]=\"i\">\n                  {{ getSortOptionText(column) }}\n                </mat-option>\n              </mat-select>\n            </mat-form-field>\n          </div>\n\n          <div fxLayoutAlign=\"center center\" fxFlex>\n            <span *ngIf=\"hasTitle()\" fxLayoutAlign=\"center center\">{{ title | oTranslate }}</span>\n          </div>\n          <o-search-input *ngIf=\"quickFilter\" [columns]=\"quickFilterColumns\" [filter-case-sensitive]=\"filterCaseSensitive\" \n            [show-case-sensitive-checkbox]=\"showCaseSensitiveCheckbox()\" placeholder=\"\" ></o-search-input>\n        </div>\n      </mat-toolbar>\n\n      <!--not results-->\n      <div class=\"o-grid-no-results fill-remaining\" *ngIf=\"gridItems.length === 0\" fxLayoutAlign=\"center start\" layout-padding>\n        {{'GRID.EMPTY' | oTranslate}}\n        <ng-container *ngIf=\"quickFilter && searchInputComponent && searchInputComponent.getValue() && searchInputComponent.getValue().length > 0\">\n          {{ 'GRID.EMPTY_USING_FILTER' | oTranslate : { values: [ searchInputComponent.getValue()] } }}\n        </ng-container>\n      </div>\n\n      <!--MAT-GRID-LIST-->\n      <mat-grid-list [cols]=\"cols\" [gutterSize]=\"gutterSize\" [rowHeight]=\"gridItemHeight\" class=\"o-mat-grid-list fill-remaining\"\n        *ngIf=\"gridItems.length > 0\">\n        <mat-grid-tile o-grid-item *ngFor=\"let item of gridItems\" [colspan]=\"item.colspan\" [rowspan]=\"item.rowspan\">\n          <ng-container *ngTemplateOutlet=\"item.template\"></ng-container>\n        </mat-grid-tile>\n      </mat-grid-list>\n\n      <!-- GRID FOOTER -->\n      <div *ngIf=\"!paginationControls && showFooter\" fxLayout=\"row\" fxLayoutAlign=\"center center\" class=\"o-grid-footer\">\n        <button type=\"button\" mat-button *ngIf=\"dataArray.length < totalRecords\" (click)=\"loadMore()\" class=\"mat-raised-button\">\n          {{ 'GRID.BUTTON_NEXT' | oTranslate }}\n        </button>\n        <span fxFlex></span>\n        <span class=\"o-grid-totals\">{{ 'GRID.TEXT_SHOWN_ITEMS' | oTranslate :{values: [dataArray.length, totalRecords]} }}</span>\n      </div>\n\n      <mat-paginator class=\"o-mat-paginator\" #paginator *ngIf=\"paginationControls && showFooter\" [length]=\"totalRecords\" [pageSize]=\"queryRows\"\n        [pageSizeOptions]=\"pageSizeOptions\" [pageIndex]=\"currentPage\" [showFirstLastButtons]=\"true\" (page)=\"onChangePage($event)\"></mat-paginator>\n\n      <div *ngIf=\"loading | async\" fxLayout=\"row\" fxLayoutAlign=\"center end\" class=\"o-loading-blocker\">\n        <div fxLayoutAlign=\"center center\" [class.o-spinner-container-controls]=\"hasControls()\" class=\"o-spinner-container\">\n          <mat-progress-spinner mode=\"indeterminate\" strokeWidth=\"3\"></mat-progress-spinner>\n        </div>\n      </div>\n\n    </div>\n  ",
                    styles: ["\n    :host.o-grid{height:100%}:host.o-grid .o-grid-container{position:relative;height:100%;display:flex}:host.o-grid .o-grid-container .o-grid-toolbar{flex:0 0 auto}:host.o-grid .o-grid-container .o-grid-no-results{padding:16px}:host.o-grid .o-grid-container .o-grid-paginator,:host.o-grid .o-grid-container .o-grid-sort{font-size:.8em;margin-right:1em}:host.o-grid .o-grid-container .o-grid-paginator{display:flex}:host.o-grid .o-grid-container .o-grid-paginator .o-grid-select-page{width:60px}:host.o-grid .o-grid-container .o-grid-paginator .o-grid-page-size-label{margin:0 4px 0 8px;align-self:center}:host.o-grid .o-grid-container .o-grid-footer .o-grid-totals{margin-right:8px;font-size:14px}:host.o-grid .o-grid-container .o-grid-footer,:host.o-grid .o-grid-container .o-mat-paginator{flex-shrink:0}:host.o-grid .o-grid-container .o-loading-blocker{position:absolute;top:0;left:0;right:0;bottom:0;z-index:500;visibility:visible;opacity:1;-moz-transition:opacity .25s linear;-webkit-transition:opacity .25s linear;transition:opacity .25s linear}:host.o-grid .o-grid-container .o-loading-blocker .o-spinner-container{width:100%;height:100%}:host.o-grid .o-grid-container .o-loading-blocker .o-spinner-container.o-spinner-container-controls{height:calc(100% - 64px)}:host.o-grid.o-grid-fixed{max-height:100%;height:100%}:host.o-grid.o-grid-fixed .o-grid-container{max-height:100%;height:100%}:host.o-grid.o-grid-fixed .o-mat-grid-list{overflow:auto;padding-bottom:0 !important}:host.o-grid.o-grid-fixed .o-grid-footer,:host.o-grid.o-grid-fixed .o-mat-paginator{flex:0 0 auto}\n  "],
                    host: {
                        '[class.o-grid]': 'true',
                        '[class.o-grid-fixed]': 'fixedHeader',
                    }
                },] },
    ];
    OGridComponent.ctorParameters = function () { return [
        { type: Injector },
        { type: ElementRef },
        { type: OFormComponent, decorators: [{ type: Optional }, { type: Inject, args: [forwardRef(function () { return OFormComponent; }),] }] }
    ]; };
    OGridComponent.propDecorators = {
        inputGridItems: [{ type: ContentChildren, args: [OGridItemComponent,] }],
        gridItemDirectives: [{ type: ViewChildren, args: [OGridItemDirective,] }],
        matpaginator: [{ type: ViewChild, args: [MatPaginator,] }]
    };
    __decorate([
        InputConverter(),
        __metadata("design:type", Number)
    ], OGridComponent.prototype, "queryRows", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OGridComponent.prototype, "fixedHeader", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OGridComponent.prototype, "showPageSize", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OGridComponent.prototype, "showSort", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OGridComponent.prototype, "showFooter", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OGridComponent.prototype, "refreshButton", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OGridComponent.prototype, "paginationControls", void 0);
    return OGridComponent;
}(OServiceComponent));
export { OGridComponent };
var OGridModule = (function () {
    function OGridModule() {
    }
    OGridModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [OGridComponent, OGridItemDirective],
                    imports: [CommonModule, OGridItemModule, OSearchInputModule, OSharedModule, RouterModule],
                    exports: [OGridComponent, OGridItemComponent, OGridItemDirective],
                    entryComponents: [OGridItemComponent]
                },] },
    ];
    return OGridModule;
}());
export { OGridModule };
export { Éµ0 };
//# sourceMappingURL=o-grid.component.js.map