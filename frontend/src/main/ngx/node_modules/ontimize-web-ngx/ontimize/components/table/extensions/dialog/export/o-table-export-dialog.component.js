import { HttpErrorResponse } from '@angular/common/http';
import { ChangeDetectionStrategy, Component, Inject, Injector, ViewEncapsulation } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material';
import { DialogService, OExportExtension, OntimizeExportService, OTranslateService } from '../../../../../services';
import { Codes, SQLTypes, Util } from '../../../../../utils';
var OTableExportConfiguration = (function () {
    function OTableExportConfiguration() {
    }
    return OTableExportConfiguration;
}());
export { OTableExportConfiguration };
var OTableExportDialogComponent = (function () {
    function OTableExportDialogComponent(dialogRef, injector, config) {
        this.dialogRef = dialogRef;
        this.injector = injector;
        this.config = config;
        this.dialogService = injector.get(DialogService);
        this.translateService = this.injector.get(OTranslateService);
    }
    OTableExportDialogComponent.prototype.ngOnInit = function () {
        this.initialize();
    };
    OTableExportDialogComponent.prototype.initialize = function () {
        this.configureService();
    };
    OTableExportDialogComponent.prototype.configureService = function () {
        var loadingService = OntimizeExportService;
        try {
            this.exportService = this.injector.get(loadingService);
            var serviceCfg = this.exportService.getDefaultServiceConfiguration(this.config.service);
            this.exportService.configureService(serviceCfg);
        }
        catch (e) {
            console.error(e);
        }
    };
    OTableExportDialogComponent.prototype.exportExcel = function (excelButton) {
        excelButton.disabled = true;
        var exportData = {
            data: this.config.data,
            columns: this.config.columns,
            columnNames: this.config.columnNames,
            sqlTypes: this.config.sqlTypes
        };
        var self = this;
        this.proccessExportData(exportData.data, exportData.sqlTypes);
        this.exportService.exportData(exportData, OExportExtension.Excel).subscribe(function (resp) {
            if (resp.code === Codes.ONTIMIZE_SUCCESSFUL_CODE) {
                self.exportService.downloadFile(resp.data[0]['xslxId'], OExportExtension.Excel).subscribe(function () { return self.dialogRef.close(true); }, function (downloadError) {
                    console.error(downloadError);
                    self.dialogRef.close(false);
                });
            }
            else {
                self.dialogService.alert('ERROR', resp.message).then(function () { return self.dialogRef.close(false); });
            }
        }, function (err) { return self.handleError(err); });
    };
    OTableExportDialogComponent.prototype.exportHTML = function (htmlButton) {
        htmlButton.disabled = true;
        var exportData = {
            data: this.config.data,
            columns: this.config.columns,
            columnNames: this.config.columnNames,
            sqlTypes: this.config.sqlTypes
        };
        var self = this;
        this.proccessExportData(exportData.data, exportData.sqlTypes);
        this.exportService.exportData(exportData, OExportExtension.HTML).subscribe(function (resp) {
            if (resp.code === Codes.ONTIMIZE_SUCCESSFUL_CODE) {
                self.exportService.downloadFile(resp.data[0]['htmlId'], OExportExtension.HTML).subscribe(function () { return self.dialogRef.close(true); }, function (downloadError) {
                    console.error(downloadError);
                    self.dialogRef.close(false);
                });
            }
            else {
                self.dialogService.alert('ERROR', resp.message).then(function () { return self.dialogRef.close(false); });
            }
        }, function (err) { return self.handleError(err); });
    };
    OTableExportDialogComponent.prototype.exportPDF = function (pdfButton) {
        pdfButton.disabled = true;
        var exportData = {
            data: this.config.data,
            columns: this.config.columns,
            columnNames: this.config.columnNames,
            sqlTypes: this.config.sqlTypes
        };
        var self = this;
        this.proccessExportData(exportData.data, exportData.sqlTypes);
        this.exportService.exportData(exportData, OExportExtension.PDF).subscribe(function (resp) {
            if (resp.code === Codes.ONTIMIZE_SUCCESSFUL_CODE) {
                self.exportService.downloadFile(resp.data[0]['pdfId'], OExportExtension.PDF).subscribe(function () { return self.dialogRef.close(true); }, function (downloadError) {
                    console.error(downloadError);
                    self.dialogRef.close(false);
                });
            }
            else {
                self.dialogService.alert('ERROR', resp.message).then(function () { return self.dialogRef.close(false); });
            }
        }, function (err) { return self.handleError(err); });
    };
    OTableExportDialogComponent.prototype.proccessExportData = function (data, sqlTypes) {
        var _this = this;
        Object.keys(sqlTypes).forEach(function (key) {
            if (SQLTypes.BOOLEAN === sqlTypes[key]) {
                var yes_1 = _this.translateService.get('YES');
                var no_1 = _this.translateService.get('NO');
                data.forEach(function (row) {
                    if (row[key]) {
                        row[key] = Util.parseBoolean(row[key]) ? yes_1 : no_1;
                    }
                });
            }
        });
    };
    OTableExportDialogComponent.prototype.handleError = function (err) {
        console.error(err);
        var self = this;
        if (err instanceof HttpErrorResponse) {
            this.dialogService.alert('ERROR', err.message).then(function () { return self.dialogRef.close(false); });
        }
        else {
            this.dialogService.alert('ERROR', 'MESSAGES.ERROR_EXPORT_TABLE_DATA').then(function () { return self.dialogRef.close(false); });
        }
    };
    OTableExportDialogComponent.decorators = [
        { type: Component, args: [{
                    moduleId: module.id,
                    selector: 'o-table-export-dialog',
                    template: "\n    <span mat-dialog-title>{{ 'TABLE.BUTTONS.EXPORT' | oTranslate }}</span>\n    <mat-dialog-content>\n      <div mat-subheader>{{ 'TABLE.DIALOG.EXPORT.DESCRIPTION' | oTranslate }}</div>\n      <div fxLayout=\"row\" fxLayoutAlign=\"space-around center\">\n        <button type=\"button\" #excelButton mat-raised-button (click)=\"exportExcel(excelButton)\" class=\"excel-button\">\n          <div fxLayout=\"column\" fxLayoutAlign=\"center center\">\n            <mat-icon svgIcon=\"ontimize:EXCEL\"></mat-icon>\n            <span>{{ 'TABLE.BUTTONS.EXCEL' | oTranslate }}</span>\n          </div>\n        </button>\n        <button type=\"button\" #htmlButton mat-raised-button (click)=\"exportHTML(htmlButton)\" class=\"html-button\">\n          <div fxLayout=\"column\" fxLayoutAlign=\"center center\">\n            <mat-icon svgIcon=\"ontimize:HTML\"></mat-icon>\n            <span>{{ 'TABLE.BUTTONS.HTML' | oTranslate }}</span>\n          </div>\n        </button>\n        <button type=\"button\" #pdfButton mat-raised-button (click)=\"exportPDF(pdfButton)\" class=\"pdf-button\">\n          <div fxLayout=\"column\" fxLayoutAlign=\"center center\">\n            <mat-icon svgIcon=\"ontimize:PDF\"></mat-icon>\n            <span>{{ 'TABLE.BUTTONS.PDF' | oTranslate }}</span>\n          </div>\n        </button>\n      </div>\n    </mat-dialog-content>\n\n    <mat-dialog-actions fxLayoutAlign=\"end center\">\n      <button type=\"button\" mat-stroked-button [mat-dialog-close]=\"false\">{{ 'CANCEL' | oTranslate | uppercase }}</button>\n    </mat-dialog-actions>\n  ",
                    styles: ["\n    .o-table-export-dialog .mat-icon{padding:6px 6px 0;width:48px;height:48px;font-size:48px}\n  "],
                    providers: [OntimizeExportService],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: {
                        'class': 'o-table-export-dialog'
                    },
                    encapsulation: ViewEncapsulation.None
                },] },
    ];
    OTableExportDialogComponent.ctorParameters = function () { return [
        { type: MatDialogRef },
        { type: Injector },
        { type: OTableExportConfiguration, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
    ]; };
    return OTableExportDialogComponent;
}());
export { OTableExportDialogComponent };
//# sourceMappingURL=o-table-export-dialog.component.js.map