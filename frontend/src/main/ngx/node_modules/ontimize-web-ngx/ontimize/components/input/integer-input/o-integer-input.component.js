var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { CommonModule } from '@angular/common';
import { Component, ElementRef, forwardRef, Inject, Injector, NgModule, Optional, ViewEncapsulation } from '@angular/core';
import { InputConverter } from '../../../decorators';
import { OIntegerPipe } from '../../../pipes';
import { OSharedModule } from '../../../shared';
import { Util } from '../../../util/util';
import { OFormComponent } from '../../form/o-form.component';
import { OFormValue } from '../../form/OFormValue';
import { DEFAULT_INPUTS_O_TEXT_INPUT, DEFAULT_OUTPUTS_O_TEXT_INPUT, OTextInputComponent, OTextInputModule } from '../text-input/o-text-input.component';
export var DEFAULT_INPUTS_O_INTEGER_INPUT = DEFAULT_INPUTS_O_TEXT_INPUT.concat([
    'min',
    'max',
    'step',
    'grouping',
    'thousandSeparator : thousand-separator',
    'olocale : locale'
]);
export var DEFAULT_OUTPUTS_O_INTEGER_INPUT = DEFAULT_OUTPUTS_O_TEXT_INPUT.slice();
var OIntegerInputComponent = (function (_super) {
    __extends(OIntegerInputComponent, _super);
    function OIntegerInputComponent(form, elRef, injector) {
        var _this = _super.call(this, form, elRef, injector) || this;
        _this.inputType = 'number';
        _this.step = 1;
        _this.grouping = false;
        _this._defaultSQLTypeKey = 'INTEGER';
        if (navigator.userAgent.toLowerCase().indexOf('firefox') > -1) {
            _this.inputType = 'text';
        }
        _this.setComponentPipe();
        return _this;
    }
    OIntegerInputComponent.prototype.initialize = function () {
        _super.prototype.initialize.call(this);
        this.initializeStep();
    };
    OIntegerInputComponent.prototype.setComponentPipe = function () {
        this.componentPipe = new OIntegerPipe(this.injector);
    };
    OIntegerInputComponent.prototype.ngOnInit = function () {
        _super.prototype.ngOnInit.call(this);
        this.pipeArguments = {
            grouping: this.grouping,
            thousandSeparator: this.thousandSeparator,
            locale: this.olocale
        };
        if (this.step === undefined) {
            this.step = 1;
        }
    };
    OIntegerInputComponent.prototype.ngAfterViewInit = function () {
        _super.prototype.ngAfterViewInit.call(this);
    };
    OIntegerInputComponent.prototype.setData = function (value) {
        var _this = this;
        _super.prototype.setData.call(this, value);
        setTimeout(function () {
            _this.setPipeValue();
        }, 0);
    };
    OIntegerInputComponent.prototype.setValue = function (val, options) {
        _super.prototype.setValue.call(this, val, options);
        this.setPipeValue();
    };
    OIntegerInputComponent.prototype.innerOnFocus = function (event) {
        event.preventDefault();
        event.stopPropagation();
        if (this.isReadOnly) {
            return;
        }
        this.setNumberDOMValue(this.getValue());
        _super.prototype.innerOnFocus.call(this, event);
    };
    OIntegerInputComponent.prototype.innerOnBlur = function (event) {
        if (event) {
            event.stopPropagation();
            event.preventDefault();
        }
        if (this.isReadOnly) {
            return;
        }
        this.setPipeValue();
        var formControl = this.getControl();
        if (formControl) {
            formControl.updateValueAndValidity();
        }
        _super.prototype.innerOnBlur.call(this, event);
    };
    OIntegerInputComponent.prototype.setPipeValue = function () {
        if (typeof this.pipeArguments !== 'undefined' && !this.isEmpty()) {
            var parsedValue = this.componentPipe.transform(this.getValue(), this.pipeArguments);
            this.setTextDOMValue(parsedValue);
        }
    };
    OIntegerInputComponent.prototype.isEmpty = function () {
        if (this.value instanceof OFormValue) {
            if (this.value.value !== undefined) {
                return false;
            }
        }
        return true;
    };
    OIntegerInputComponent.prototype.getInputEl = function () {
        var inputElement;
        if (this.elRef.nativeElement.tagName === 'INPUT') {
            inputElement = this.elRef.nativeElement;
        }
        else {
            inputElement = this.elRef.nativeElement.getElementsByTagName('INPUT')[0];
        }
        return inputElement;
    };
    OIntegerInputComponent.prototype.setNumberDOMValue = function (val) {
        var inputElement = this.getInputEl();
        if (Util.isDefined(inputElement)) {
            if (navigator.userAgent.toLowerCase().indexOf('firefox') === -1) {
                inputElement.type = 'number';
            }
            inputElement.value = (val !== undefined) ? val : '';
        }
    };
    OIntegerInputComponent.prototype.setTextDOMValue = function (val) {
        var inputElement = this.getInputEl();
        if (Util.isDefined(inputElement)) {
            if (navigator.userAgent.toLowerCase().indexOf('firefox') === -1) {
                inputElement.type = 'text';
            }
            inputElement.value = (val !== undefined) ? val : '';
        }
    };
    OIntegerInputComponent.prototype.resolveValidators = function () {
        var validators = _super.prototype.resolveValidators.call(this);
        if (Util.isDefined(this.min)) {
            validators.push(this.minValidator.bind(this));
        }
        if (Util.isDefined(this.max)) {
            validators.push(this.maxValidator.bind(this));
        }
        return validators;
    };
    OIntegerInputComponent.prototype.minValidator = function (control) {
        if ((typeof (control.value) === 'number') && (control.value < this.min)) {
            return {
                min: {
                    requiredMin: this.min
                }
            };
        }
        return {};
    };
    OIntegerInputComponent.prototype.maxValidator = function (control) {
        if ((typeof (control.value) === 'number') && (this.max < control.value)) {
            return {
                max: {
                    requiredMax: this.max
                }
            };
        }
        return {};
    };
    OIntegerInputComponent.prototype.initializeStep = function () {
        if (this.step <= 0) {
            this.step = 1;
            console.warn('`step` attribute must be greater than zero');
        }
    };
    OIntegerInputComponent.DEFAULT_INPUTS_O_INTEGER_INPUT = DEFAULT_INPUTS_O_INTEGER_INPUT;
    OIntegerInputComponent.DEFAULT_OUTPUTS_O_INTEGER_INPUT = DEFAULT_OUTPUTS_O_INTEGER_INPUT;
    OIntegerInputComponent.decorators = [
        { type: Component, args: [{
                    moduleId: module.id,
                    selector: 'o-integer-input',
                    template: "\n    <div [formGroup]=\"getFormGroup()\" [matTooltip]=\"tooltip\" [matTooltipClass]=\"tooltipClass\" [matTooltipPosition]=\"tooltipPosition\"\n      [matTooltipShowDelay]=\"tooltipShowDelay\" [matTooltipHideDelay]=\"tooltipHideDelay\">\n      <mat-form-field [appearance]=\"appearance\" [floatLabel]=\"floatLabel\"  [hideRequiredMarker]=\"hideRequiredMarker\" [class.custom-width]=\"hasCustomWidth\"\n        [class.icon-field]=\"showClearButton\" fxFlexFill>\n        <mat-label *ngIf=\"labelVisible\">{{ olabel | oTranslate }}</mat-label>\n        <input matInput [type]=\"inputType\" [id]=\"getAttribute()\" [formControlName]=\"getAttribute()\" [placeholder]=\"placeHolder\"\n          (focus)=\"innerOnFocus($event)\" (blur)=\"innerOnBlur($event)\" (change)=\"onChangeEvent($event)\" [readonly]=\"isReadOnly\"\n          [min]=\"min\" [max]=\"max\" [step]=\"step\" [required]=\"isRequired\">\n        <button type=\"button\" *ngIf=\"showClearButton\" matSuffix mat-icon-button (click)=\"onClickClearValue($event)\">\n          <mat-icon svgIcon=\"ontimize:close\"></mat-icon>\n        </button>\n        <mat-error *ngIf=\"hasError('required')\" text=\"{{ 'FORM_VALIDATION.REQUIRED' | oTranslate }}\"></mat-error>\n        <mat-error *ngIf=\"hasError('min')\" text=\"{{ 'FORM_VALIDATION.MIN_VALUE' | oTranslate }}: {{ getErrorValue('min', 'requiredMin') }}\"></mat-error>\n        <mat-error *ngIf=\"hasError('max')\" text=\"{{ 'FORM_VALIDATION.MAX_VALUE' | oTranslate }}: {{ getErrorValue('max', 'requiredMax') }}\"></mat-error>\n        <mat-error *ngFor=\"let oError of getActiveOErrors()\" text=\"{{ oError.text | oTranslate }}\"></mat-error>\n      </mat-form-field>\n    </div>\n  ",
                    styles: ["\n\n  "],
                    inputs: DEFAULT_INPUTS_O_INTEGER_INPUT,
                    outputs: DEFAULT_OUTPUTS_O_INTEGER_INPUT,
                    encapsulation: ViewEncapsulation.None
                },] },
    ];
    OIntegerInputComponent.ctorParameters = function () { return [
        { type: OFormComponent, decorators: [{ type: Optional }, { type: Inject, args: [forwardRef(function () { return OFormComponent; }),] }] },
        { type: ElementRef },
        { type: Injector }
    ]; };
    __decorate([
        InputConverter(),
        __metadata("design:type", Number)
    ], OIntegerInputComponent.prototype, "min", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Number)
    ], OIntegerInputComponent.prototype, "max", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Number)
    ], OIntegerInputComponent.prototype, "step", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OIntegerInputComponent.prototype, "grouping", void 0);
    return OIntegerInputComponent;
}(OTextInputComponent));
export { OIntegerInputComponent };
var OIntegerInputModule = (function () {
    function OIntegerInputModule() {
    }
    OIntegerInputModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [OIntegerInputComponent],
                    imports: [CommonModule, OSharedModule, OTextInputModule],
                    exports: [OIntegerInputComponent, OTextInputModule]
                },] },
    ];
    return OIntegerInputModule;
}());
export { OIntegerInputModule };
//# sourceMappingURL=o-integer-input.component.js.map