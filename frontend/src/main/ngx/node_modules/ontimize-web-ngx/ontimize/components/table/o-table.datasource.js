var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { DataSource } from '@angular/cdk/collections';
import { EventEmitter } from '@angular/core';
import { BehaviorSubject, merge, Subject } from 'rxjs';
import { map } from 'rxjs/operators';
import { Util } from '../../util/util';
import { ColumnValueFilterOperator } from './extensions/header/o-table-header-components';
import { OTableComponent } from './o-table.component';
export var SCROLLVIRTUAL = 'scroll';
var OTableScrollEvent = (function () {
    function OTableScrollEvent(data) {
        this.data = data;
        this.type = SCROLLVIRTUAL;
    }
    return OTableScrollEvent;
}());
export { OTableScrollEvent };
var OTableDataSource = (function (_super) {
    __extends(OTableDataSource, _super);
    function OTableDataSource(table) {
        var _this = _super.call(this) || this;
        _this.table = table;
        _this.dataTotalsChange = new BehaviorSubject([]);
        _this._quickFilterChange = new BehaviorSubject('');
        _this._columnValueFilterChange = new Subject();
        _this._loadDataScrollableChange = new BehaviorSubject(new OTableScrollEvent(1));
        _this.filteredData = [];
        _this.aggregateData = {};
        _this.onRenderedDataChange = new EventEmitter();
        _this._renderedData = [];
        _this.resultsLength = 0;
        _this.columnValueFilters = [];
        _this._database = table.daoTable;
        if (table.paginator) {
            _this._paginator = table.matpaginator;
        }
        _this._tableOptions = table.oTableOptions;
        _this._sort = table.sort;
        return _this;
    }
    Object.defineProperty(OTableDataSource.prototype, "data", {
        get: function () { return this.dataTotalsChange.value; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableDataSource.prototype, "loadDataScrollable", {
        get: function () { return this._loadDataScrollableChange.getValue().data || 1; },
        set: function (page) {
            this._loadDataScrollableChange.next(new OTableScrollEvent(page));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableDataSource.prototype, "quickFilter", {
        get: function () { return this._quickFilterChange.value || ''; },
        set: function (filter) {
            this._quickFilterChange.next(filter);
        },
        enumerable: true,
        configurable: true
    });
    OTableDataSource.prototype.sortFunction = function (a, b) {
        return this._sort.sortFunction(a, b);
    };
    Object.defineProperty(OTableDataSource.prototype, "renderedData", {
        get: function () {
            return this._renderedData;
        },
        set: function (arg) {
            this._renderedData = arg;
            this.onRenderedDataChange.emit();
        },
        enumerable: true,
        configurable: true
    });
    OTableDataSource.prototype.connect = function () {
        var _this = this;
        var displayDataChanges = [
            this._database.dataChange
        ];
        if (!this.table.pageable) {
            if (this._sort) {
                displayDataChanges.push(this._sort.oSortChange);
            }
            if (this._tableOptions.filter) {
                displayDataChanges.push(this._quickFilterChange);
            }
            if (this._paginator) {
                displayDataChanges.push(this._paginator.page);
            }
            else {
                displayDataChanges.push(this._loadDataScrollableChange);
            }
        }
        if (this.table.oTableColumnsFilterComponent) {
            displayDataChanges.push(this._columnValueFilterChange);
        }
        return merge.apply(void 0, displayDataChanges).pipe(map(function (x) {
            var data = Object.assign([], _this._database.data);
            if (x instanceof OTableScrollEvent) {
                _this.renderedData = data.slice(0, (x.data * OTableComponent.LIMIT_SCROLLVIRTUAL) - 1);
            }
            else {
                if (_this.existsAnyCalculatedColumn()) {
                    data = _this.getColumnCalculatedData(data);
                }
                if (!_this.table.pageable) {
                    data = _this.getColumnValueFilterData(data);
                    data = _this.getQuickFilterData(data);
                    data = _this.getSortedData(data);
                }
                _this.filteredData = Object.assign([], data);
                if (_this.table.pageable) {
                    var totalRecordsNumber = _this.table.getTotalRecordsNumber();
                    _this.resultsLength = totalRecordsNumber !== undefined ? totalRecordsNumber : data.length;
                }
                else {
                    _this.resultsLength = data.length;
                    data = _this.getPaginationData(data);
                }
                if (!_this.table.pageable && !_this.table.paginationControls && data.length > OTableComponent.LIMIT_SCROLLVIRTUAL) {
                    var datapaginate = data.slice(0, (_this.table.pageScrollVirtual * OTableComponent.LIMIT_SCROLLVIRTUAL) - 1);
                    data = datapaginate;
                }
                _this.renderedData = data;
                _this.aggregateData = _this.getAggregatesData(data);
            }
            return _this.renderedData;
        }));
    };
    OTableDataSource.prototype.getAggregatesData = function (data) {
        var self = this;
        var obj = {};
        if (typeof this._tableOptions === 'undefined') {
            return obj;
        }
        this._tableOptions.columns.forEach(function (column) {
            var totalValue = '';
            if (column.aggregate && column.visible) {
                totalValue = self.calculateAggregate(data, column);
            }
            var key = column.attr;
            obj[key] = totalValue;
        });
        return obj;
    };
    OTableDataSource.prototype.getColumnCalculatedData = function (data) {
        var self = this;
        var calculatedCols = this._tableOptions.columns.filter(function (oCol) { return oCol.visible && oCol.calculate !== undefined; });
        return data.map(function (row) {
            calculatedCols.forEach(function (oColumn) {
                var value;
                if (typeof oColumn.calculate === 'string') {
                    value = self.transformFormula(oColumn.calculate, row);
                }
                else if (typeof oColumn.calculate === 'function') {
                    value = oColumn.calculate(row);
                }
                row[oColumn.attr] = isNaN(value) ? 0 : value;
            });
            return row;
        });
    };
    OTableDataSource.prototype.transformFormula = function (formulaArg, row) {
        var formula = formulaArg;
        var columnsAttr = this._tableOptions.columns.map(function (oCol) { return oCol.attr; });
        columnsAttr.forEach(function (column) {
            formula = formula.replace(column, row[column]);
        });
        var resultFormula = '';
        try {
            resultFormula = (new Function('return ' + formula))();
        }
        catch (e) {
            console.error('Operation defined in the calculated column is incorrect ');
        }
        return resultFormula;
    };
    OTableDataSource.prototype.getQuickFilterData = function (data) {
        var _this = this;
        var filterData = this.quickFilter;
        if (filterData !== undefined && filterData.length > 0) {
            return data.filter(function (item) {
                var searchStr = _this.getStringSearchable(item);
                if (!_this._tableOptions.filterCaseSensitive) {
                    searchStr = searchStr.toLowerCase();
                    filterData = filterData.toLowerCase();
                }
                return searchStr.indexOf(filterData) !== -1;
            });
        }
        else {
            return data;
        }
    };
    OTableDataSource.prototype.getPaginationData = function (data) {
        if (!this._paginator || isNaN(this._paginator.pageSize)) {
            return data;
        }
        var startIndex = isNaN(this._paginator.pageSize) ? 0 : this._paginator.pageIndex * this._paginator.pageSize;
        if (data.length > 0 && data.length < startIndex) {
            startIndex = 0;
            this._paginator.pageIndex = 0;
        }
        return data.splice(startIndex, this._paginator.pageSize);
    };
    OTableDataSource.prototype.disconnect = function () {
    };
    OTableDataSource.prototype.getStringSearchable = function (item) {
        return this._tableOptions.columns.map(function (oCol) {
            if (oCol.searching && oCol.visible) {
                var filterValue = item[oCol.attr];
                if (oCol.renderer && oCol.renderer.getCellData) {
                    filterValue = oCol.renderer.getCellData(filterValue, item);
                }
                return filterValue;
            }
        }).join(' ');
    };
    OTableDataSource.prototype.getSortedData = function (data) {
        return this._sort.getSortedData(data);
    };
    OTableDataSource.prototype.getTableData = function () {
        return this._database.data;
    };
    OTableDataSource.prototype.getCurrentData = function () {
        return this.getData();
    };
    OTableDataSource.prototype.getCurrentAllData = function () {
        return this.getAllData(false, false);
    };
    OTableDataSource.prototype.getCurrentRendererData = function () {
        return this.getRenderedData(this.renderedData);
    };
    OTableDataSource.prototype.getAllRendererData = function () {
        return this.getAllData(true, true);
    };
    Object.defineProperty(OTableDataSource.prototype, "sqlTypes", {
        get: function () {
            return this._database.sqlTypes;
        },
        enumerable: true,
        configurable: true
    });
    OTableDataSource.prototype.getData = function () {
        return this.renderedData;
    };
    OTableDataSource.prototype.getRenderedData = function (data) {
        var self = this;
        return data.map(function (row, i, a) {
            var obj = {};
            Object.keys(row).forEach(function (column, i, a) {
                self._tableOptions.columns.forEach(function (ocolumn, i, a) {
                    if (column === ocolumn.attr && ocolumn.visible) {
                        var key = column;
                        if (ocolumn.renderer && ocolumn.renderer.getCellData) {
                            obj[key] = ocolumn.renderer.getCellData(row[column], row);
                        }
                        else {
                            obj[key] = row[column];
                        }
                    }
                });
            });
            return obj;
        });
    };
    OTableDataSource.prototype.getAllData = function (render, onlyVisibleColumns) {
        var self = this;
        return this.filteredData.map(function (row, i, a) {
            var obj = {};
            Object.keys(row).forEach(function (column, i, a) {
                self._tableOptions.columns.forEach(function (ocolumn, i, a) {
                    if (column === ocolumn.attr) {
                        if (onlyVisibleColumns && !ocolumn.visible) {
                            return;
                        }
                        var key = column;
                        if (render && ocolumn.renderer && ocolumn.renderer.getCellData) {
                            obj[key] = ocolumn.renderer.getCellData(row[column], row);
                        }
                        else {
                            obj[key] = row[column];
                        }
                    }
                });
            });
            return obj;
        });
    };
    OTableDataSource.prototype.getColumnData = function (ocolumn) {
        return this.renderedData.map(function (row, i, a) {
            var obj = {};
            Object.keys(row).forEach(function (column, i, a) {
                if (column === ocolumn && ocolumn) {
                    var key = column;
                    obj[key] = row[column];
                }
            });
            return obj;
        });
    };
    OTableDataSource.prototype.initializeColumnsFilters = function (filters) {
        var _this = this;
        this.columnValueFilters = [];
        filters.forEach(function (filter) {
            _this.columnValueFilters.push(filter);
        });
        if (!this.table.pageable) {
            this._columnValueFilterChange.next();
        }
    };
    OTableDataSource.prototype.isColumnValueFilterActive = function () {
        return this.columnValueFilters.length !== 0;
    };
    OTableDataSource.prototype.getColumnValueFilters = function () {
        return this.columnValueFilters;
    };
    OTableDataSource.prototype.getColumnValueFilterByAttr = function (attr) {
        return this.columnValueFilters.filter(function (item) { return item.attr === attr; })[0];
    };
    OTableDataSource.prototype.clearColumnFilters = function (trigger) {
        if (trigger === void 0) { trigger = true; }
        this.columnValueFilters = [];
        if (trigger) {
            this._columnValueFilterChange.next();
        }
    };
    OTableDataSource.prototype.addColumnFilter = function (filter) {
        var existingFilter = this.getColumnValueFilterByAttr(filter.attr);
        if (existingFilter) {
            var idx = this.columnValueFilters.indexOf(existingFilter);
            this.columnValueFilters.splice(idx, 1);
        }
        if ((ColumnValueFilterOperator.IN === filter.operator && filter.values.length > 0) ||
            (ColumnValueFilterOperator.EQUAL === filter.operator && filter.values) ||
            (ColumnValueFilterOperator.BETWEEN === filter.operator && filter.values.length === 2) ||
            ((ColumnValueFilterOperator.LESS_EQUAL === filter.operator || ColumnValueFilterOperator.MORE_EQUAL === filter.operator) && filter.values)) {
            this.columnValueFilters.push(filter);
        }
        if (!this.table.pageable) {
            this._columnValueFilterChange.next();
        }
    };
    OTableDataSource.prototype.getColumnValueFilterData = function (data) {
        var _this = this;
        this.columnValueFilters.forEach(function (filter) {
            switch (filter.operator) {
                case ColumnValueFilterOperator.IN:
                    var filterColumn = _this.table.oTableOptions.columns.filter(function (col) { return col.attr === filter.attr; })[0];
                    if (filterColumn) {
                        data = data.filter(function (item) {
                            return (filter.values.indexOf(item[filter.attr]) !== -1);
                        });
                    }
                    break;
                case ColumnValueFilterOperator.EQUAL:
                    if (filter.values.indexOf('*') !== -1) {
                        data = data.filter(function (item) { return new RegExp('^' + Util.normalizeString(filter.values).split('*').join('.*') + '$').test(Util.normalizeString(item[filter.attr])); });
                    }
                    else {
                        data = data.filter(function (item) { return (Util.normalizeString(item[filter.attr]).indexOf(Util.normalizeString(filter.values)) !== -1); });
                    }
                    break;
                case ColumnValueFilterOperator.BETWEEN:
                    data = data.filter(function (item) { return item[filter.attr] >= filter.values[0] && item[filter.attr] <= filter.values[1]; });
                    break;
                case ColumnValueFilterOperator.MORE_EQUAL:
                    data = data.filter(function (item) { return item[filter.attr] >= filter.values; });
                    break;
                case ColumnValueFilterOperator.LESS_EQUAL:
                    data = data.filter(function (item) { return item[filter.attr] <= filter.values; });
                    break;
            }
        });
        return data;
    };
    OTableDataSource.prototype.getAggregateData = function (column) {
        var obj = {};
        var totalValue = '';
        if (typeof this._tableOptions === 'undefined') {
            return new Array(obj);
        }
        totalValue = this.aggregateData[column.attr];
        return totalValue;
    };
    OTableDataSource.prototype.calculateAggregate = function (data, column) {
        var resultAggregate;
        var operator = column.aggregate.operator;
        if (typeof operator === 'string') {
            switch (operator.toLowerCase()) {
                case 'count':
                    resultAggregate = this.count(column.attr, data);
                    break;
                case 'min':
                    resultAggregate = this.min(column.attr, data);
                    break;
                case 'max':
                    resultAggregate = this.max(column.attr, data);
                    break;
                case 'avg':
                    resultAggregate = this.avg(column.attr, data);
                    break;
                default:
                    resultAggregate = this.sum(column.attr, data);
                    break;
            }
        }
        else {
            var data_1 = this.getColumnData(column.attr);
            if (typeof operator === 'function') {
                resultAggregate = operator(data_1);
            }
        }
        return resultAggregate;
    };
    OTableDataSource.prototype.sum = function (column, data) {
        var value = 0;
        if (data) {
            value = data.reduce(function (acumulator, currentValue) {
                return acumulator + (isNaN(currentValue[column]) ? 0 : currentValue[column]);
            }, value);
        }
        return value;
    };
    OTableDataSource.prototype.count = function (column, data) {
        var value = 0;
        if (data) {
            value = data.reduce(function (acumulator, currentValue, currentIndex) {
                return acumulator + 1;
            }, 0);
        }
        return value;
    };
    OTableDataSource.prototype.avg = function (column, data) {
        return this.sum(column, data) / this.count(column, data);
    };
    OTableDataSource.prototype.min = function (column, data) {
        var tempMin = data.map(function (x) { return x[column]; });
        return Math.min.apply(Math, tempMin);
    };
    OTableDataSource.prototype.max = function (column, data) {
        var tempMin = data.map(function (x) { return x[column]; });
        return Math.max.apply(Math, tempMin);
    };
    OTableDataSource.prototype.existsAnyCalculatedColumn = function () {
        return this._tableOptions.columns.find(function (oCol) { return oCol.calculate !== undefined; }) !== undefined;
    };
    OTableDataSource.prototype.updateRenderedRowData = function (rowData) {
        var tableKeys = this.table.getKeys();
        var record = this.renderedData.find(function (data) {
            var found = true;
            for (var i = 0, len = tableKeys.length; i < len; i++) {
                var key = tableKeys[i];
                if (data[key] !== rowData[key]) {
                    found = false;
                    break;
                }
            }
            return found;
        });
        if (Util.isDefined(record)) {
            Object.assign(record, rowData);
        }
    };
    return OTableDataSource;
}(DataSource));
export { OTableDataSource };
//# sourceMappingURL=o-table.datasource.js.map