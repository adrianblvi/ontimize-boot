var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { CommonModule } from '@angular/common';
import { Component, ElementRef, EventEmitter, forwardRef, Inject, Injector, NgModule, Optional, ViewChild } from '@angular/core';
import { FormControl } from '@angular/forms';
import { MatDialog, MatInput } from '@angular/material';
import { InputConverter } from '../../../decorators';
import { OntimizeService } from '../../../services';
import { dataServiceFactory } from '../../../services/data-service.provider';
import { OSharedModule } from '../../../shared';
import { ODialogModule } from '../../dialog/o-dialog.component';
import { OFormComponent } from '../../form/o-form.component';
import { OSearchInputModule } from '../../input/search-input/o-search-input.component';
import { OValueChangeEvent } from '../../o-form-data-component.class';
import { OFormServiceComponent } from '../o-form-service-component.class';
import { OListPickerDialogComponent } from './o-list-picker-dialog.component';
export var DEFAULT_INPUTS_O_LIST_PICKER = OFormServiceComponent.DEFAULT_INPUTS_O_FORM_SERVICE_COMPONENT.concat([
    'filter',
    'dialogWidth : dialog-width',
    'dialogHeight : dialog-height',
    'queryRows: query-rows',
    'textInputEnabled: text-input-enabled',
    'dialogDisableClose: dialog-disable-close',
    'dialogClass: dialog-class'
]);
export var DEFAULT_OUTPUTS_O_LIST_PICKER = OFormServiceComponent.DEFAULT_OUTPUTS_O_FORM_SERVICE_COMPONENT.concat([
    'onDialogAccept',
    'onDialogCancel'
]);
var Éµ0 = dataServiceFactory;
var OListPickerComponent = (function (_super) {
    __extends(OListPickerComponent, _super);
    function OListPickerComponent(form, elRef, injector) {
        var _this = _super.call(this, form, elRef, injector) || this;
        _this.onDialogAccept = new EventEmitter();
        _this.onDialogCancel = new EventEmitter();
        _this.textInputEnabled = true;
        _this.dialogDisableClose = false;
        _this.filter = true;
        _this.dialogHeight = '55%';
        _this.blurDelay = 200;
        _this.blurPrevent = false;
        _this.matDialog = _this.injector.get(MatDialog);
        _this.stateCtrl = new FormControl();
        _this.clearButton = true;
        return _this;
    }
    OListPickerComponent.prototype.ngOnInit = function () {
        this.initialize();
    };
    OListPickerComponent.prototype.ngOnChanges = function (changes) {
        _super.prototype.ngOnChanges.call(this, changes);
        if (typeof (changes['staticData']) !== 'undefined') {
            this.cacheQueried = true;
            this.setDataArray(changes['staticData'].currentValue);
        }
    };
    OListPickerComponent.prototype.createFormControl = function () {
        this._fControl = _super.prototype.createFormControl.call(this);
        this._fControl.fControlChildren = [this.stateCtrl];
        return this._fControl;
    };
    OListPickerComponent.prototype.ensureOFormValue = function (value) {
        _super.prototype.ensureOFormValue.call(this, value);
        this.syncDataIndex(false);
    };
    OListPickerComponent.prototype.setEnabled = function (value) {
        _super.prototype.setEnabled.call(this, value);
        value ? this.stateCtrl.enable() : this.stateCtrl.disable();
    };
    OListPickerComponent.prototype.ngAfterViewInit = function () {
        _super.prototype.ngAfterViewInit.call(this);
        if (this.queryOnInit) {
            this.queryData();
        }
        else if (this.queryOnBind) {
            this.syncDataIndex();
        }
    };
    OListPickerComponent.prototype.getDescriptionValue = function () {
        var descTxt = '';
        if (this.descriptionColArray && this._currentIndex !== undefined) {
            var self_1 = this;
            this.descriptionColArray.forEach(function (descCol, index) {
                var txt = self_1.dataArray[self_1._currentIndex][descCol];
                if (txt) {
                    descTxt += txt;
                }
                if (index < self_1.descriptionColArray.length - 1) {
                    descTxt += self_1.separator;
                }
            });
        }
        return descTxt;
    };
    OListPickerComponent.prototype.onClickClear = function (e) {
        e.preventDefault();
        e.stopPropagation();
        if (!this.isReadOnly && this.enabled) {
            clearTimeout(this.blurTimer);
            this.blurPrevent = true;
            this.setValue(undefined);
        }
    };
    OListPickerComponent.prototype.onClickInput = function (e) {
        if (!this.textInputEnabled) {
            this.onClickListpicker(e);
        }
    };
    OListPickerComponent.prototype.onClickListpicker = function (e) {
        e.preventDefault();
        e.stopPropagation();
        if (!this.isReadOnly && this.enabled) {
            clearTimeout(this.blurTimer);
            this.openDialog();
        }
    };
    OListPickerComponent.prototype.onDialogClose = function (evt) {
        this.dialogRef = null;
        this.visibleInputValue = undefined;
        if (evt instanceof Object && typeof evt[this.valueColumn] !== 'undefined') {
            var self_2 = this;
            window.setTimeout(function () {
                self_2.setValue(evt[self_2.valueColumn], { changeType: OValueChangeEvent.USER_CHANGE });
                if (self_2._fControl) {
                    self_2._fControl.markAsTouched();
                    self_2._fControl.markAsDirty();
                }
                self_2.onDialogAccept.emit();
            }, 0);
        }
        else {
            this.onDialogCancel.emit();
        }
    };
    OListPickerComponent.prototype.innerOnBlur = function (evt) {
        if (!this.isReadOnly && this.enabled) {
            var self_3 = this;
            this.blurTimer = setTimeout(function () {
                if (!self_3.blurPrevent) {
                    self_3._fControl.markAsTouched();
                    self_3.onBlur.emit(evt);
                    if (self_3.visibleInputValue !== undefined && self_3.visibleInputValue.length > 0) {
                        self_3.openDialog();
                    }
                    else if (self_3.visibleInputValue !== undefined) {
                        self_3.setValue(undefined);
                        self_3.visibleInputValue = undefined;
                    }
                    else {
                        self_3._fControl.markAsTouched();
                    }
                }
                self_3.blurPrevent = false;
            }, this.blurDelay);
        }
    };
    OListPickerComponent.prototype.onVisibleInputChange = function (event) {
        this.visibleInputValue = event.target.value;
    };
    OListPickerComponent.prototype.onKeydownEnter = function (val) {
        clearTimeout(this.blurTimer);
        this.blurPrevent = true;
        this.visibleInputValue = val;
        this.openDialog();
    };
    OListPickerComponent.prototype.setFormValue = function (val, options, setDirty) {
        if (setDirty === void 0) { setDirty = false; }
        _super.prototype.setFormValue.call(this, val, options, setDirty);
        this.stateCtrl.setValue(this.getDescriptionValue());
    };
    OListPickerComponent.prototype.openDialog = function () {
        var _this = this;
        var cfg = {
            role: 'dialog',
            disableClose: this.dialogDisableClose,
            panelClass: ['cdk-overlay-list-picker', 'o-dialog-class', this.dialogClass],
            data: {
                data: this.getDialogDataArray(this.dataArray),
                filter: this.filter,
                searchVal: this.visibleInputValue,
                menuColumns: this.visibleColumns,
                visibleColumns: this.visibleColArray,
                queryRows: this.queryRows
            }
        };
        if (this.dialogWidth !== undefined) {
            cfg.width = this.dialogWidth;
        }
        if (this.dialogHeight !== undefined) {
            cfg.height = this.dialogHeight;
        }
        this.dialogRef = this.matDialog.open(OListPickerDialogComponent, cfg);
        this.dialogRef.afterClosed().subscribe(function (result) {
            _this.onDialogClose(result);
        });
    };
    OListPickerComponent.prototype.getDialogDataArray = function (dataArray) {
        var result = [];
        var self = this;
        dataArray.forEach(function (item, itemIndex) {
            var element = '';
            self.visibleColArray.forEach(function (visibleCol, index) {
                element += item[visibleCol];
                if ((index + 1) < self.visibleColArray.length) {
                    element += self.separator;
                }
            });
            var newItem = Object.assign({}, item);
            newItem['_parsedVisibleColumnText'] = element;
            newItem['_parsedIndex'] = itemIndex;
            result.push(newItem);
        });
        return result;
    };
    OListPickerComponent.DEFAULT_INPUTS_O_LIST_PICKER = DEFAULT_INPUTS_O_LIST_PICKER;
    OListPickerComponent.DEFAULT_OUTPUTS_O_LIST_PICKER = DEFAULT_OUTPUTS_O_LIST_PICKER;
    OListPickerComponent.decorators = [
        { type: Component, args: [{
                    moduleId: module.id,
                    selector: 'o-list-picker',
                    template: "\n    <div (click)=\"onClickInput($event)\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\" [formGroup]=\"getFormGroup()\"\n      [matTooltip]=\"tooltip\" [matTooltipClass]=\"tooltipClass\" [matTooltipPosition]=\"tooltipPosition\"\n      [matTooltipShowDelay]=\"tooltipShowDelay\" [matTooltipHideDelay]=\"tooltipHideDelay\"\n      class=\"custom-error o-list-picker-content\">\n      <input #inputModel class=\"input-model\" type=\"text\" [id]=\"getAttribute()\" [formControlName]=\"getAttribute()\">\n\n      <mat-form-field [appearance]=\"appearance\" [floatLabel]=\"floatLabel\" [class.custom-width]=\"hasCustomWidth\"\n        [hideRequiredMarker]=\"hideRequiredMarker\" class=\"icon-field\" #innerInputContainer fxFlexFill>\n        <mat-label *ngIf=\"labelVisible\">{{ olabel | oTranslate }}</mat-label>\n        <input #visibleInput matInput type=\"text\" [attr.id]=\"'desc_' + getAttribute()\" [id]=\"'desc_' + getAttribute()\"\n          [formControl]=\"stateCtrl\" [placeholder]=\"placeHolder\" [value]=\"getDescriptionValue()\"\n          (input)=\"onVisibleInputChange($event)\" (focus)=\"innerOnFocus($event)\" (blur)=\"innerOnBlur($event)\"\n          [readonly]=\"isReadOnly || !textInputEnabled\" [required]=\"isRequired\"\n          (keydown.enter)=\"onKeydownEnter(visibleInput.value)\" (change)=\"onChangeEvent($event)\">\n\n        <button type=\"button\" [disabled]=\"isReadOnly || !enabled\" [class.read-only]=\"isReadOnly\" matSuffix mat-icon-button\n          (click)=\"onClickListpicker($event)\">\n          <mat-icon svgIcon=\"ontimize:search\"></mat-icon>\n        </button>\n\n        <button type=\"button\" [disabled]=\"isReadOnly || !enabled\" [class.read-only]=\"isReadOnly\" matSuffix mat-icon-button\n          (click)=\"onClickClearValue($event)\" *ngIf=\"showClearButton\">\n          <mat-icon svgIcon=\"ontimize:clear\"></mat-icon>\n        </button>\n\n        <mat-error *ngIf=\"hasError('required')\" text=\"{{ 'FORM_VALIDATION.REQUIRED' | oTranslate }}\"></mat-error>\n        <mat-error *ngFor=\"let oError of getActiveOErrors()\" text=\"{{ oError.text | oTranslate }}\"></mat-error>\n      </mat-form-field>\n    </div>\n  ",
                    styles: ["\n    .o-list-picker-content .input-model{display:none !important}.o-list-picker-content .mat-button.mat-disabled{cursor:default}\n  "],
                    providers: [
                        { provide: OntimizeService, useFactory: Éµ0, deps: [Injector] },
                        { provide: OFormServiceComponent, useExisting: forwardRef(function () { return OListPickerComponent; }) }
                    ],
                    inputs: DEFAULT_INPUTS_O_LIST_PICKER,
                    outputs: DEFAULT_OUTPUTS_O_LIST_PICKER
                },] },
    ];
    OListPickerComponent.ctorParameters = function () { return [
        { type: OFormComponent, decorators: [{ type: Optional }, { type: Inject, args: [forwardRef(function () { return OFormComponent; }),] }] },
        { type: ElementRef },
        { type: Injector }
    ]; };
    OListPickerComponent.propDecorators = {
        inputModel: [{ type: ViewChild, args: ['inputModel',] }],
        visibleInput: [{ type: ViewChild, args: ['visibleInput',] }]
    };
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OListPickerComponent.prototype, "textInputEnabled", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OListPickerComponent.prototype, "dialogDisableClose", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OListPickerComponent.prototype, "filter", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Number)
    ], OListPickerComponent.prototype, "queryRows", void 0);
    return OListPickerComponent;
}(OFormServiceComponent));
export { OListPickerComponent };
var OListPickerModule = (function () {
    function OListPickerModule() {
    }
    OListPickerModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [OListPickerDialogComponent, OListPickerComponent],
                    imports: [CommonModule, ODialogModule, OSearchInputModule, OSharedModule],
                    exports: [OListPickerComponent],
                    entryComponents: [OListPickerDialogComponent]
                },] },
    ];
    return OListPickerModule;
}());
export { OListPickerModule };
export { Éµ0 };
//# sourceMappingURL=o-list-picker.component.js.map