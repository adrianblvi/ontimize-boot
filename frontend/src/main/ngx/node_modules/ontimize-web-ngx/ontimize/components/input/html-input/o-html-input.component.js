var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { ChangeDetectorRef, Component, ElementRef, Injector, NgModule, ViewChild } from '@angular/core';
import { animate, state, style, transition, trigger } from '@angular/animations';
import { CommonModule } from '@angular/common';
import { Validators } from '@angular/forms';
import { MatTab, MatTabGroup } from '@angular/material';
import { OSharedModule } from '../../../shared/shared.module';
import { NumberConverter } from '../../../decorators';
import { OFormComponent } from '../../form/form-components';
import { CKEditorComponent, CKEditorModule } from '../../material/ckeditor/ck-editor.component';
import { OFormDataComponent, DEFAULT_INPUTS_O_FORM_DATA_COMPONENT } from '../../o-form-data-component.class';
export var DEFAULT_INPUTS_O_HTML_INPUT = [
    'oattr: attr',
    'data',
    'autoBinding: automatic-binding',
    'autoRegistering: automatic-registering',
    'orequired: required',
    'minLength: min-length',
    'maxLength: max-length',
    'readOnly: read-only',
    'sqlType: sql-type'
];
export var DEFAULT_OUTPUTS_O_HTML_INPUT = DEFAULT_INPUTS_O_FORM_DATA_COMPONENT.concat([
    'onFocus',
    'onBlur'
]);
var OHTMLInputComponent = (function (_super) {
    __extends(OHTMLInputComponent, _super);
    function OHTMLInputComponent(form, elRef, injector) {
        var _this = _super.call(this, form, elRef, injector) || this;
        _this._minLength = -1;
        _this._maxLength = -1;
        _this._subscriptAnimationState = '';
        _this.form = form;
        _this.elRef = elRef;
        _this._changeDetectorRef = _this.injector.get(ChangeDetectorRef);
        try {
            _this.tabGroupContainer = _this.injector.get(MatTabGroup);
            _this.tabContainer = _this.injector.get(MatTab);
        }
        catch (error) {
        }
        return _this;
    }
    OHTMLInputComponent.prototype.ngOnInit = function () {
        _super.prototype.ngOnInit.call(this);
        if (this.form) {
            var self = this;
            this.form.beforeCloseDetail.subscribe(function (evt) {
                self.destroyCKEditor();
            });
            this.form.beforeGoEditMode.subscribe(function (evt) {
                self.destroyCKEditor();
            });
        }
        if (this.tabGroupContainer) {
            this.tabGroupContainer.selectedTabChange.subscribe(function (evt) {
                self.destroyCKEditor();
                if (self.isInActiveTab()) {
                    self.ckEditor.initCKEditor(self.oattr);
                }
            });
        }
    };
    OHTMLInputComponent.prototype.ngAfterViewInit = function () {
        _super.prototype.ngAfterViewInit.call(this);
        this._subscriptAnimationState = 'enter';
        this._changeDetectorRef.detectChanges();
    };
    OHTMLInputComponent.prototype.hasError = function (error) {
        var result = _super.prototype.hasError.call(this, error);
        this._subscriptAnimationState = result ? 'enter' : 'void';
        return result;
    };
    OHTMLInputComponent.prototype.isInActiveTab = function () {
        var result = !(this.tabGroupContainer && this.tabContainer);
        if (!result) {
            var self = this;
            this.tabGroupContainer._tabs.forEach(function (tab, index) {
                if (tab === self.tabContainer) {
                    result = (self.tabGroupContainer.selectedIndex === index);
                }
            });
        }
        return result;
    };
    OHTMLInputComponent.prototype.resolveValidators = function () {
        var validators = _super.prototype.resolveValidators.call(this);
        if (this.minLength >= 0) {
            validators.push(Validators.minLength(this.minLength));
        }
        if (this.maxLength >= 0) {
            validators.push(Validators.maxLength(this.maxLength));
        }
        return validators;
    };
    OHTMLInputComponent.prototype.clearValue = function () {
        _super.prototype.clearValue.call(this);
        this.ckEditor.instance.updateElement();
        this.ckEditor.instance.setData('');
    };
    OHTMLInputComponent.prototype.destroyCKEditor = function () {
        if (this.ckEditor) {
            this.ckEditor.destroyCKEditor();
        }
    };
    OHTMLInputComponent.prototype.getCKEditor = function () {
        return this.ckEditor.instance;
    };
    Object.defineProperty(OHTMLInputComponent.prototype, "minLength", {
        get: function () {
            return this._minLength;
        },
        set: function (val) {
            var old = this._minLength;
            this._minLength = NumberConverter(val);
            if (val !== old) {
                this.updateValidators();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OHTMLInputComponent.prototype, "maxLength", {
        get: function () {
            return this._maxLength;
        },
        set: function (val) {
            var old = this._maxLength;
            this._maxLength = NumberConverter(val);
            if (val !== old) {
                this.updateValidators();
            }
        },
        enumerable: true,
        configurable: true
    });
    OHTMLInputComponent.DEFAULT_INPUTS_O_HTML_INPUT = DEFAULT_INPUTS_O_HTML_INPUT;
    OHTMLInputComponent.DEFAULT_OUTPUTS_O_HTML_INPUT = DEFAULT_OUTPUTS_O_HTML_INPUT;
    OHTMLInputComponent.decorators = [
        { type: Component, args: [{
                    moduleId: module.id,
                    selector: 'o-html-input',
                    template: "\n    <div [formGroup]=\"getFormGroup()\" class=\"mat-form-field mat-form-field\" fxFill>\n      <div class=\"mat-form-field-wrapper mat-form-field-wrapper\">\n        <ck-editor #ckEditor [id]=\"getAttribute()\" [formControlName]=\"getAttribute()\" (focus)=\"innerOnFocus($event)\" (blur)=\"innerOnBlur($event)\" \n        (change)=\"onChangeEvent($event)\"  [required]=\"isRequired\" [readonly]=\"isReadOnly\" class=\"mat-form-field-flex mat-form-field-flex\" fxFill></ck-editor>\n        <div class=\"mat-form-field-subscript-wrapper mat-form-field-subscript-wrapper\">\n          <div class=\"ng-trigger ng-trigger-transitionMessages\" [@transitionMessages]=\"_subscriptAnimationState\">\n            <mat-error *ngIf=\"hasError('required')\" text=\"{{ 'FORM_VALIDATION.REQUIRED' | oTranslate }}\"></mat-error>\n            <mat-error *ngIf=\"hasError('minlength')\" text=\"{{ 'FORM_VALIDATION.MIN_LENGTH' | oTranslate }}: {{\n              getErrorValue('minlength', 'requiredLength') }}\"></mat-error>\n            <mat-error *ngIf=\"hasError('maxlength')\" text=\"{{ 'FORM_VALIDATION.MAX_LENGTH' | oTranslate }}: {{\n              getErrorValue('maxlength', 'requiredLength') }}\"></mat-error>\n            <mat-error *ngFor=\"let oError of getActiveOErrors()\"> {{ oError.text | oTranslate }} \"></mat-error>\n          </div>\n        </div>\n      </div>\n    </div>\n  ",
                    styles: ["\n    .mat-form-field-wrapper{position:relative}.mat-form-field-subscript-wrapper{position:absolute;width:100%;overflow:hidden}\n  "],
                    inputs: DEFAULT_INPUTS_O_HTML_INPUT,
                    outputs: DEFAULT_OUTPUTS_O_HTML_INPUT,
                    animations: [
                        trigger('transitionMessages', [
                            state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),
                            transition('void => enter', [
                                style({ opacity: 0, transform: 'translateY(-100%)' }),
                                animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),
                            ]),
                        ])
                    ]
                },] },
    ];
    OHTMLInputComponent.ctorParameters = function () { return [
        { type: OFormComponent },
        { type: ElementRef },
        { type: Injector }
    ]; };
    OHTMLInputComponent.propDecorators = {
        ckEditor: [{ type: ViewChild, args: ['ckEditor',] }]
    };
    return OHTMLInputComponent;
}(OFormDataComponent));
export { OHTMLInputComponent };
var OHTMLInputModule = (function () {
    function OHTMLInputModule() {
    }
    OHTMLInputModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [OHTMLInputComponent],
                    imports: [CKEditorModule, CommonModule, OSharedModule],
                    exports: [OHTMLInputComponent]
                },] },
    ];
    return OHTMLInputModule;
}());
export { OHTMLInputModule };
//# sourceMappingURL=o-html-input.component.js.map