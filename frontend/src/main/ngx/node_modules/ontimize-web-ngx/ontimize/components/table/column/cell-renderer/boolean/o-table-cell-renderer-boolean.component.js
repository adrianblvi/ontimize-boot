var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Component, Injector, ViewChild, TemplateRef, ChangeDetectionStrategy } from '@angular/core';
import { OTranslateService } from '../../../../../services';
import { Util } from '../../../../../utils';
import { OBaseTableCellRenderer } from '../o-base-table-cell-renderer.class';
export var DEFAULT_INPUTS_O_TABLE_CELL_RENDERER_BOOLEAN = [
    'trueValue: true-value',
    'falseValue: false-value',
    'booleanType: boolean-type',
    'renderTrueValue: render-true-value',
    'renderFalseValue: render-false-value',
    'renderType: render-type'
];
var OTableCellRendererBooleanComponent = (function (_super) {
    __extends(OTableCellRendererBooleanComponent, _super);
    function OTableCellRendererBooleanComponent(injector) {
        var _this = _super.call(this, injector) || this;
        _this.injector = injector;
        _this._renderType = 'string';
        _this._booleanType = 'boolean';
        _this.tableColumn.type = 'boolean';
        _this.translateService = _this.injector.get(OTranslateService);
        return _this;
    }
    OTableCellRendererBooleanComponent.prototype.ngOnInit = function () {
        this.parseInputs();
    };
    OTableCellRendererBooleanComponent.prototype.parseInputs = function () {
        switch (this.booleanType) {
            case 'string':
                this.parseStringInputs();
                break;
            case 'number':
                this.parseNumberInputs();
                break;
            default:
                this.trueValue = true;
                this.falseValue = false;
                break;
        }
    };
    OTableCellRendererBooleanComponent.prototype.parseStringInputs = function () {
        if ((this.trueValue || '').length === 0) {
            this.trueValue = undefined;
        }
        if ((this.falseValue || '').length === 0) {
            this.falseValue = undefined;
        }
    };
    OTableCellRendererBooleanComponent.prototype.parseNumberInputs = function () {
        this.trueValue = parseInt(this.trueValue);
        if (isNaN(this.trueValue)) {
            this.trueValue = 1;
        }
        this.falseValue = parseInt(this.falseValue);
        if (isNaN(this.falseValue)) {
            this.falseValue = 0;
        }
    };
    OTableCellRendererBooleanComponent.prototype.hasCellDataTrueValue = function (cellData) {
        var result = undefined;
        if (Util.isDefined(cellData)) {
            result = (cellData === this.trueValue);
            if (this.booleanType === 'string' && !Util.isDefined(this.trueValue)) {
                result = Util.parseBoolean(cellData, false);
            }
        }
        return result;
    };
    OTableCellRendererBooleanComponent.prototype.getCellData = function (cellvalue, rowvalue) {
        var result = cellvalue;
        var cellIsTrue = this.hasCellDataTrueValue(cellvalue);
        var value = cellIsTrue ? this.trueValue : this.falseValue;
        switch (this.renderType) {
            case 'string':
                result = this.translateService.get(value);
                break;
            case 'number':
                result = value;
                break;
            default:
                break;
        }
        return result;
    };
    Object.defineProperty(OTableCellRendererBooleanComponent.prototype, "booleanType", {
        get: function () {
            return this._booleanType;
        },
        set: function (arg) {
            arg = (arg || '').toLowerCase();
            if (['number', 'boolean', 'string'].indexOf(arg) === -1) {
                arg = 'boolean';
            }
            this._booleanType = arg;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableCellRendererBooleanComponent.prototype, "renderType", {
        get: function () {
            return this._renderType;
        },
        set: function (arg) {
            arg = (arg || '').toLowerCase();
            if (['string', 'number', 'icon', 'image'].indexOf(arg) === -1) {
                arg = 'string';
            }
            this._renderType = arg;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableCellRendererBooleanComponent.prototype, "renderTrueValue", {
        get: function () {
            return this._renderTrueValue || this.trueValue;
        },
        set: function (arg) {
            this._renderTrueValue = arg;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableCellRendererBooleanComponent.prototype, "renderFalseValue", {
        get: function () {
            return this._renderFalseValue || this.falseValue;
        },
        set: function (arg) {
            this._renderFalseValue = arg;
        },
        enumerable: true,
        configurable: true
    });
    OTableCellRendererBooleanComponent.DEFAULT_INPUTS_O_TABLE_CELL_RENDERER_BOOLEAN = DEFAULT_INPUTS_O_TABLE_CELL_RENDERER_BOOLEAN;
    OTableCellRendererBooleanComponent.decorators = [
        { type: Component, args: [{
                    moduleId: module.id,
                    selector: 'o-table-cell-renderer-boolean',
                    template: "\n    <ng-template #templateref let-cellvalue=\"cellvalue\">\n      <ng-container *ngIf=\"hasCellDataTrueValue(cellvalue)\">\n        <ng-container [ngSwitch]=\"renderType\">\n          <ng-container *ngSwitchCase=\"'number'\">{{ renderTrueValue }}</ng-container>\n          <ng-container *ngSwitchCase=\"'icon'\">\n            <mat-icon class=\"material-icons\"> {{ renderTrueValue }}</mat-icon>\n          </ng-container>\n          <ng-container *ngSwitchCase=\"'image'\">\n            <img [src]=\"renderTrueValue\" />\n          </ng-container>\n          <span *ngSwitchDefault>{{ renderTrueValue | oTranslate }}</span>\n        </ng-container>\n      </ng-container>\n      <ng-container *ngIf=\"!hasCellDataTrueValue(cellvalue)\">\n        <ng-container [ngSwitch]=\"renderType\">\n          <ng-container *ngSwitchCase=\"'number'\">{{ renderFalseValue }}</ng-container>\n          <ng-container *ngSwitchCase=\"'icon'\">\n            <mat-icon class=\"material-icons\"> {{ renderFalseValue }}</mat-icon>\n          </ng-container>\n          <ng-container *ngSwitchCase=\"'image'\">\n            <img [src]=\"renderFalseValue\" />\n          </ng-container>\n          <ng-container *ngSwitchDefault>{{ renderFalseValue | oTranslate}}</ng-container>\n        </ng-container>\n      </ng-container>\n    </ng-template>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    inputs: DEFAULT_INPUTS_O_TABLE_CELL_RENDERER_BOOLEAN
                },] },
    ];
    OTableCellRendererBooleanComponent.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    OTableCellRendererBooleanComponent.propDecorators = {
        templateref: [{ type: ViewChild, args: ['templateref', { read: TemplateRef },] }]
    };
    return OTableCellRendererBooleanComponent;
}(OBaseTableCellRenderer));
export { OTableCellRendererBooleanComponent };
//# sourceMappingURL=o-table-cell-renderer-boolean.component.js.map