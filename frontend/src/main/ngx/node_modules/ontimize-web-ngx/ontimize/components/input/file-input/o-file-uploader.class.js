import { Codes } from '../../../utils';
var OFileUploader = (function () {
    function OFileUploader(service, entity) {
        this.service = service;
        this.files = [];
        this.isUploading = false;
        this.progress = 0;
        this.nextIndex = 0;
        this.splitUpload = true;
        this.entity = entity;
    }
    OFileUploader.prototype.addFile = function (fileItem) {
        this.files.push(fileItem);
        this.progress = this._getTotalProgress();
    };
    OFileUploader.prototype.clear = function () {
        this.cancel();
        while (this.files.length) {
            this.files[0].remove();
        }
        this.progress = 0;
    };
    OFileUploader.prototype.removeFile = function (value) {
        var index = this.getIndexOfItem(value);
        var item = this.files[index];
        if (item) {
            if (item.isUploading) {
                item.cancel();
            }
            this.files.splice(index, 1);
            this.progress = this._getTotalProgress();
        }
    };
    OFileUploader.prototype.upload = function () {
        var _this = this;
        this.files.map(function (item) {
            if (item.pendingUpload) {
                item.prepareToUpload();
            }
        });
        if (this.splitUpload) {
            this.files.map(function (item) {
                if (item.pendingUpload) {
                    _this.uploadItem(item);
                }
            });
        }
        else {
            this.uploadItems(this.files);
        }
    };
    OFileUploader.prototype.uploadItem = function (item) {
        item.prepareToUpload();
        if (this.isUploading || item.isUploading) {
            return;
        }
        this.isUploading = true;
        item.isUploading = true;
        this._onBeforeUploadItem(item);
        if (this.service === undefined) {
            console.warn('No service configured! aborting upload');
            return;
        }
        if (this._uploadSuscription) {
            this._uploadSuscription.unsubscribe();
        }
        var self = this;
        this._uploadSuscription = item._uploadSuscription = this.service.upload([item], this.entity, this.data).subscribe(function (resp) {
            if (resp.loaded && resp.total) {
                var progress = Math.round(resp.loaded * 100 / resp.total);
                self._onProgressItem(item, progress);
            }
            else if (resp.code === Codes.ONTIMIZE_SUCCESSFUL_CODE) {
                self._onSuccessItem(item, resp);
            }
            else {
                console.error('uploadItem error');
                self._onErrorItem(item, 'Unknow error');
            }
        }, function (err) { return self._onErrorItem(item, err); }, function () { return self._onCompleteItem(item); });
    };
    OFileUploader.prototype.uploadItems = function (items) {
        if (this.isUploading || items.some(function (item) { return item.isUploading; })) {
            return;
        }
        this.isUploading = true;
        this._onBeforeUploadAll();
        if (this.service === undefined) {
            console.warn('No service configured! aborting upload');
            return;
        }
        if (this._uploadSuscription) {
            this._uploadSuscription.unsubscribe();
        }
        var self = this;
        this._uploadSuscription = this.service.upload(items, this.entity, this.data).subscribe(function (resp) {
            if (resp.loaded && resp.total) {
                var progress = Math.round(resp.loaded * 100 / resp.total);
                self._onProgressAll(progress);
            }
            else if (resp.code === Codes.ONTIMIZE_SUCCESSFUL_CODE) {
                self._onSuccessAll(resp);
            }
            else {
                console.error('uploadItems error');
            }
        }, function (err) { return self._onErrorAll(err); }, function () { return self._onCompleteAll(); });
    };
    OFileUploader.prototype.cancel = function () {
        if (this.splitUpload) {
            this.files.map(function (item) { return item.cancel(); });
        }
        else {
            if (this._uploadSuscription) {
                this._uploadSuscription.unsubscribe();
            }
            this._onCancelAll();
            this._onCompleteAll();
        }
    };
    OFileUploader.prototype.cancelItem = function (value) {
        var index = this.getIndexOfItem(value);
        var item = this.files[index];
        if (item && item.isUploading && this.splitUpload) {
            item._uploadSuscription.unsubscribe();
        }
        this._onCancelItem(item);
        this._onCompleteItem(item);
    };
    OFileUploader.prototype.getNotUploadedItems = function () {
        return this.files.filter(function (item) { return !item.isUploaded; });
    };
    OFileUploader.prototype.getIndexOfItem = function (value) {
        return typeof value === 'number' ? value : this.files.indexOf(value);
    };
    OFileUploader.prototype.onBeforeUploadItem = function (fileItem) {
        return { fileItem: fileItem };
    };
    OFileUploader.prototype.onBeforeUploadAll = function () {
        return {};
    };
    OFileUploader.prototype.onProgressItem = function (fileItem, progress) {
        return { fileItem: fileItem, progress: progress };
    };
    OFileUploader.prototype.onProgressAll = function (progress) {
        return { progress: progress };
    };
    OFileUploader.prototype.onCancelItem = function (fileItem) {
        return { fileItem: fileItem };
    };
    OFileUploader.prototype.onCancelAll = function () {
        return {};
    };
    OFileUploader.prototype.onSuccessItem = function (fileItem, response) {
        return { fileItem: fileItem, response: response };
    };
    OFileUploader.prototype.onSuccessAll = function (response) {
        return { response: response };
    };
    OFileUploader.prototype.onErrorItem = function (fileItem, error) {
        return { fileItem: fileItem, error: error };
    };
    OFileUploader.prototype.onErrorAll = function (error) {
        return { error: error };
    };
    OFileUploader.prototype.onCompleteItem = function (fileItem) {
        return { fileItem: fileItem };
    };
    OFileUploader.prototype.onCompleteAll = function () {
        return void 0;
    };
    OFileUploader.prototype._onBeforeUploadItem = function (item) {
        item._onBeforeUpload();
        this.onBeforeUploadItem(item);
    };
    OFileUploader.prototype._onBeforeUploadAll = function () {
        this.files.map(function (item) { return item._onBeforeUpload(false); });
        this.onBeforeUploadAll();
    };
    OFileUploader.prototype._onProgressItem = function (item, progress) {
        var total = this._getTotalProgress(progress);
        this.progress = total;
        item._onProgress(progress);
        this.onProgressItem(item, progress);
        this.onProgressAll(total);
    };
    OFileUploader.prototype._onProgressAll = function (progress) {
        var total = this._getTotalProgress(progress);
        this.progress = total;
        this.onProgressAll(total);
    };
    OFileUploader.prototype._onSuccessItem = function (item, response) {
        item._onSuccess(response);
        this.onSuccessItem(item, response);
    };
    OFileUploader.prototype._onSuccessAll = function (response) {
        this.files.map(function (item) { return item._onSuccess(response, false); });
        this.onSuccessAll(response);
    };
    OFileUploader.prototype._onErrorItem = function (item, error) {
        item._onError(error);
        this.onErrorItem(item, error);
    };
    OFileUploader.prototype._onErrorAll = function (error) {
        this.files.map(function (item) { return item._onError(error, false); });
        this.onErrorAll(error);
    };
    OFileUploader.prototype._onCancelItem = function (item) {
        item._onCancel();
        this.onCancelItem(item);
    };
    OFileUploader.prototype._onCancelAll = function () {
        this.files.map(function (item) { return item._onCancel(false); });
        this.onCancelAll();
    };
    OFileUploader.prototype._onCompleteItem = function (item) {
        item._onComplete();
        this.onCompleteItem(item);
        var nextItem = this._getReadyItems()[0];
        this.isUploading = false;
        if (nextItem) {
            nextItem.upload();
            return;
        }
        this.onCompleteAll();
        this.progress = this._getTotalProgress();
    };
    OFileUploader.prototype._onCompleteAll = function () {
        this.files.map(function (item) { return item._onComplete(false); });
        this.isUploading = false;
        this.onCompleteAll();
        this.progress = this._getTotalProgress();
    };
    OFileUploader.prototype._getReadyItems = function () {
        return this.files
            .filter(function (item) { return (item.isReady && !item.isUploading); })
            .sort(function (item1, item2) { return item1.index - item2.index; });
    };
    OFileUploader.prototype._getTotalProgress = function (value) {
        if (value === void 0) { value = 0; }
        var notUploaded = this.getNotUploadedItems().length;
        var uploaded = notUploaded ? this.files.length - notUploaded : this.files.length;
        var ratio = this.splitUpload ? 100 / this.files.length : 100;
        var current = value * ratio / 100;
        return Math.round(uploaded * ratio + current);
    };
    return OFileUploader;
}());
export { OFileUploader };
//# sourceMappingURL=o-file-uploader.class.js.map