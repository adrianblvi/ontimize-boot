var OFileItem = (function () {
    function OFileItem(file, uploader) {
        this.index = void 0;
        this.isReady = false;
        this.isUploading = false;
        this.isUploaded = false;
        this.isSuccess = false;
        this.isCancel = false;
        this.isError = false;
        this.progress = 0;
        this._file = file;
        this.uploader = uploader;
    }
    OFileItem.prototype.upload = function () {
        this.uploader.uploadItem(this);
    };
    OFileItem.prototype.cancel = function () {
        this.uploader.cancelItem(this);
    };
    OFileItem.prototype.remove = function () {
        this.uploader.removeFile(this);
    };
    OFileItem.prototype.prepareToUpload = function () {
        this.index = this.index || ++this.uploader.nextIndex;
        this.isReady = true;
    };
    Object.defineProperty(OFileItem.prototype, "file", {
        get: function () {
            return this._file;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OFileItem.prototype, "name", {
        get: function () {
            return this._file.name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OFileItem.prototype, "size", {
        get: function () {
            return this._file.size;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OFileItem.prototype, "type", {
        get: function () {
            return this._file.type;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OFileItem.prototype, "lastModifiedDate", {
        get: function () {
            return this._file.lastModifiedDate;
        },
        enumerable: true,
        configurable: true
    });
    OFileItem.prototype._onBeforeUpload = function (notify) {
        if (notify === void 0) { notify = true; }
        this.isReady = true;
        this.isUploading = true;
        this.isUploaded = false;
        this.isSuccess = false;
        this.isCancel = false;
        this.isError = false;
        this.progress = 0;
        if (notify) {
            this.onBeforeUpload();
        }
    };
    OFileItem.prototype._onProgress = function (progress) {
        this.progress = progress;
        this.onProgress(progress);
    };
    OFileItem.prototype._onSuccess = function (data, notify) {
        if (notify === void 0) { notify = true; }
        this.index = void 0;
        this.isReady = false;
        this.isUploading = false;
        this.isUploaded = true;
        this.isSuccess = true;
        this.isCancel = false;
        this.isError = false;
        this.progress = 100;
        if (notify) {
            this.onSuccess(data);
        }
    };
    OFileItem.prototype._onError = function (error, notify) {
        if (notify === void 0) { notify = true; }
        this.index = void 0;
        this.isReady = false;
        this.isUploading = false;
        this.isUploaded = true;
        this.isSuccess = false;
        this.isCancel = false;
        this.isError = true;
        this.progress = 0;
        if (notify) {
            this.onError(error);
        }
    };
    OFileItem.prototype._onCancel = function (notify) {
        if (notify === void 0) { notify = true; }
        this.isReady = false;
        this.isUploading = false;
        this.isUploaded = false;
        this.isSuccess = false;
        this.isCancel = true;
        this.isError = false;
        this.progress = 0;
        this.index = void 0;
        if (notify) {
            this.onCancel();
        }
    };
    OFileItem.prototype._onComplete = function (notify) {
        if (notify === void 0) { notify = true; }
        if (notify) {
            this.onComplete();
        }
    };
    OFileItem.prototype.onBeforeUpload = function () {
        return {};
    };
    OFileItem.prototype.onProgress = function (progress) {
        return { progress: progress };
    };
    OFileItem.prototype.onSuccess = function (data) {
        return { data: data };
    };
    OFileItem.prototype.onError = function (error) {
        return { error: error };
    };
    OFileItem.prototype.onCancel = function () {
        return {};
    };
    OFileItem.prototype.onComplete = function () {
        return {};
    };
    Object.defineProperty(OFileItem.prototype, "pendingUpload", {
        get: function () {
            return !this.isUploaded && !this.isUploading && !this.isCancel;
        },
        enumerable: true,
        configurable: true
    });
    return OFileItem;
}());
export { OFileItem };
//# sourceMappingURL=o-file-item.class.js.map