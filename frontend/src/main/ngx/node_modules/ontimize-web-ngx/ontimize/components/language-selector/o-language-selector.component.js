var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, Injector, EventEmitter, NgModule, ViewEncapsulation } from '@angular/core';
import { CommonModule } from '@angular/common';
import { OSharedModule } from '../../shared';
import { OTranslateService } from '../../services';
import { AppConfig } from '../../config/app-config';
import { InputConverter } from '../../decorators';
import LocaleCode from '../../util/locale';
export var DEFAULT_INPUTS_O_LANGUAGE_SELECTOR = [
    'useFlagIcons: use-flag-icons'
];
export var DEFAULT_OUTPUTS_LANGUAGE_SELECTOR = [
    'onChange'
];
var OLanguageSelectorComponent = (function () {
    function OLanguageSelectorComponent(injector) {
        this.injector = injector;
        this.useFlagIcons = false;
        this.onChange = new EventEmitter();
        this.translateService = this.injector.get(OTranslateService);
        this.appConfig = this.injector.get(AppConfig);
        this.availableLangs = this.appConfig.getConfiguration().applicationLocales;
    }
    OLanguageSelectorComponent.prototype.getFlagClass = function (lang) {
        var flagName = LocaleCode.getCountryCode(lang);
        flagName = (flagName !== 'en') ? flagName : 'gb';
        return 'flag-icon-' + flagName;
    };
    OLanguageSelectorComponent.prototype.getAvailableLangs = function () {
        return this.availableLangs;
    };
    OLanguageSelectorComponent.prototype.configureI18n = function (lang) {
        if (this.translateService && this.translateService.getCurrentLang() !== lang) {
            this.translateService.use(lang);
        }
    };
    OLanguageSelectorComponent.prototype.getCurrentLang = function () {
        return this.translateService.getCurrentLang();
    };
    OLanguageSelectorComponent.prototype.getCurrentCountry = function () {
        return LocaleCode.getCountryCode(this.getCurrentLang());
    };
    OLanguageSelectorComponent.DEFAULT_INPUTS_O_LANGUAGE_SELECTOR = DEFAULT_INPUTS_O_LANGUAGE_SELECTOR;
    OLanguageSelectorComponent.DEFAULT_OUTPUTS_LANGUAGE_SELECTOR = DEFAULT_OUTPUTS_LANGUAGE_SELECTOR;
    OLanguageSelectorComponent.decorators = [
        { type: Component, args: [{
                    moduleId: module.id,
                    selector: 'o-language-selector',
                    inputs: DEFAULT_INPUTS_O_LANGUAGE_SELECTOR,
                    outputs: DEFAULT_OUTPUTS_LANGUAGE_SELECTOR,
                    template: "\n    <div fxLayout fxLayoutAlign=\"center center\" fxFill>\n      <button type=\"button\" *ngIf=\"useFlagIcons\" class=\"menu-button\" mat-icon-button [matMenuTriggerFor]=\"langMenu\">\n        <span class=\"flag-icon {{ getFlagClass(getCurrentCountry()) }}\"></span>\n      </button>\n\n      <button type=\"button\" *ngIf=\"!useFlagIcons\" class=\"menu-button o-language-selector-text\" mat-button [matMenuTriggerFor]=\"langMenu\">\n        <span>{{ 'LOCALE_' + getCurrentLang() | oTranslate }}</span>\n      </button>\n    </div>\n\n    <mat-menu #langMenu=\"matMenu\" yPosition=\"below\">\n      <button type=\"button\" mat-menu-item *ngFor=\"let lang of getAvailableLangs()\" (click)=\"configureI18n(lang)\">\n        <span *ngIf=\"useFlagIcons\" class=\"flag-icon {{ getFlagClass(lang) }}\"></span>\n        <span>{{ 'LOCALE_' + lang | oTranslate }}</span>\n      </button>\n    </mat-menu>\n  ",
                    styles: ["\n    .o-language-selector .menu-button{margin-left:6px}.o-language-selector .menu-button.o-language-selector-text{padding:0;min-width:40px}\n  "],
                    encapsulation: ViewEncapsulation.None,
                    host: {
                        '[class.o-language-selector]': 'true'
                    }
                },] },
    ];
    OLanguageSelectorComponent.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OLanguageSelectorComponent.prototype, "useFlagIcons", void 0);
    return OLanguageSelectorComponent;
}());
export { OLanguageSelectorComponent };
var OLanguageSelectorModule = (function () {
    function OLanguageSelectorModule() {
    }
    OLanguageSelectorModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [OLanguageSelectorComponent],
                    imports: [OSharedModule, CommonModule],
                    exports: [OLanguageSelectorComponent]
                },] },
    ];
    return OLanguageSelectorModule;
}());
export { OLanguageSelectorModule };
//# sourceMappingURL=o-language-selector.component.js.map