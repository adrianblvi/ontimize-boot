import { HostListener } from '@angular/core';
import { PermissionsUtils } from '../../util/permissions';
import { OTranslateService } from '../../services';
import { Util } from '../../utils';
export var DEFAULT_INPUTS_O_BASE_MENU_ITEM = [
    'title',
    'tooltip',
    'icon',
    'attr'
];
var OBaseMenuItemClass = (function () {
    function OBaseMenuItemClass(menu, elRef, injector) {
        var _this = this;
        this.menu = menu;
        this.elRef = elRef;
        this.injector = injector;
        this._isHovered = false;
        this.onMouseover = function () { return _this.isHovered = true; };
        this.onMouseout = function () { return _this.isHovered = false; };
        this.translateService = this.injector.get(OTranslateService);
    }
    OBaseMenuItemClass.prototype.ngOnInit = function () {
        var _this = this;
        if (!this.tooltip) {
            this.tooltip = this.title;
        }
        if (this.translateService) {
            this.onLanguageChangeSubscription = this.translateService.onLanguageChanged.subscribe(function () {
                _this.setDOMTitle();
            });
            this.setDOMTitle();
        }
        this.parsePermissions();
    };
    OBaseMenuItemClass.prototype.ngOnDestroy = function () {
        if (this.onLanguageChangeSubscription) {
            this.onLanguageChangeSubscription.unsubscribe();
        }
        if (this.mutationObserver) {
            this.mutationObserver.disconnect();
        }
    };
    OBaseMenuItemClass.prototype.setDOMTitle = function () {
        var tooltip = this.translateService.get(this.tooltip);
        this.elRef.nativeElement.setAttribute('title', tooltip);
    };
    OBaseMenuItemClass.prototype.parsePermissions = function () {
        this.permissions = this.menu.getPermissionsService().getMenuPermissions(this.attr);
        if (!Util.isDefined(this.permissions)) {
            return;
        }
        this.restricted = this.permissions.visible === false;
        this.disabled = this.permissions.enabled === false;
        if (this.disabled) {
            this.mutationObserver = PermissionsUtils.registerDisabledChangesInDom(this.elRef.nativeElement, {
                checkStringValue: true
            });
        }
    };
    Object.defineProperty(OBaseMenuItemClass.prototype, "isHovered", {
        get: function () {
            return this._isHovered;
        },
        set: function (val) {
            if (!this.disabled) {
                this._isHovered = val;
            }
        },
        enumerable: true,
        configurable: true
    });
    OBaseMenuItemClass.DEFAULT_INPUTS_O_BASE_MENU_ITEM = DEFAULT_INPUTS_O_BASE_MENU_ITEM;
    OBaseMenuItemClass.propDecorators = {
        onMouseover: [{ type: HostListener, args: ['mouseover',] }],
        onMouseout: [{ type: HostListener, args: ['mouseout',] }]
    };
    return OBaseMenuItemClass;
}());
export { OBaseMenuItemClass };
//# sourceMappingURL=o-base-menu-item.class.js.map