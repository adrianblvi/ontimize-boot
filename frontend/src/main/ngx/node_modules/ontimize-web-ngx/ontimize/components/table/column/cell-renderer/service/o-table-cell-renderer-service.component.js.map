{"version":3,"file":"o-table-cell-renderer-service.component.js","sourceRoot":"","sources":["../../../../../../../tmp/ontimize/components/table/column/cell-renderer/service/o-table-cell-renderer-service.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { ChangeDetectionStrategy, Component, Injector, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { DialogService, OntimizeService } from '../../../../../services';\nimport { dataServiceFactory } from '../../../../../services/data-service.provider';\nimport { Codes, Util } from '../../../../../utils';\nimport { ServiceUtils } from '../../../../service.utils';\nimport { OColumn } from '../../../o-table.component';\nimport { OBaseTableCellRenderer } from '../o-base-table-cell-renderer.class';\n\nexport const DEFAULT_INPUTS_O_TABLE_CELL_RENDERER_SERVICE = [\n  'entity',\n  'service',\n  'columns',\n  'valueColumn: value-column',\n  'parentKeys: parent-keys',\n  'queryMethod: query-method',\n  'serviceType : service-type'\n];\n\n@Component({\n  moduleId: module.id,\n  selector: 'o-table-cell-renderer-service',\n  template: `\n    <ng-template #templateref let-cellvalue=\"cellvalue\" let-rowvalue=\"rowvalue\">\n      {{ getDescriptionValue(cellvalue, rowvalue) }}{{ responseMap[cellvalue] }}\n    </ng-template>\n  `,\n  inputs: DEFAULT_INPUTS_O_TABLE_CELL_RENDERER_SERVICE,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [\n    // Service renderer must have its own service instance in order to avoid overriding table service configuration\n    { provide: OntimizeService, useFactory: dataServiceFactory, deps: [Injector] }\n  ]\n})\nexport class OTableCellRendererServiceComponent extends OBaseTableCellRenderer implements OnInit {\n\n  public static DEFAULT_INPUTS_O_TABLE_CELL_RENDERER_SERVICE = DEFAULT_INPUTS_O_TABLE_CELL_RENDERER_SERVICE;\n\n  @ViewChild('templateref', { read: TemplateRef }) public templateref: TemplateRef<any>;\n\n  public rowData: any;\n  public cellValues = [];\n  public renderValue: any;\n  public responseMap = {};\n\n  /* Inputs */\n  protected entity: string;\n  protected service: string;\n  protected columns: string;\n  protected valueColumn: string;\n  protected parentKeys: string;\n  protected queryMethod: string = Codes.QUERY_METHOD;\n  protected serviceType: string;\n\n  /* Internal variables */\n  protected colArray: string[] = [];\n  protected dataService: any;\n  protected _pKeysEquiv = {};\n  protected querySubscription: Subscription;\n  protected dialogService: DialogService;\n\n  protected editorSuscription: Subscription;\n\n  constructor(protected injector: Injector) {\n    super(injector);\n    this.tableColumn.type = 'service';\n    this.dialogService = injector.get(DialogService);\n  }\n\n  public ngOnInit(): void {\n    if (this.table) {\n      const oCol: OColumn = this.table.getOColumn(this.column);\n      oCol.definition.contentAlign = oCol.definition.contentAlign ? oCol.definition.contentAlign : 'center';\n    }\n\n    this.colArray = Util.parseArray(this.columns, true);\n    const pkArray = Util.parseArray(this.parentKeys);\n    this._pKeysEquiv = Util.parseParentKeysEquivalences(pkArray);\n    this.configureService();\n  }\n\n  public ngAfterViewInit(): void {\n    const oCol: OColumn = this.table.getOColumn(this.column);\n    if (Util.isDefined(oCol.editor)) {\n      const self = this;\n      this.editorSuscription = oCol.editor.onPostUpdateRecord.subscribe((data: any) => {\n        self.queryData(data[self.tableColumn.attr], data);\n      });\n    }\n  }\n\n  public ngOnDestroy(): void {\n    if (this.editorSuscription) {\n      this.editorSuscription.unsubscribe();\n    }\n  }\n\n  public getDescriptionValue(cellvalue: any, rowValue: any): string {\n    if (cellvalue !== undefined && this.cellValues.indexOf(cellvalue) === -1) {\n      this.queryData(cellvalue, rowValue);\n      this.cellValues.push(cellvalue);\n    }\n    return '';\n  }\n\n  public queryData(cellvalue, parentItem?: any): void {\n    const self = this;\n    if (!this.dataService || !(this.queryMethod in this.dataService) || !this.entity) {\n      console.warn('Service not properly configured! aborting query');\n      return;\n    }\n    const filter = ServiceUtils.getFilterUsingParentKeys(parentItem, this._pKeysEquiv);\n    const tableColAlias = Object.keys(this._pKeysEquiv).find(key => this._pKeysEquiv[key] === this.column);\n    if (Util.isDefined(tableColAlias)) {\n      if (!filter[tableColAlias]) {\n        filter[tableColAlias] = cellvalue;\n      }\n    } else {\n      filter[this.column] = cellvalue;\n    }\n    this.querySubscription = this.dataService[this.queryMethod](filter, this.colArray, this.entity).subscribe(resp => {\n      if (resp.code === Codes.ONTIMIZE_SUCCESSFUL_CODE) {\n        self.responseMap[cellvalue] = resp.data[0][self.valueColumn];\n      }\n    }, err => {\n      console.error(err);\n      if (err && typeof err !== 'object') {\n        this.dialogService.alert('ERROR', err);\n      } else {\n        this.dialogService.alert('ERROR', 'MESSAGES.ERROR_QUERY');\n      }\n    });\n  }\n\n  public configureService(): void {\n    let loadingService: any = OntimizeService;\n    if (this.serviceType) {\n      loadingService = this.serviceType;\n    }\n    try {\n      this.dataService = this.injector.get(loadingService);\n      if (Util.isDataService(this.dataService)) {\n        const serviceCfg = this.dataService.getDefaultServiceConfiguration(this.service);\n        if (this.entity) {\n          serviceCfg['entity'] = this.entity;\n        }\n        this.dataService.configureService(serviceCfg);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  public getCellData(cellvalue: any, rowvalue?: any): string {\n    return this.responseMap[cellvalue];\n  }\n\n}\n"]}