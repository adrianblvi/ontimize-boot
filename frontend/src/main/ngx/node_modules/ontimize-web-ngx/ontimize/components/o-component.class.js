import { BooleanConverter } from '../decorators';
import { OTranslateService } from '../services';
import { PermissionsUtils } from '../util/permissions';
import { Util } from '../utils';
var OBaseComponent = (function () {
    function OBaseComponent(injector) {
        this._enabled = true;
        this._orequired = false;
        this._tooltipPosition = 'below';
        this._tooltipShowDelay = 500;
        this._tooltipHideDelay = 0;
        this.injector = injector;
        if (this.injector) {
            this.translateService = this.injector.get(OTranslateService);
        }
    }
    OBaseComponent.prototype.initialize = function () {
        if (!Util.isDefined(this._olabel)) {
            this._olabel = this.oattr;
        }
        if (Util.isDefined(this.oplaceholder) && this.oplaceholder.length > 0) {
            this.oplaceholder = this.translateService.get(this.oplaceholder);
        }
    };
    OBaseComponent.prototype.getAttribute = function () {
        if (this.oattr) {
            return this.oattr;
        }
        return undefined;
    };
    OBaseComponent.prototype.setEnabled = function (value) {
        if (!PermissionsUtils.checkEnabledPermission(this.permissions)) {
            return;
        }
        var parsedValue = BooleanConverter(value);
        this._enabled = parsedValue;
    };
    Object.defineProperty(OBaseComponent.prototype, "placeHolder", {
        get: function () {
            return this.oplaceholder;
        },
        set: function (value) {
            this.oplaceholder = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OBaseComponent.prototype, "tooltipClass", {
        get: function () {
            return this.getTooltipClass();
        },
        enumerable: true,
        configurable: true
    });
    OBaseComponent.prototype.getTooltipClass = function () {
        return "o-tooltip " + this.tooltipPosition;
    };
    OBaseComponent.prototype.getTooltipText = function () {
        if (Util.isDefined(this._tooltip) && this.translateService) {
            return this.translateService.get(this._tooltip);
        }
        return this._tooltip;
    };
    Object.defineProperty(OBaseComponent.prototype, "tooltip", {
        get: function () {
            return this.getTooltipText();
        },
        set: function (value) {
            this._tooltip = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OBaseComponent.prototype, "tooltipPosition", {
        get: function () {
            return this._tooltipPosition;
        },
        set: function (value) {
            this._tooltipPosition = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OBaseComponent.prototype, "tooltipShowDelay", {
        get: function () {
            return this._tooltipShowDelay;
        },
        set: function (value) {
            this._tooltipShowDelay = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OBaseComponent.prototype, "tooltipHideDelay", {
        get: function () {
            return this._tooltipHideDelay;
        },
        set: function (value) {
            this._tooltipHideDelay = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OBaseComponent.prototype, "isReadOnly", {
        get: function () {
            return this._isReadOnly;
        },
        set: function (value) {
            this.setIsReadOnly(value);
        },
        enumerable: true,
        configurable: true
    });
    OBaseComponent.prototype.setIsReadOnly = function (value) {
        if (Util.isDefined(this.readOnly)) {
            return;
        }
        if (!this.enabled) {
            this._isReadOnly = false;
            return;
        }
        if (!PermissionsUtils.checkEnabledPermission(this.permissions)) {
            return;
        }
        this._isReadOnly = value;
    };
    Object.defineProperty(OBaseComponent.prototype, "readOnly", {
        get: function () {
            return this._readOnly;
        },
        set: function (value) {
            if (!PermissionsUtils.checkEnabledPermission(this.permissions)) {
                return;
            }
            var parsedValue = BooleanConverter(value);
            this._readOnly = parsedValue;
            this._isReadOnly = parsedValue;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OBaseComponent.prototype, "orequired", {
        get: function () {
            return this._orequired;
        },
        set: function (val) {
            this._orequired = BooleanConverter(val);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OBaseComponent.prototype, "isRequired", {
        get: function () {
            return this.orequired;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OBaseComponent.prototype, "required", {
        set: function (value) {
            this.orequired = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OBaseComponent.prototype, "enabled", {
        get: function () {
            return this._enabled;
        },
        set: function (value) {
            var parsedValue = BooleanConverter(value);
            this.setEnabled(parsedValue);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OBaseComponent.prototype, "olabel", {
        get: function () {
            return this._olabel;
        },
        set: function (value) {
            this._olabel = value;
        },
        enumerable: true,
        configurable: true
    });
    return OBaseComponent;
}());
export { OBaseComponent };
//# sourceMappingURL=o-component.class.js.map