import { forwardRef, Inject, ElementRef, Renderer2, Directive } from '@angular/core';
import { OTableComponent } from '../../o-table.component';
var OTableRowDirective = (function () {
    function OTableRowDirective(table, elementRef, renderer) {
        this.table = table;
        this.elementRef = elementRef;
        this.renderer = renderer;
    }
    OTableRowDirective.prototype.ngAfterViewInit = function () {
        this.registerResize();
    };
    OTableRowDirective.prototype.ngOnDestroy = function () {
        if (this.resizeSubscription) {
            this.resizeSubscription.unsubscribe();
        }
    };
    OTableRowDirective.prototype.registerResize = function () {
        if (this.table.horizontalScroll) {
            var self_1 = this;
            this.table.onUpdateScrolledState.subscribe(function (scrolled) {
                setTimeout(function () {
                    if (scrolled) {
                        self_1.calculateRowWidth();
                    }
                    else {
                        self_1.setRowWidth(undefined);
                    }
                }, 0);
            });
        }
    };
    OTableRowDirective.prototype.calculateRowWidth = function () {
        if (!this.table.horizontalScroll) {
            return;
        }
        if (this.alreadyScrolled) {
            this.setRowWidth(this.table.rowWidth);
        }
        var totalWidth = 0;
        try {
            this.elementRef.nativeElement.childNodes.forEach(function (element) {
                if (element && element.tagName && element.tagName.toLowerCase() === 'mat-cell') {
                    totalWidth += element.clientWidth;
                }
            });
        }
        catch (error) {
        }
        if (!isNaN(totalWidth) && totalWidth > 0) {
            totalWidth += 48;
            this.setRowWidth(totalWidth);
        }
    };
    OTableRowDirective.prototype.setRowWidth = function (value) {
        var widthValue = value !== undefined ? value + 'px' : 'auto';
        this.renderer.setStyle(this.elementRef.nativeElement, 'width', widthValue);
        this.table.rowWidth = value;
    };
    Object.defineProperty(OTableRowDirective.prototype, "alreadyScrolled", {
        get: function () {
            return this.table.rowWidth !== undefined;
        },
        enumerable: true,
        configurable: true
    });
    OTableRowDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[oTableRow]'
                },] },
    ];
    OTableRowDirective.ctorParameters = function () { return [
        { type: OTableComponent, decorators: [{ type: Inject, args: [forwardRef(function () { return OTableComponent; }),] }] },
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    return OTableRowDirective;
}());
export { OTableRowDirective };
//# sourceMappingURL=o-table-row.directive.js.map