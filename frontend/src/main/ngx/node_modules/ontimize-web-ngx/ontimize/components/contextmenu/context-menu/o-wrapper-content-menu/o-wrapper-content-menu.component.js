import { Component, Injector, Input, ViewChild } from '@angular/core';
import { MatMenu } from '@angular/material/menu';
import { OComponentMenuItems } from '../../o-content-menu.class';
import { OContextMenuService } from '../../o-context-menu.service';
export var DEFAULT_CONTEXT_MENU_CONTENT_ITEM_INPUTS = [
    'items',
    'class'
];
var OWrapperContentMenuComponent = (function () {
    function OWrapperContentMenuComponent(injector, menuService) {
        this.injector = injector;
        this.menuService = menuService;
    }
    OWrapperContentMenuComponent.prototype.onClick = function (item, event) {
        item.triggerExecute(item.data, event);
    };
    OWrapperContentMenuComponent.prototype.isGroup = function (item) {
        var isGroup = false;
        if (item && item.children && item.children.length > 0) {
            isGroup = true;
        }
        return isGroup;
    };
    OWrapperContentMenuComponent.prototype.isSepararor = function (item) {
        var isSepararor = false;
        if (item && item.type && item.type === OComponentMenuItems.TYPE_SEPARATOR_MENU) {
            isSepararor = true;
        }
        return isSepararor;
    };
    OWrapperContentMenuComponent.prototype.isItem = function (item) {
        var isItem = false;
        if (item && item.type && item.type === OComponentMenuItems.TYPE_ITEM_MENU) {
            isItem = true;
        }
        return isItem;
    };
    OWrapperContentMenuComponent.decorators = [
        { type: Component, args: [{
                    moduleId: module.id,
                    selector: 'o-wrapper-content-menu',
                    template: "\n    <mat-menu #childMenu=\"matMenu\" [class]=\"class\" [overlapTrigger]=\"false\" [hasBackdrop]=\"false\">\n      <ng-container *ngFor=\"let child of items\">\n        <!-- Handle branch node menu items -->\n        <span *ngIf=\"isGroup(child) && child.isVisible\">\n          <button mat-menu-item color=\"primary\" [matMenuTriggerFor]=\"menu.childMenu\" [disabled]=\"child.disabled\">\n            <mat-icon *ngIf=\"child.svgIcon !== undefined\" [svgIcon]=\"child.svgIcon\"></mat-icon>\n            <mat-icon *ngIf=\"child.svgIcon === undefined\">{{ child.icon }}</mat-icon>\n            <span>{{ child.label | oTranslate}}</span>\n          </button>\n          <o-wrapper-content-menu #menu [items]=\"child.children\" [class]=\"class\"></o-wrapper-content-menu>\n        </span>\n        <!-- Handle leaf node menu items -->\n        <button mat-menu-item (click)=\"onClick(child, $event)\" [disabled]=\"child.disabled\" *ngIf=\"isItem(child) && child.isVisible\">\n          <mat-icon *ngIf=\"child.svgIcon !== undefined\" [svgIcon]=\"child.svgIcon\"></mat-icon>\n          <mat-icon *ngIf=\"child.svgIcon === undefined\">{{ child.icon }}</mat-icon>\n          <span>{{ child.label | oTranslate}} </span>\n        </button>\n        <!-- separator leaf node menu items -->\n        <mat-divider *ngIf=\"isSepararor(child) && child.isVisible\"></mat-divider>\n      </ng-container>\n    </mat-menu>\n  ",
                    styles: ["\n    mat-divider.mat-divider:first-child,mat-divider.mat-divider:last-child{display:none}.mat-icon{display:inline-flex}\n  "],
                    inputs: DEFAULT_CONTEXT_MENU_CONTENT_ITEM_INPUTS
                },] },
    ];
    OWrapperContentMenuComponent.ctorParameters = function () { return [
        { type: Injector },
        { type: OContextMenuService }
    ]; };
    OWrapperContentMenuComponent.propDecorators = {
        items: [{ type: Input }],
        childMenu: [{ type: ViewChild, args: ['childMenu',] }],
        menu: [{ type: ViewChild, args: [OWrapperContentMenuComponent,] }]
    };
    return OWrapperContentMenuComponent;
}());
export { OWrapperContentMenuComponent };
//# sourceMappingURL=o-wrapper-content-menu.component.js.map