{"version":3,"file":"o-table-cell-editor-date.component.js","sourceRoot":"","sources":["../../../../../../../tmp/ontimize/components/table/column/cell-editor/date/o-table-cell-editor-date.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { ChangeDetectionStrategy, Component, ElementRef, Injector, OnInit, TemplateRef, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { DateAdapter, MAT_DATE_LOCALE, MatDatepicker, MatDatepickerInputEvent } from '@angular/material';\nimport { DateFilterFunction, ODateInputComponent, ODateValueType } from '../../../../input/date-input/o-date-input.component';\n\nimport { InputConverter } from '../../../../../decorators';\nimport { MomentService } from '../../../../../services';\nimport { OBaseTableCellEditor } from '../o-base-table-cell-editor.class';\nimport { OntimizeMomentDateAdapter } from '../../../../../shared';\nimport { Util } from '../../../../../utils';\nimport moment from 'moment';\n\nexport const DEFAULT_INPUTS_O_TABLE_CELL_EDITOR_DATE = [\n  ...OBaseTableCellEditor.DEFAULT_INPUTS_O_TABLE_CELL_EDITOR,\n  'format',\n  'locale',\n  'oStartView: start-view',\n  'min',\n  'max',\n  'oTouchUi: touch-ui',\n  'startAt: start-at',\n  'filterDate: filter-date',\n  // value-type [timestamp|string]: type must be defined to be able to save its value,\n  // e.g. classic ontimize server dates come as timestamps (number), but to be able to save them they have to be send as strings with\n  // the format 'YYYY-MM-DD HH:mm:ss'Default: timestamp.\n  'dateValueType: date-value-type'\n];\n\nexport const DEFAULT_OUTPUTS_O_TABLE_CELL_EDITOR_DATE = [\n  ...OBaseTableCellEditor.DEFAULT_OUTPUTS_O_TABLE_CELL_EDITOR\n];\n\n@Component({\n  moduleId: module.id,\n  selector: 'o-table-cell-editor-date',\n  template: `\n    <ng-template #templateref let-cellvalue=\"cellvalue\" let-rowvalue=\"rowvalue\">\n      <div [formGroup]=\"formGroup\" class=\"o-table-cell-editor-date\">\n        <mat-form-field floatLabel=\"never\">\n          <input #input matInput [placeholder]=\"getPlaceholder()\" [formControl]=\"formControl\"\n            [required]=\"orequired\" [matDatepicker]=\"d\" [matDatepickerFilter]=\"filterDate\"\n            (dateChange)=\"onDateChange($event)\" [min]=\"oMinDate\" [max]=\"oMaxDate\">\n\n          <mat-datepicker #d [startView]=\"oStartView\" [startAt]=\"oStartAt\" [touchUi]=\"oTouchUi\" (closed)=\"onClosed()\">\n          </mat-datepicker>\n\n          <span class=\"icon-btn\" (click)=\"openDatepicker(d)\" matSuffix>\n            <mat-icon svgIcon=\"ontimize:today\"></mat-icon>\n          </span>\n\n          <mat-error *ngIf=\"hasError('required')\">{{ 'FORM_VALIDATION.REQUIRED' | oTranslate }}</mat-error>\n          <mat-error *ngIf=\"hasError('matDatepickerParse')\">{{ 'FORM_VALIDATION.DATE_PARSE' | oTranslate }} {{ format }}\n          </mat-error>\n          <mat-error *ngIf=\"hasError('matDatepickerFilter')\">{{ 'FORM_VALIDATION.DATE_FILTER' | oTranslate }}</mat-error>\n          <mat-error *ngIf=\"hasError('matDatepickerMin')\">{{ 'FORM_VALIDATION.DATE_MIN' | oTranslate }} {{ minDateString }}\n          </mat-error>\n          <mat-error *ngIf=\"hasError('matDatepickerMax')\">{{ 'FORM_VALIDATION.DATE_MAX' | oTranslate }} {{ maxDateString }}\n          </mat-error>\n        </mat-form-field>\n      </div>\n    </ng-template>\n  `,\n  styles: [`\n\n  `],\n  inputs: DEFAULT_INPUTS_O_TABLE_CELL_EDITOR_DATE,\n  outputs: DEFAULT_OUTPUTS_O_TABLE_CELL_EDITOR_DATE,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [\n    { provide: DateAdapter, useClass: OntimizeMomentDateAdapter, deps: [MAT_DATE_LOCALE] }\n  ]\n})\n\nexport class OTableCellEditorDateComponent extends OBaseTableCellEditor implements OnInit {\n\n  public static DEFAULT_INPUTS_O_TABLE_CELL_EDITOR_DATE = DEFAULT_INPUTS_O_TABLE_CELL_EDITOR_DATE;\n  public static DEFAULT_OUTPUTS_O_TABLE_CELL_EDITOR_DATE = DEFAULT_OUTPUTS_O_TABLE_CELL_EDITOR_DATE;\n\n  @ViewChild('templateref', { read: TemplateRef }) public templateref: TemplateRef<any>;\n  @ViewChild('input') inputRef: ElementRef;\n\n  format: string = 'L';\n  protected locale: string;\n  oStartView: 'month' | 'year' = 'month';\n  protected min: string;\n  protected max: string;\n  @InputConverter()\n  oTouchUi: boolean = false;\n  protected startAt: string;\n  filterDate: DateFilterFunction;\n  _dateValueType: ODateValueType = 'timestamp';\n\n  oStartAt: Date;\n  oMinDate: Date;\n  oMaxDate: Date;\n\n  private momentSrv: MomentService;\n  minDateString: string;\n  maxDateString: string;\n\n  protected datepicker: MatDatepicker<Date>;\n  constructor(\n    protected injector: Injector,\n    protected momentDateAdapter: DateAdapter<OntimizeMomentDateAdapter>\n  ) {\n    super(injector);\n    this.momentSrv = this.injector.get(MomentService);\n  }\n\n  ngOnInit(): void {\n    super.ngOnInit();\n    if (!this.locale) {\n      this.locale = this.momentSrv.getLocale();\n    }\n    if (this.format) {\n      (this.momentDateAdapter as any).oFormat = this.format;\n    }\n\n    this.momentDateAdapter.setLocale(this.locale);\n    if (this.startAt) {\n      this.oStartAt = new Date(this.startAt);\n    }\n\n    if (this.min) {\n      let date = new Date(this.min);\n      let momentD = moment(date);\n      if (momentD.isValid()) {\n        this.oMinDate = date;\n        this.minDateString = momentD.format(this.format);\n      }\n    }\n\n    if (this.max) {\n      let date = new Date(this.max);\n      let momentD = moment(date);\n      if (momentD.isValid()) {\n        this.oMaxDate = date;\n        this.maxDateString = momentD.format(this.format);\n      }\n    }\n  }\n\n  protected handleKeyup(event: KeyboardEvent) {\n    const oColumn = this.table.getOColumn(this.tableColumn.attr);\n    if (!oColumn) {\n      return;\n    }\n    if (!oColumn.editing && this.datepicker && this.datepicker.opened) {\n      this.datepicker.close();\n    } else {\n      super.handleKeyup(event);\n    }\n  }\n\n  startEdition(data: any) {\n    super.startEdition(data);\n    if (!this.startAt) {\n      this.oStartAt = this.getCellData();\n    }\n  }\n\n  getCellData(): any {\n    let value = super.getCellData();\n    if (Util.isDefined(value)) {\n      let result = value;\n      let m;\n      switch (this.dateValueType) {\n        case 'string':\n          m = moment(value, this.format);\n          break;\n        case 'date':\n          break;\n        case 'iso-8601':\n        case 'timestamp':\n        default:\n          m = moment(value);\n          break;\n      }\n      if (Util.isDefined(m)) {\n        result = m.toDate();\n      }\n      return result;\n    }\n    return value;\n  }\n\n  commitEdition() {\n    // !this.datepicker.opened &&\n    if (!this.formControl.invalid) {\n      this.oldValue = this._rowData[this.tableColumnAttr];\n      this._rowData[this.tableColumnAttr] = this.getValueByValyType();\n      if (!this.isSilentControl()) {\n        this.endEdition(true);\n        this.editionCommitted.emit(this._rowData);\n      }\n    }\n  }\n\n  protected getValueByValyType(): any {\n    let result = this.formControl.value;\n    const m = moment(this.formControl.value);\n    switch (this.dateValueType) {\n      case 'string':\n        result = m.format(this.format);\n        break;\n      case 'date':\n        result = new Date(result);\n        break;\n      case 'iso-8601':\n        result = m.toISOString();\n        break;\n      case 'timestamp':\n      default:\n        result = m.valueOf();\n        break;\n    }\n    return result;\n  }\n\n  onDateChange(event: MatDatepickerInputEvent<any>) {\n    const isValid = event.value && event.value.isValid && event.value.isValid();\n    let val = isValid ? event.value.valueOf() : event.value;\n    const m = moment(val);\n    switch (this.dateValueType) {\n      case 'string':\n        if (val) {\n          val = m.format(this.format);\n        }\n        break;\n      case 'date':\n        val = new Date(val);\n        break;\n      case 'iso-8601':\n        val = m.toISOString();\n        break;\n      case 'timestamp':\n      default:\n        break;\n    }\n\n    this.formControl.setValue(val, {\n      emitModelToViewChange: false,\n      emitEvent: false\n    });\n  }\n\n  openDatepicker(d: MatDatepicker<Date>) {\n    this.datepicker = d;\n    d.open();\n  }\n\n  set dateValueType(val: any) {\n    this._dateValueType = ODateInputComponent.convertToODateValueType(val);\n  }\n\n  get dateValueType(): any {\n    return this._dateValueType;\n  }\n\n  onClosed() {\n    this.inputRef.nativeElement.focus();\n  }\n}\n"]}