var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Component, Inject, Injector, forwardRef, ElementRef, Optional, ViewChild, NgModule, ViewEncapsulation } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Validators } from '@angular/forms';
import { MatInput } from '@angular/material';
import { OSharedModule } from '../../../shared';
import { NumberConverter } from '../../../decorators';
import { OFormComponent } from '../../form/o-form.component';
import { OFormDataComponent, DEFAULT_INPUTS_O_FORM_DATA_COMPONENT, DEFAULT_OUTPUTS_O_FORM_DATA_COMPONENT } from '../../o-form-data-component.class';
export var DEFAULT_INPUTS_O_TEXT_INPUT = DEFAULT_INPUTS_O_FORM_DATA_COMPONENT.concat([
    'minLength: min-length',
    'maxLength: max-length'
]);
export var DEFAULT_OUTPUTS_O_TEXT_INPUT = DEFAULT_OUTPUTS_O_FORM_DATA_COMPONENT.slice();
var OTextInputComponent = (function (_super) {
    __extends(OTextInputComponent, _super);
    function OTextInputComponent(form, elRef, injector) {
        var _this = _super.call(this, form, elRef, injector) || this;
        _this._minLength = -1;
        _this._maxLength = -1;
        return _this;
    }
    OTextInputComponent.prototype.ngOnInit = function () {
        _super.prototype.ngOnInit.call(this);
    };
    OTextInputComponent.prototype.resolveValidators = function () {
        var validators = _super.prototype.resolveValidators.call(this);
        if (this.minLength >= 0) {
            validators.push(Validators.minLength(this.minLength));
        }
        if (this.maxLength >= 0) {
            validators.push(Validators.maxLength(this.maxLength));
        }
        return validators;
    };
    Object.defineProperty(OTextInputComponent.prototype, "minLength", {
        get: function () {
            return this._minLength;
        },
        set: function (val) {
            var old = this._minLength;
            this._minLength = NumberConverter(val);
            if (val !== old) {
                this.updateValidators();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTextInputComponent.prototype, "maxLength", {
        get: function () {
            return this._maxLength;
        },
        set: function (val) {
            var old = this._maxLength;
            this._maxLength = NumberConverter(val);
            if (val !== old) {
                this.updateValidators();
            }
        },
        enumerable: true,
        configurable: true
    });
    OTextInputComponent.DEFAULT_INPUTS_O_TEXT_INPUT = DEFAULT_INPUTS_O_TEXT_INPUT;
    OTextInputComponent.DEFAULT_OUTPUTS_O_TEXT_INPUT = DEFAULT_OUTPUTS_O_TEXT_INPUT;
    OTextInputComponent.decorators = [
        { type: Component, args: [{
                    moduleId: module.id,
                    selector: 'o-text-input',
                    template: "\n    <div [formGroup]=\"getFormGroup()\" [matTooltip]=\"tooltip\" [matTooltipClass]=\"tooltipClass\"\n      [matTooltipPosition]=\"tooltipPosition\" [matTooltipShowDelay]=\"tooltipShowDelay\"\n      [matTooltipHideDelay]=\"tooltipHideDelay\">\n      <mat-form-field [appearance]=\"appearance\" [floatLabel]=\"floatLabel\" [hideRequiredMarker]=\"hideRequiredMarker\"\n        [class.custom-width]=\"hasCustomWidth\" [class.icon-field]=\"showClearButton\" fxFlexFill>\n        <mat-label *ngIf=\"labelVisible\">{{ olabel | oTranslate }}</mat-label>\n        <input matInput type=\"text\" [id]=\"getAttribute()\" [formControlName]=\"getAttribute()\" [placeholder]=\"placeHolder\"\n          (focus)=\"innerOnFocus($event)\" (blur)=\"innerOnBlur($event)\" [readonly]=\"isReadOnly\"\n          (change)=\"onChangeEvent($event)\" [required]=\"isRequired\" />\n        <button type=\"button\" *ngIf=\"showClearButton\" matSuffix mat-icon-button (click)=\"onClickClearValue($event)\">\n          <mat-icon svgIcon=\"ontimize:close\"></mat-icon>\n        </button>\n        <mat-error *ngIf=\"hasError('required')\" text=\"{{ 'FORM_VALIDATION.REQUIRED' | oTranslate }}\"></mat-error>\n        <mat-error *ngIf=\"hasError('minlength')\"\n          text=\"{{ 'FORM_VALIDATION.MIN_LENGTH' | oTranslate }}: {{ getErrorValue('minlength', 'requiredLength') }}\">\n        </mat-error>\n        <mat-error *ngIf=\"hasError('maxlength')\"\n          text=\"{{ 'FORM_VALIDATION.MAX_LENGTH' | oTranslate }}: {{ getErrorValue('maxlength', 'requiredLength') }}\">\n        </mat-error>\n        <mat-error *ngFor=\"let oError of getActiveOErrors()\" text=\"{{ oError.text | oTranslate }}\"></mat-error>\n      </mat-form-field>\n    </div>\n  ",
                    styles: ["\n\n  "],
                    inputs: DEFAULT_INPUTS_O_TEXT_INPUT,
                    outputs: DEFAULT_OUTPUTS_O_TEXT_INPUT,
                    encapsulation: ViewEncapsulation.None
                },] },
    ];
    OTextInputComponent.ctorParameters = function () { return [
        { type: OFormComponent, decorators: [{ type: Optional }, { type: Inject, args: [forwardRef(function () { return OFormComponent; }),] }] },
        { type: ElementRef },
        { type: Injector }
    ]; };
    OTextInputComponent.propDecorators = {
        matInputRef: [{ type: ViewChild, args: ['matInputRef',] }]
    };
    return OTextInputComponent;
}(OFormDataComponent));
export { OTextInputComponent };
var OTextInputModule = (function () {
    function OTextInputModule() {
    }
    OTextInputModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [OTextInputComponent],
                    imports: [OSharedModule, CommonModule],
                    exports: [OTextInputComponent]
                },] },
    ];
    return OTextInputModule;
}());
export { OTextInputModule };
//# sourceMappingURL=o-text-input.component.js.map