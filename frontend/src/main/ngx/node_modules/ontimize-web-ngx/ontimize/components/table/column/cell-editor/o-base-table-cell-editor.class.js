var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { EventEmitter, HostListener } from '@angular/core';
import { FormControl, FormGroup, Validators } from '@angular/forms';
import { InputConverter } from '../../../../decorators';
import { OTranslateService, SnackBarService } from '../../../../services';
import { ObservableWrapper, Util } from '../../../../utils';
import { OTableColumnComponent } from '../o-table-column.component';
var OBaseTableCellEditor = (function () {
    function OBaseTableCellEditor(injector) {
        this.injector = injector;
        this.orequired = false;
        this.showPlaceHolder = false;
        this.updateRecordOnEdit = true;
        this.showNotificationOnEdit = true;
        this._enabled = true;
        this.formGroup = new FormGroup({});
        this.editionStarted = new EventEmitter();
        this.editionCancelled = new EventEmitter();
        this.editionCommitted = new EventEmitter();
        this.onPostUpdateRecord = new EventEmitter();
        this.editorCreated = new EventEmitter();
        this.registerInColumn = true;
        this.snackBarService = this.injector.get(SnackBarService);
        this.tableColumn = this.injector.get(OTableColumnComponent);
        this.translateService = this.injector.get(OTranslateService);
    }
    OBaseTableCellEditor.prototype.onDocumentKeyup = function (event) {
        this.handleKeyup(event);
    };
    OBaseTableCellEditor.prototype.ngOnInit = function () {
        this.createFormControl();
        this.registerEditor();
        this.editorCreated.emit(this);
    };
    OBaseTableCellEditor.prototype.handleKeyup = function (event) {
        var oColumn = this.table.getOColumn(this.tableColumnAttr);
        if (!oColumn || !oColumn.editing) {
            return;
        }
        if (event.keyCode === 27) {
            this.onEscClicked();
        }
        else if (event.keyCode === 13 || event.keyCode === 9) {
            this.commitEdition();
        }
    };
    OBaseTableCellEditor.prototype.createFormControl = function () {
        if (!this.formControl) {
            var validators = this.resolveValidators();
            var cfg = {
                value: undefined,
                disabled: !this.enabled
            };
            this.formControl = new FormControl(cfg, validators);
            this.formGroup.addControl(Math.random().toString(36), this.formControl);
        }
    };
    OBaseTableCellEditor.prototype.registerEditor = function () {
        if (this.registerInColumn && !Util.isDefined(this.tableColumn.editor)) {
            this.tableColumn.registerEditor(this);
            if (!Util.isDefined(this.type) && Util.isDefined(this.tableColumn.type)) {
                this.type = this.tableColumn.type;
            }
        }
    };
    OBaseTableCellEditor.prototype.getCellData = function () {
        return this._rowData[this.tableColumnAttr];
    };
    OBaseTableCellEditor.prototype.startEdition = function (data) {
        this.formGroup.reset();
        this.rowData = data;
        if (!this.isSilentControl()) {
            this.editionStarted.emit(this._rowData);
        }
    };
    OBaseTableCellEditor.prototype.endEdition = function (saveChanges) {
        var oColumn = this.table.getOColumn(this.tableColumnAttr);
        if (oColumn) {
            var self_1 = this;
            var updateObserver = this.table.updateCellData(oColumn, this._rowData, saveChanges);
            if (updateObserver) {
                updateObserver.subscribe(function (res) {
                    self_1.onUpdateSuccess(res);
                    self_1.table.cd.detectChanges();
                }, function (error) {
                    self_1._rowData[self_1.tableColumnAttr] = self_1.oldValue;
                    self_1.table.dataSource.updateRenderedRowData(self_1._rowData);
                    self_1.table.showDialogError(error, 'MESSAGES.ERROR_UPDATE');
                    self_1.table.cd.detectChanges();
                });
            }
            else {
                self_1.table.cd.detectChanges();
            }
        }
    };
    OBaseTableCellEditor.prototype.commitEdition = function () {
        if (!this.formControl.invalid) {
            this.oldValue = this._rowData[this.tableColumnAttr];
            this._rowData[this.tableColumnAttr] = this.formControl.value;
            if (!this.isSilentControl()) {
                this.endEdition(true);
                this.editionCommitted.emit(this._rowData);
            }
        }
    };
    Object.defineProperty(OBaseTableCellEditor.prototype, "tableColumn", {
        get: function () {
            return this._tableColumn;
        },
        set: function (arg) {
            this._tableColumn = arg;
            if (arg) {
                this._table = arg.table;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OBaseTableCellEditor.prototype, "tableColumnAttr", {
        get: function () {
            if (this._tableColumn) {
                return this._tableColumn.attr;
            }
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OBaseTableCellEditor.prototype, "table", {
        get: function () {
            return this._table;
        },
        set: function (arg) {
            this._table = arg;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OBaseTableCellEditor.prototype, "rowData", {
        get: function () {
            return this._rowData;
        },
        set: function (arg) {
            this._rowData = arg;
            var cellData = this.getCellData();
            this.formControl.setValue(cellData);
            this.formControl.markAsTouched();
            if (this.inputRef && this.inputRef.nativeElement.type === 'text') {
                this.inputRef.nativeElement.setSelectionRange(0, String(cellData).length);
            }
        },
        enumerable: true,
        configurable: true
    });
    OBaseTableCellEditor.prototype.resolveValidators = function () {
        var validators = [];
        if (this.orequired) {
            validators.push(Validators.required);
        }
        return validators;
    };
    OBaseTableCellEditor.prototype.hasError = function (error) {
        return this.formControl && this.formControl.touched && this.hasErrorExclusive(error);
    };
    OBaseTableCellEditor.prototype.hasErrorExclusive = function (error) {
        var hasError = false;
        var errorsOrder = ['matDatepickerMax', 'matDatepickerMin', 'matDatepickerFilter', 'matDatepickerParse', 'required'];
        var errors = this.formControl.errors;
        if (Util.isDefined(errors)) {
            if (Object.keys(errors).length === 1) {
                return errors.hasOwnProperty(error);
            }
            else {
                for (var i = 0, len = errorsOrder.length; i < len; i++) {
                    hasError = errors.hasOwnProperty(errorsOrder[i]);
                    if (hasError) {
                        hasError = (errorsOrder[i] === error);
                        break;
                    }
                }
            }
        }
        return hasError;
    };
    OBaseTableCellEditor.prototype.getErrorValue = function (error, prop) {
        return this.formControl.hasError(error) ? this.formControl.getError(error)[prop] || '' : '';
    };
    OBaseTableCellEditor.prototype.onEscClicked = function () {
        if (!this.isSilentControl()) {
            this.endEdition(false);
            this.editionCancelled.emit(this._rowData);
        }
    };
    OBaseTableCellEditor.prototype.isSilentControl = function () {
        return this.controlArgs !== undefined && this.controlArgs.silent;
    };
    OBaseTableCellEditor.prototype.getPlaceholder = function () {
        return this.showPlaceHolder ?
            this.translateService.get(this.olabel || this.tableColumn ? (this.tableColumn.title || this.tableColumnAttr) : this.tableColumnAttr) :
            undefined;
    };
    OBaseTableCellEditor.prototype.onUpdateSuccess = function (res) {
        ObservableWrapper.callEmit(this.onPostUpdateRecord, this._rowData);
        if (this.showNotificationOnEdit) {
            this.snackBarService.open('MESSAGES.UPDATED', { icon: 'check_circle' });
        }
    };
    Object.defineProperty(OBaseTableCellEditor.prototype, "enabled", {
        get: function () {
            return this._enabled;
        },
        set: function (arg) {
            this._enabled = arg;
            if (this.formControl) {
                this._enabled ? this.formControl.enable() : this.formControl.disable();
            }
        },
        enumerable: true,
        configurable: true
    });
    OBaseTableCellEditor.prototype.getFormControl = function () {
        return this.formControl;
    };
    OBaseTableCellEditor.DEFAULT_INPUTS_O_TABLE_CELL_EDITOR = [
        'orequired: required',
        'showPlaceHolder: show-placeholder',
        'olabel: label',
        'updateRecordOnEdit: update-record-on-edit',
        'showNotificationOnEdit: show-notification-on-edit',
        'enabled'
    ];
    OBaseTableCellEditor.DEFAULT_OUTPUTS_O_TABLE_CELL_EDITOR = [
        'editionStarted',
        'editionCancelled',
        'editionCommitted',
        'onPostUpdateRecord'
    ];
    OBaseTableCellEditor.propDecorators = {
        onDocumentKeyup: [{ type: HostListener, args: ['document:keyup', ['$event'],] }]
    };
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OBaseTableCellEditor.prototype, "orequired", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OBaseTableCellEditor.prototype, "showPlaceHolder", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OBaseTableCellEditor.prototype, "updateRecordOnEdit", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OBaseTableCellEditor.prototype, "showNotificationOnEdit", void 0);
    return OBaseTableCellEditor;
}());
export { OBaseTableCellEditor };
//# sourceMappingURL=o-base-table-cell-editor.class.js.map