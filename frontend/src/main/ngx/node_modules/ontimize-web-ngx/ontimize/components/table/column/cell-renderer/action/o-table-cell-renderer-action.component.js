var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { ChangeDetectionStrategy, Component, EventEmitter, Injector, TemplateRef, ViewChild } from '@angular/core';
import { Codes, Util } from '../../../../../utils';
import { OBaseTableCellRenderer } from '../o-base-table-cell-renderer.class';
export var DEFAULT_INPUTS_O_TABLE_CELL_RENDERER_ACTION = [
    'icon',
    'svgIcon:svg-icon',
    'action',
    'text',
    'iconPosition: icon-position'
];
export var DEFAULT_OUTPUTS_O_TABLE_CELL_RENDERER_ACTION = [
    'onClick'
];
var OTableCellRendererActionComponent = (function (_super) {
    __extends(OTableCellRendererActionComponent, _super);
    function OTableCellRendererActionComponent(injector) {
        var _this = _super.call(this, injector) || this;
        _this.injector = injector;
        _this.onClick = new EventEmitter();
        _this.tableColumn.type = 'action';
        _this.tableColumn.orderable = false;
        _this.tableColumn.searchable = false;
        return _this;
    }
    OTableCellRendererActionComponent.prototype.ngOnInit = function () {
        if (this.table) {
            var oCol = this.table.getOColumn(this.tableColumn.attr);
            oCol.title = undefined;
        }
        this.iconPosition = Util.parseIconPosition(this.iconPosition);
    };
    OTableCellRendererActionComponent.prototype.getCellData = function (value) {
        return value;
    };
    OTableCellRendererActionComponent.prototype.innerOnClick = function (event, rowData) {
        if (event) {
            event.stopPropagation();
            event.preventDefault();
        }
        if (Util.isDefined(this.action)) {
            switch (this.action.toLowerCase()) {
                case 'detail':
                    this.table.viewDetail(rowData);
                    break;
                case 'edit':
                    this.table.editDetail(rowData);
                    break;
                default:
                    break;
            }
        }
        else {
            this.onClick.emit(rowData);
        }
    };
    Object.defineProperty(OTableCellRendererActionComponent.prototype, "icon", {
        get: function () {
            return this._icon;
        },
        set: function (arg) {
            this._icon = arg;
        },
        enumerable: true,
        configurable: true
    });
    OTableCellRendererActionComponent.prototype.isIconPositionLeft = function () {
        return Util.isDefined(this.icon) && this.iconPosition === Codes.ICON_POSITION_LEFT;
    };
    OTableCellRendererActionComponent.prototype.isIconPositionRight = function () {
        return Util.isDefined(this.icon) && this.iconPosition === Codes.ICON_POSITION_RIGHT;
    };
    OTableCellRendererActionComponent.prototype.isSvgIconPositionRight = function () {
        return Util.isDefined(this.svgIcon) && this.iconPosition === Codes.ICON_POSITION_RIGHT;
    };
    OTableCellRendererActionComponent.prototype.isSvgIconPositionLeft = function () {
        return Util.isDefined(this.svgIcon) && this.iconPosition === Codes.ICON_POSITION_LEFT;
    };
    OTableCellRendererActionComponent.DEFAULT_INPUTS_O_TABLE_CELL_RENDERER_ACTION = DEFAULT_INPUTS_O_TABLE_CELL_RENDERER_ACTION;
    OTableCellRendererActionComponent.DEFAULT_OUTPUTS_O_TABLE_CELL_RENDERER_ACTION = DEFAULT_OUTPUTS_O_TABLE_CELL_RENDERER_ACTION;
    OTableCellRendererActionComponent.decorators = [
        { type: Component, args: [{
                    moduleId: module.id,
                    selector: 'o-table-cell-renderer-action',
                    template: "\n    <ng-template #templateref let-cellvalue=\"cellvalue\" let-rowvalue=\"rowvalue\">\n      <span class=\"o-action-cell-renderer\" (click)=\"innerOnClick($event, rowvalue)\">\n        <mat-icon *ngIf=\"isIconPositionLeft()\">{{ icon }}</mat-icon>\n        <mat-icon *ngIf=\"isSvgIconPositionLeft()\" [svgIcon]=\"svgIcon\"></mat-icon>\n        <span *ngIf=\"text !== undefined\">{{ text | oTranslate }}</span>\n        <mat-icon *ngIf=\"isIconPositionRight()\">{{ icon }}</mat-icon>\n        <mat-icon *ngIf=\"isSvgIconPositionRight()\" [svgIcon]=\"svgIcon\"></mat-icon>\n      </span>\n    </ng-template>\n  ",
                    styles: ["\n    :host .mat-icon{margin:0 4px}\n  "],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    inputs: DEFAULT_INPUTS_O_TABLE_CELL_RENDERER_ACTION,
                    outputs: DEFAULT_OUTPUTS_O_TABLE_CELL_RENDERER_ACTION
                },] },
    ];
    OTableCellRendererActionComponent.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    OTableCellRendererActionComponent.propDecorators = {
        templateref: [{ type: ViewChild, args: ['templateref', { read: TemplateRef },] }]
    };
    return OTableCellRendererActionComponent;
}(OBaseTableCellRenderer));
export { OTableCellRendererActionComponent };
//# sourceMappingURL=o-table-cell-renderer-action.component.js.map