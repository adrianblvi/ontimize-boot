import { Directive, ElementRef, EventEmitter, HostListener, Renderer } from '@angular/core';
import { Util } from '../../../util/util';
import { Codes, ObservableWrapper } from '../../../utils';
var OGridItemDirective = (function () {
    function OGridItemDirective(_el, renderer) {
        this._el = _el;
        this.renderer = renderer;
        this.mdClick = new EventEmitter();
        this.mdDoubleClick = new EventEmitter();
    }
    OGridItemDirective.prototype.onMouseEnter = function () {
        if (Util.isDefined(this.grid) && this.grid.detailMode !== Codes.DETAIL_MODE_NONE) {
            this.renderer.setElementStyle(this._el.nativeElement, 'cursor', 'pointer');
        }
    };
    OGridItemDirective.prototype.onClick = function (onNext) {
        return ObservableWrapper.subscribe(this.mdClick, onNext);
    };
    OGridItemDirective.prototype.onDoubleClick = function (onNext) {
        return ObservableWrapper.subscribe(this.mdDoubleClick, onNext);
    };
    OGridItemDirective.prototype.onItemClicked = function (e) {
        ObservableWrapper.callEmit(this.mdClick, this);
    };
    OGridItemDirective.prototype.onItemDoubleClicked = function (e) {
        ObservableWrapper.callEmit(this.mdDoubleClick, this);
    };
    OGridItemDirective.prototype.setItemData = function (data) {
        if (!this.modelData) {
            this.modelData = data;
        }
    };
    OGridItemDirective.prototype.getItemData = function () {
        return this.modelData;
    };
    OGridItemDirective.prototype.setGridComponent = function (grid) {
        this.grid = grid;
    };
    OGridItemDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'mat-grid-tile[o-grid-item]',
                    host: {
                        '(click)': 'onItemClicked($event)',
                        '(dblclick)': 'onItemDoubleClicked($event)'
                    }
                },] },
    ];
    OGridItemDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer }
    ]; };
    OGridItemDirective.propDecorators = {
        onMouseEnter: [{ type: HostListener, args: ['mouseenter',] }]
    };
    return OGridItemDirective;
}());
export { OGridItemDirective };
//# sourceMappingURL=o-grid-item.directive.js.map