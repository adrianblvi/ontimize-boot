var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { CommonModule } from '@angular/common';
import { Component, ElementRef, forwardRef, Inject, Injector, NgModule, Optional, ViewChild, ViewEncapsulation } from '@angular/core';
import { FormControl } from '@angular/forms';
import { MatSelect } from '@angular/material';
import { Subscription } from 'rxjs';
import { InputConverter } from '../../../decorators/input-converter';
import { dataServiceFactory } from '../../../services/data-service.provider';
import { OntimizeService } from '../../../services/ontimize.service';
import { OSharedModule } from '../../../shared/shared.module';
import { Codes } from '../../../util/codes';
import { Util } from '../../../util/util';
import { OFormComponent } from '../../form/o-form.component';
import { OFormValue } from '../../form/OFormValue';
import { OValueChangeEvent } from '../../o-form-data-component.class';
import { OFormServiceComponent } from '../o-form-service-component.class';
import { OComboSearchComponent } from './combo-search/o-combo-search.component';
export var DEFAULT_INPUTS_O_COMBO = OFormServiceComponent.DEFAULT_INPUTS_O_FORM_SERVICE_COMPONENT.concat([
    'translate',
    'multiple',
    'nullSelection: null-selection',
    'multipleTriggerLabel: multiple-trigger-label',
    'searchable'
]);
export var DEFAULT_OUTPUTS_O_COMBO = OFormServiceComponent.DEFAULT_OUTPUTS_O_FORM_SERVICE_COMPONENT.slice();
var Éµ0 = dataServiceFactory;
var OComboComponent = (function (_super) {
    __extends(OComboComponent, _super);
    function OComboComponent(form, elRef, injector) {
        var _this = _super.call(this, form, elRef, injector) || this;
        _this.searchControl = new FormControl();
        _this.multipleTriggerLabel = false;
        _this.searchable = false;
        _this.translate = false;
        _this.nullSelection = true;
        _this.filteredDataArray = [];
        _this.subscription = new Subscription();
        _this.defaultValue = '';
        return _this;
    }
    OComboComponent.prototype.ngOnInit = function () {
        var _this = this;
        _super.prototype.ngOnInit.call(this);
        this.subscription.add(this.searchControl.valueChanges.subscribe(function () { return _this.searchFilter(); }));
    };
    OComboComponent.prototype.ngAfterViewInit = function () {
        _super.prototype.ngAfterViewInit.call(this);
        if (this.queryOnInit) {
            this.queryData();
        }
        else if (this.queryOnBind) {
            this.syncDataIndex();
        }
    };
    OComboComponent.prototype.ngOnDestroy = function () {
        this.subscription.unsubscribe();
        this.destroy();
    };
    OComboComponent.prototype.initialize = function () {
        _super.prototype.initialize.call(this);
        if (this.multiple) {
            this.nullSelection = false;
            this.defaultValue = [];
        }
    };
    OComboComponent.prototype.ensureOFormValue = function (value) {
        if (value instanceof OFormValue) {
            this.value = new OFormValue(value.value);
        }
        else if (Util.isDefined(value) && !(value instanceof OFormValue)) {
            this.value = new OFormValue(value);
        }
        else if (!Util.isDefined(value) && this.nullSelection) {
            this.value = new OFormValue(undefined);
        }
        else {
            this.value = new OFormValue(this.defaultValue);
        }
    };
    OComboComponent.prototype.setDataArray = function (data) {
        _super.prototype.setDataArray.call(this, data);
        this.filteredDataArray = data;
    };
    OComboComponent.prototype.getDataArray = function () {
        return this.dataArray;
    };
    OComboComponent.prototype.getFilteredDataArray = function () {
        return this.filteredDataArray;
    };
    OComboComponent.prototype.hasNullSelection = function () {
        return this.nullSelection;
    };
    OComboComponent.prototype.syncDataIndex = function (queryIfNotFound) {
        if (queryIfNotFound === void 0) { queryIfNotFound = true; }
        _super.prototype.syncDataIndex.call(this, queryIfNotFound);
        if (this._currentIndex !== undefined && this.nullSelection) {
            this._currentIndex += 1;
        }
    };
    OComboComponent.prototype.getValue = function () {
        if (this.value instanceof OFormValue) {
            if (this.value.value !== undefined) {
                return this.value.value;
            }
            else if (this.value.value === undefined) {
                return this.getEmptyValue();
            }
        }
        return '';
    };
    OComboComponent.prototype.getEmptyValue = function () {
        if (this.multiple) {
            return [];
        }
        else {
            if (this.nullSelection) {
                return undefined;
            }
            else {
                return '';
            }
        }
    };
    OComboComponent.prototype.clearValue = function () {
        if (this.multiple) {
            this.setValue(this.defaultValue);
        }
        else {
            _super.prototype.clearValue.call(this);
        }
    };
    OComboComponent.prototype.getMultiple = function () {
        return this.multiple;
    };
    OComboComponent.prototype.onSelectionChange = function (event) {
        if (!this.selectModel.panelOpen) {
            return;
        }
        var newValue = event.value;
        this.setValue(newValue, {
            changeType: OValueChangeEvent.USER_CHANGE,
            emitEvent: false,
            emitModelToViewChange: false
        });
    };
    OComboComponent.prototype.getOptionDescriptionValue = function (item) {
        if (item === void 0) { item = {}; }
        var descTxt = '';
        if (this.descriptionColArray && this.descriptionColArray.length > 0) {
            var self_1 = this;
            this.descriptionColArray.forEach(function (col, index) {
                var txt = item[col];
                if (Util.isDefined(txt)) {
                    if (self_1.translate && self_1.translateService) {
                        txt = self_1.translateService.get(txt);
                    }
                    descTxt += txt;
                }
                if (index < self_1.descriptionColArray.length - 1) {
                    descTxt += self_1.separator;
                }
            });
        }
        return descTxt;
    };
    OComboComponent.prototype.getValueColumn = function (item) {
        if (item && item.hasOwnProperty(this.valueColumn)) {
            var option = item[this.valueColumn];
            if (option === 'undefined') {
                option = null;
            }
            return option;
        }
        return '';
    };
    OComboComponent.prototype.isSelected = function (item, rowIndex) {
        var selected = false;
        if (item && item.hasOwnProperty(this.valueColumn) && this.value) {
            var val = item[this.valueColumn];
            if (val === this.value.value) {
                selected = true;
                this._currentIndex = rowIndex;
            }
        }
        return selected;
    };
    OComboComponent.prototype.setValue = function (val, options) {
        var _this = this;
        if (!this.dataArray) {
            return;
        }
        var isDefinedVal = Util.isDefined(val);
        if (this.multiple && !isDefinedVal) {
            return;
        }
        if (!isDefinedVal && !this.nullSelection) {
            console.warn('`o-combo` with attr ' + this.oattr + ' cannot be set. `null-selection` attribute is false.');
            return;
        }
        if (isDefinedVal) {
            var record = this.dataArray.find(function (item) { return item[_this.valueColumn] === val; });
            if (!Util.isDefined(record)) {
                return;
            }
        }
        else {
            if (Util.isDefined(val)) {
                _super.prototype.setValue.call(this, val, options);
            }
        }
        _super.prototype.setValue.call(this, val, options);
    };
    OComboComponent.prototype.getSelectedItems = function () {
        return this.getValue();
    };
    OComboComponent.prototype.setSelectedItems = function (values) {
        this.setValue(values);
    };
    OComboComponent.prototype.getFirstSelectedValue = function () {
        return this.selectModel.selected[0].viewValue;
    };
    OComboComponent.prototype.setIsReadOnly = function (value) {
        _super.prototype.setIsReadOnly.call(this, value);
        var readOnly = Util.isDefined(this.readOnly) ? this.readOnly : value;
        if (this.enabled) {
            if (this._fControl && readOnly) {
                this._fControl.disable();
            }
            else if (this._fControl) {
                this._fControl.enable();
            }
        }
    };
    OComboComponent.prototype.parseByValueColumnType = function (val) {
        if (!Util.isDefined(this.multiple)) {
            return val;
        }
        var valueArr = this.multiple ? val : [val];
        if (this.valueColumnType === Codes.TYPE_INT) {
            valueArr.forEach(function (item, index) {
                var parsed = parseInt(item);
                if (!isNaN(parsed)) {
                    valueArr[index] = parsed;
                }
            });
        }
        return this.multiple ? valueArr : valueArr[0];
    };
    OComboComponent.prototype.searchFilter = function () {
        var _this = this;
        if (this.dataArray || this.dataArray.length) {
            var search_1 = this.searchControl.value;
            if (!search_1) {
                this.filteredDataArray = this.dataArray.slice();
                return;
            }
            else {
                search_1 = search_1.toLowerCase();
            }
            this.filteredDataArray = this.dataArray.filter(function (item) { return _this.getOptionDescriptionValue(item).toLowerCase().indexOf(search_1) > -1; });
        }
    };
    OComboComponent.DEFAULT_INPUTS_O_COMBO = DEFAULT_INPUTS_O_COMBO;
    OComboComponent.DEFAULT_OUTPUTS_O_COMBO = DEFAULT_OUTPUTS_O_COMBO;
    OComboComponent.decorators = [
        { type: Component, args: [{
                    moduleId: module.id,
                    selector: 'o-combo',
                    providers: [
                        { provide: OntimizeService, useFactory: Éµ0, deps: [Injector] },
                        { provide: OFormServiceComponent, useExisting: forwardRef(function () { return OComboComponent; }) }
                    ],
                    inputs: DEFAULT_INPUTS_O_COMBO,
                    outputs: DEFAULT_OUTPUTS_O_COMBO,
                    template: "\n    <div [formGroup]=\"getFormGroup()\" [matTooltip]=\"tooltip\" [matTooltipClass]=\"tooltipClass\" [matTooltipPosition]=\"tooltipPosition\"\n      [matTooltipShowDelay]=\"tooltipShowDelay\" [matTooltipHideDelay]=\"tooltipHideDelay\">\n      <mat-form-field [appearance]=\"appearance\" [floatLabel]=\"floatLabel\" [class.read-only]=\"isReadOnly\" [class.custom-width]=\"hasCustomWidth\"\n        [hideRequiredMarker]=\"hideRequiredMarker\" fxFill>\n        <mat-label *ngIf=\"labelVisible\">{{ olabel | oTranslate }}</mat-label>\n        <mat-select [value]=\"getValue()\" #selectModel [id]=\"getAttribute()\" fxFill [formControlName]=\"getAttribute()\" [placeholder]=\"placeHolder\"\n          [multiple]=\"getMultiple()\" [required]=\"isRequired\" [panelClass]=\"{ 'o-combo-panel': true, 'o-combo-panel-search': searchable }\"\n          (selectionChange)=\"onSelectionChange($event)\">\n          <o-combo-search *ngIf=\"searchable\" [formControl]=\"searchControl\"></o-combo-search>\n\n          <mat-select-trigger *ngIf=\"multiple && multipleTriggerLabel\">\n            {{ selectModel.selected[0] ? getFirstSelectedValue(): '' }}\n            <span *ngIf=\"getFormControl().value.length > 1\">\n              {{ 'INPUT.COMBO.MESSAGE_TRIGGER' | oTranslate: { values: [getFormControl().value.length -1] } }}\n            </span>\n          </mat-select-trigger>\n\n          <div class=\"o-combo-options-container\">\n            <mat-option *ngIf=\"hasNullSelection()\" [value]=\"null\"></mat-option>\n            <mat-option *ngFor=\"let item of getFilteredDataArray()\" [value]=\"getValueColumn(item)\">\n              {{ getOptionDescriptionValue(item) }}\n            </mat-option>\n          </div>\n        </mat-select>\n\n        <mat-error *ngIf=\"hasError('required')\" text=\"{{ 'FORM_VALIDATION.REQUIRED' | oTranslate }}\"></mat-error>\n        <mat-error *ngFor=\"let oError of getActiveOErrors()\" text=\"{{ oError.text | oTranslate }}\"></mat-error>\n      </mat-form-field>\n    </div>\n  ",
                    styles: ["\n    .o-combo .read-only .mat-select-arrow-wrapper{visibility:hidden}.o-combo .read-only .mat-form-field-underline{background-image:none}.o-combo .mat-select{line-height:normal}.o-combo-panel.o-combo-panel-search{overflow:hidden}.o-combo-panel.o-combo-panel-search .mat-select-content{height:100%}.o-combo-panel.o-combo-panel-search .mat-select-content .o-combo-options-container{height:calc(100% - 3em);overflow:auto}\n  "],
                    encapsulation: ViewEncapsulation.None,
                    host: {
                        '[class.o-combo]': 'true'
                    }
                },] },
    ];
    OComboComponent.ctorParameters = function () { return [
        { type: OFormComponent, decorators: [{ type: Optional }, { type: Inject, args: [forwardRef(function () { return OFormComponent; }),] }] },
        { type: ElementRef },
        { type: Injector }
    ]; };
    OComboComponent.propDecorators = {
        inputModel: [{ type: ViewChild, args: ['inputModel',] }],
        selectModel: [{ type: ViewChild, args: ['selectModel',] }]
    };
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OComboComponent.prototype, "multiple", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OComboComponent.prototype, "multipleTriggerLabel", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OComboComponent.prototype, "searchable", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OComboComponent.prototype, "translate", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OComboComponent.prototype, "nullSelection", void 0);
    return OComboComponent;
}(OFormServiceComponent));
export { OComboComponent };
var OComboModule = (function () {
    function OComboModule() {
    }
    OComboModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [OComboComponent, OComboSearchComponent],
                    imports: [CommonModule, OSharedModule],
                    exports: [OComboComponent, OComboSearchComponent]
                },] },
    ];
    return OComboModule;
}());
export { OComboModule };
export { Éµ0 };
//# sourceMappingURL=o-combo.component.js.map