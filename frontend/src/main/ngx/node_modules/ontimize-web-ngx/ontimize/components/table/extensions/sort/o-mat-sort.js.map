{"version":3,"file":"o-mat-sort.js","sourceRoot":"","sources":["../../../../../../tmp/ontimize/components/table/extensions/sort/o-mat-sort.ts"],"names":[],"mappings":"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","sourcesContent":["import { Directive, Output, EventEmitter } from '@angular/core';\nimport { MatSort, MatSortable } from '@angular/material';\nimport { Util, Codes } from '../../../../utils';\nimport { ISQLOrder } from '../../../service.utils';\n\nexport type OMatSortGroupedData = {\n  key: any;\n  values: any[];\n};\n\n@Directive({\n  selector: '[oMatSort]',\n  exportAs: 'oMatSort',\n  inputs: ['disabled: oMatSortDisabled']\n})\nexport class OMatSort extends MatSort {\n\n  activeArray: Array<MatSortable> = [];\n  directionById: any = {};\n\n  protected multipleSort: boolean;\n  protected activeSortColumn: string;\n  protected activeSortDirection: string;\n\n  @Output('matSortChange') readonly oSortChange: EventEmitter<any> = new EventEmitter<any>();\n\n  setMultipleSort(val: boolean) {\n    this.multipleSort = val;\n  }\n\n  getSortColumns(): any[] {\n    let activeData = [];\n    this.activeArray.forEach((s: MatSortable) => {\n      activeData.push({\n        id: s.id,\n        direction: this.directionById[s.id]\n      });\n    });\n    return activeData;\n  }\n\n  setTableInfo(sortColArray: Array<ISQLOrder>) {\n    sortColArray.forEach((colData: ISQLOrder) => {\n      const sortDirection: any = colData.ascendent ? Codes.ASC_SORT : Codes.DESC_SORT;\n      this.activeArray.push({\n        id: colData.columnName,\n        start: sortDirection,\n        disableClear: false\n      });\n      this.directionById[colData.columnName] = sortDirection;\n    });\n  }\n\n  addSortColumn(sortable: MatSortable): void {\n    if (this.isActive(sortable)) {\n      // workaround for having a propper work in getNextSortDirection;\n      this.direction = this.directionById[sortable.id];\n      this.directionById[sortable.id] = this.getNextSortDirection(sortable);\n      this.direction = '';\n      if (this.directionById[sortable.id] === '') {\n        this.deleteSortColumn(sortable.id);\n      }\n    } else {\n      if (!this.multipleSort) {\n        this.activeArray = [];\n        this.directionById = {};\n      }\n      this.activeArray.push(sortable);\n      this.directionById[sortable.id] = sortable.start ? sortable.start : this.start;\n    }\n    let activeData = this.getSortColumns();\n    this._stateChanges.next();\n    this.oSortChange.emit(activeData);\n  }\n\n  protected deleteSortColumn(id: string) {\n    delete this.directionById[id];\n    for (let i = 0, len = this.activeArray.length; i < len; i++) {\n      if (this.activeArray[i].id === id) {\n        this.activeArray.splice(i, 1);\n        break;\n      }\n    }\n  }\n\n  isActive(sortable: MatSortable): boolean {\n    return Util.isDefined(this.activeArray.find((s: MatSortable) => sortable.id === s.id));\n  }\n\n  hasDirection(id: any): boolean {\n    let direction;\n    if (Util.isDefined(this.directionById[id])) {\n      direction = this.directionById[id];\n    }\n    return (direction === 'asc' || direction === 'desc');\n  }\n\n  getSortedData(data: any[]): any[] {\n    let sortColumns = this.getSortColumns();\n    if (sortColumns.length === 0 || data.length === 0) {\n      return data;\n    }\n    this.sortables.forEach((value, key) => {\n      this.deregister(value);\n    });\n    return this.sortByColumns(data, sortColumns);\n  }\n\n  protected sortByColumns(data: any[], sortColumns: any[]) {\n    const sortFunctionBind = this.sortFunction.bind(this);\n    for (let i = 0, len = sortColumns.length; i < len; i++) {\n      const sortC = sortColumns[i];\n      this.activeSortColumn = sortC.id;\n      this.activeSortDirection = sortC.direction;\n      if (i === 0) {\n        data = data.sort(sortFunctionBind);\n      } else {\n        const groupedData: OMatSortGroupedData[] = this.getDataGrouped(data, sortColumns, i);\n        if (groupedData.length >= data.length) {\n          break;\n        }\n        data = this.sortGroupedData(groupedData);\n      }\n    }\n    return data;\n  }\n\n  protected getDataGrouped(data: any, sortColumns: any[], index: number): OMatSortGroupedData[] {\n    var propArr = [];\n    sortColumns.forEach((item, i) => {\n      if (i < index) {\n        propArr.push(item.id);\n      }\n    });\n    if (propArr.length === 0) {\n      return data;\n    }\n    let result: OMatSortGroupedData[] = [];\n    data.forEach(item => {\n      let value = '';\n      propArr.forEach(prop => {\n        value += item[prop];\n      });\n\n      let filtered = result.filter(resItem => resItem.key === value);\n      if (filtered.length === 0) {\n        result.push({\n          key: value,\n          values: [item]\n        });\n      } else if (filtered.length === 1) {\n        filtered[0].values.push(item);\n      }\n    });\n    return result;\n  }\n\n  protected sortGroupedData(groupedData: OMatSortGroupedData[]): any[] {\n    const self = this;\n    return groupedData.reduce((obj: any, item: any) => {\n      const arr = item.values;\n      const sorted = arr.length <= 1 ? arr : arr.sort(self.sortFunction.bind(self));\n      obj.push(...sorted);\n      return obj;\n    }, []);\n  }\n\n  sortFunction(a: any, b: any): number {\n    let propertyA: number | string = '';\n    let propertyB: number | string = '';\n    [propertyA, propertyB] = [a[this.activeSortColumn], b[this.activeSortColumn]];\n\n    let valueA = typeof propertyA === 'undefined' ? '' : propertyA === '' ? propertyA : isNaN(+propertyA) ? propertyA.toString().trim().toLowerCase() : +propertyA;\n    let valueB = typeof propertyB === 'undefined' ? '' : propertyB === '' ? propertyB : isNaN(+propertyB) ? propertyB.toString().trim().toLowerCase() : +propertyB;\n    return (valueA <= valueB ? -1 : 1) * (this.activeSortDirection === 'asc' ? 1 : -1);\n  }\n\n}\n"]}