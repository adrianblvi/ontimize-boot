{"version":3,"file":"o-table-store-filter-dialog.component.js","sourceRoot":"","sources":["../../../../../../../tmp/ontimize/components/table/extensions/dialog/store-filter/o-table-store-filter-dialog.component.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,EAAE,QAAQ,EAAE,uBAAuB,EAAE,MAAM,eAAe,CAAC;AACrF,OAAO,EAAE,WAAW,EAAE,SAAS,EAAE,UAAU,EAAE,MAAM,gBAAgB,CAAC;AACpE,OAAO,EAAE,eAAe,EAAE,YAAY,EAAE,MAAM,mBAAmB,CAAC;AAGlE,OAAO,EAAE,qBAAqB,EAAE,MAAM,8BAA8B,CAAC;AAErE;IA+BsD,oDAAqB;IAWzE,0CACS,SAAyD,EACtD,QAAkB,EACH,IAAmB;QAH9C,YAKE,kBAAM,QAAQ,CAAC,SAGhB;QAPQ,eAAS,GAAT,SAAS,CAAgD;QACtD,cAAQ,GAAR,QAAQ,CAAU;QAX9B,iBAAW,GAAkB,EAAE,CAAC;QAChC,eAAS,GAAc,IAAI,SAAS,CAAC;YACnC,IAAI,EAAE,IAAI,WAAW,CAAC,EAAE,EAAE;gBACxB,UAAU,CAAC,QAAQ;gBACnB,KAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,KAAI,CAAC;aACpC,CAAC;YACF,WAAW,EAAE,IAAI,WAAW,CAAC,EAAE,CAAC;SACjC,CAAC,CAAC;QAQD,KAAI,CAAC,cAAc,CAAC,KAAI,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;QAChD,KAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;;IAC7B,CAAC;IAED,0DAAe,GAAf,UAAgB,WAAW;QACzB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACjC,CAAC;IAED,8DAAmB,GAAnB;QACE,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC;IAC9B,CAAC;IAES,8DAAmB,GAA7B,UAA8B,OAAoB;QAChD,IAAI,SAAS,GAAW,OAAO,CAAC,KAAK,CAAC;QACtC,IAAI,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,EAAE;YAC9C,OAAO,EAAE,yBAAyB,EAAE,IAAI,EAAE,CAAC;SAC5C;QACD,OAAO,EAAE,CAAC;IACZ,CAAC;;gBAlEF,SAAS,SAAC;oBACT,QAAQ,EAAE,MAAM,CAAC,EAAE;oBACnB,QAAQ,EAAE,6BAA6B;oBACvC,QAAQ,EAAE,u/CAsBT;oBACD,MAAM,EAAE,CAAC,QAER,CAAC;oBACF,eAAe,EAAE,uBAAuB,CAAC,MAAM;iBAChD;;;gBAnCyB,YAAY;gBAFV,QAAQ;gBAoDD,KAAK,uBAAnC,MAAM,SAAC,eAAe;;IAuB3B,uCAAC;CAAA,AApED,CA+BsD,qBAAqB,GAqC1E;SArCY,gCAAgC","sourcesContent":["import { Component, Inject, Injector, ChangeDetectionStrategy } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material';\n\nimport { ITableFiltersStatus } from '../../o-table-storage.class';\nimport { OTableBaseDialogClass } from '../o-table-base-dialog.class';\n\n@Component({\n  moduleId: module.id,\n  selector: 'o-table-store-filter-dialog',\n  template: `\n    <span mat-dialog-title>{{ 'TABLE.BUTTONS.SAVE_FILTER' | oTranslate }}</span>\n\n    <mat-dialog-content>\n      <div mat-subheader>{{ 'TABLE.DIALOG.SAVE_FILTER' | oTranslate }}</div>\n      <form #form [formGroup]=\"formGroup\" fxLayout=\"column\">\n        <mat-form-field>\n          <input matInput [matTooltip]=\"tooltipText\" [matTooltipClass]=\"tooltipClass\" placeholder=\"{{ 'TABLE.DIALOG.FILTER_NAME' | oTranslate }}\"\n            formControlName=\"name\" required>\n          <mat-error *ngIf=\"formGroup.controls['name'].hasError('filterNameAlreadyExists')\" text=\"{{ 'TABLE.DIALOG.FILTER_NAME_ALREADY_EXISTS' | oTranslate }}\"></mat-error>\n          <mat-error *ngIf=\"formGroup.controls['name'].hasError('required')\" text=\"{{ 'FORM_VALIDATION.REQUIRED' | oTranslate }}\"></mat-error>\n        </mat-form-field>\n        <mat-form-field class=\"example-full-width\">\n          <textarea matInput placeholder=\"{{ 'TABLE.DIALOG.FILTER_DESCRIPTION' | oTranslate }}\" formControlName=\"description\" rows=\"4\" cols=\"50\"></textarea>\n        </mat-form-field>\n      </form>\n    </mat-dialog-content>\n\n    <mat-dialog-actions align=\"end\">\n      <button type=\"button\" mat-stroked-button class=\"mat-primary\" [mat-dialog-close]=\"false\">{{ 'CANCEL' | oTranslate | uppercase }}</button>\n      <button type=\"button\" mat-stroked-button class=\"mat-primary\" [mat-dialog-close]=\"true\" [disabled]=\"!formGroup.valid\">{{'SAVE' | oTranslate | uppercase }}</button>\n    </mat-dialog-actions>\n  `,\n  styles: [`\n\n  `],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class OTableStoreFilterDialogComponent extends OTableBaseDialogClass {\n\n  filterNames: Array<string> = [];\n  formGroup: FormGroup = new FormGroup({\n    name: new FormControl('', [\n      Validators.required,\n      this.filterNameValidator.bind(this)\n    ]),\n    description: new FormControl('')\n  });\n\n  constructor(\n    public dialogRef: MatDialogRef<OTableStoreFilterDialogComponent>,\n    protected injector: Injector,\n    @Inject(MAT_DIALOG_DATA) data: Array<string>\n  ) {\n    super(injector);\n    this.setFormControl(this.formGroup.get('name'));\n    this.loadFilterNames(data);\n  }\n\n  loadFilterNames(filterNames): void {\n    this.filterNames = filterNames;\n  }\n\n  getFilterAttributes(): ITableFiltersStatus {\n    return this.formGroup.value;\n  }\n\n  protected filterNameValidator(control: FormControl) {\n    let ctrlValue: string = control.value;\n    if (this.filterNames.indexOf(ctrlValue) !== -1) {\n      return { 'filterNameAlreadyExists': true };\n    }\n    return {};\n  }\n\n}\n"]}