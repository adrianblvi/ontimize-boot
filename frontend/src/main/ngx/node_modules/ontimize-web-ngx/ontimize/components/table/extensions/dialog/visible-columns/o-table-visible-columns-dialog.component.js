import { Component, Inject, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, Injector } from '@angular/core';
import { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';
import { Util, Codes } from '../../../../../utils';
import { DragDropService } from '@churchs19/ng2-dnd';
var OTableVisibleColumnsDialogComponent = (function () {
    function OTableVisibleColumnsDialogComponent(injector, dialogRef, data) {
        var _this = this;
        this.injector = injector;
        this.dialogRef = dialogRef;
        this.columns = [];
        this.rowHeight = Codes.DEFAULT_ROW_HEIGHT;
        try {
            this.cd = this.injector.get(ChangeDetectorRef);
        }
        catch (e) {
        }
        if (Util.isArray(data.columnsData) && Util.isArray(data.originalVisibleColumns)) {
            var originalCols_1 = data.originalVisibleColumns;
            data.columnsData.forEach(function (oCol) {
                _this.columns.push({
                    attr: oCol.attr,
                    title: oCol.title,
                    visible: oCol.visible,
                    showInList: (oCol.definition !== undefined || oCol.visible || originalCols_1.indexOf(oCol.attr) !== -1)
                });
            });
        }
        if (Util.isDefined(data.rowHeight)) {
            this.rowHeight = data.rowHeight;
        }
    }
    OTableVisibleColumnsDialogComponent.prototype.getVisibleColumns = function () {
        return this.columns.filter(function (col) { return col.visible; }).map(function (col) { return col.attr; });
    };
    OTableVisibleColumnsDialogComponent.prototype.getColumnsOrder = function () {
        return this.columns.map(function (col) { return col.attr; });
    };
    OTableVisibleColumnsDialogComponent.prototype.onClickColumn = function (col) {
        col.visible = !col.visible;
    };
    OTableVisibleColumnsDialogComponent.prototype.onDragSuccess = function (arg) {
        this.cd.detectChanges();
    };
    OTableVisibleColumnsDialogComponent.decorators = [
        { type: Component, args: [{
                    moduleId: module.id,
                    selector: 'o-table-visible-columns-dialog',
                    template: "\n    <span mat-dialog-title>{{ 'TABLE.BUTTONS.COLVIS' | oTranslate }}</span>\n\n    <mat-dialog-content>\n      <mat-list dnd-sortable-container [sortableData]=\"columns\" [ngClass]=\"rowHeight\">\n        <ng-container *ngFor=\"let column of columns; let x = index\">\n          <mat-list-item *ngIf=\"column.showInList\" (click)=\"onClickColumn(column)\" dnd-sortable [sortableIndex]=\"x\"\n            [dragData]=\"column\" [dragEnabled]=\"true\" (onDragSuccess)=\"onDragSuccess($event)\">\n            <mat-icon mat-list-icon svgIcon=\"ontimize:drag_handle\"></mat-icon>\n            <span mat-line>{{ (column.title || column.attr) | oTranslate }}</span>\n            <mat-icon *ngIf=\"column.visible\" svgIcon=\"ontimize:visibility\"></mat-icon>\n            <mat-icon *ngIf=\"!column.visible\" svgIcon=\"ontimize:visibility_off\"></mat-icon>\n          </mat-list-item>\n        </ng-container>\n      </mat-list>\n    </mat-dialog-content>\n\n    <mat-dialog-actions fxLayoutAlign=\"end center\">\n      <button type=\"button\" mat-stroked-button [mat-dialog-close]=\"false\">{{ 'CANCEL' | oTranslate | uppercase }}</button>\n      <button type=\"button\" mat-stroked-button [mat-dialog-close]=\"true\">{{ 'ACCEPT' | oTranslate | uppercase }}</button>\n    </mat-dialog-actions>\n  ",
                    styles: ["\n    .o-table-visible-columns-dialog .mat-dialog-content.mat-dialog-content{overflow:auto;padding-top:0;margin-top:24px}.o-table-visible-columns-dialog .mat-dialog-content.mat-dialog-content .mat-list{padding-top:24px}.o-table-visible-columns-dialog .mat-dialog-content.mat-dialog-content .mat-list .mat-list-item{cursor:pointer}.o-table-visible-columns-dialog .mat-dialog-content.mat-dialog-content .mat-list .mat-list-item .mat-list-item-content{padding:0}.o-table-visible-columns-dialog .mat-dialog-content.mat-dialog-content .mat-list .mat-list-item .mat-list-item-content div.mat-list-text{padding:0 8px}.o-table-visible-columns-dialog .mat-dialog-content.mat-dialog-content .mat-icon[svgicon=\"ontimize:drag_handle\"]{cursor:move}.o-table-visible-columns-dialog .mat-dialog-content.mat-dialog-content .mat-icon[svgicon=\"ontimize:visibility\"],.o-table-visible-columns-dialog .mat-dialog-content.mat-dialog-content .mat-icon[svgicon=\"ontimize:visibility_off\"]{width:32px}\n  "],
                    encapsulation: ViewEncapsulation.None,
                    providers: [DragDropService],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: {
                        '[class.o-table-visible-columns-dialog]': 'true'
                    }
                },] },
    ];
    OTableVisibleColumnsDialogComponent.ctorParameters = function () { return [
        { type: Injector },
        { type: MatDialogRef },
        { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
    ]; };
    return OTableVisibleColumnsDialogComponent;
}());
export { OTableVisibleColumnsDialogComponent };
//# sourceMappingURL=o-table-visible-columns-dialog.component.js.map