{"version":3,"file":"o-form-control.class.js","sourceRoot":"","sources":["../../../../tmp/ontimize/components/input/o-form-control.class.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAA4C,WAAW,EAAe,MAAM,gBAAgB,CAAC;AAGpG;IAAkC,gCAAW;IAG3C,sBACE,SAAqB,EACrB,eAA6E,EAC7E,cAA6D;QAF7D,0BAAA,EAAA,gBAAqB;eAIrB,kBAAM,SAAS,EAAE,eAAe,EAAE,cAAc,CAAC;IACnD,CAAC;IAED,oCAAa,GAAb,UAAc,IAAiC;QAAjC,qBAAA,EAAA,SAAiC;QAC7C,iBAAM,aAAa,YAAC,IAAI,CAAC,CAAC;QAC1B,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE;YAC1B,OAAO;SACR;QACD,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,UAAA,CAAC;YAC7B,IAAI,CAAC,YAAY,WAAW,EAAE;gBAC5B,CAAC,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;aACvB;iBAAM;gBACL,IAAI,CAAC,CAAC,cAAc,EAAE,EAAE;oBAEtB,CAAC,CAAC,cAAc,EAAE,CAAC,aAAa,EAAE,CAAC;iBACpC;aACF;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,kCAAW,GAAX,UAAY,IAAiC;QAAjC,qBAAA,EAAA,SAAiC;QAC3C,iBAAM,WAAW,YAAC,IAAI,CAAC,CAAC;QACxB,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE;YAC1B,OAAO;SACR;QACD,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,UAAA,CAAC;YAC7B,IAAI,CAAC,YAAY,WAAW,EAAE;gBAC5B,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;aACrB;iBAAM;gBACL,IAAI,CAAC,CAAC,cAAc,EAAE,EAAE;oBACtB,CAAC,CAAC,cAAc,EAAE,CAAC,WAAW,EAAE,CAAC;iBAClC;aACF;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,qCAAc,GAAd,UAAe,IAAiC;QAAjC,qBAAA,EAAA,SAAiC;QAC9C,iBAAM,cAAc,YAAC,IAAI,CAAC,CAAC;QAC3B,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE;YAC1B,OAAO;SACR;QACD,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,UAAA,CAAC;YAC7B,IAAI,CAAC,YAAY,WAAW,EAAE;gBAC5B,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;aACxB;iBAAM;gBACL,IAAI,CAAC,CAAC,cAAc,EAAE,EAAE;oBACtB,CAAC,CAAC,cAAc,EAAE,CAAC,cAAc,EAAE,CAAC;iBACrC;aACF;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,+BAAQ,GAAR;QACE,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAIH,mBAAC;AAAD,CAAC,AAlED,CAAkC,WAAW,GAkE5C","sourcesContent":["import { AbstractControlOptions, AsyncValidatorFn, FormControl, ValidatorFn } from '@angular/forms';\nimport { OFormDataComponent } from '../o-form-data-component.class';\n\nexport class OFormControl extends FormControl {\n  public fControlChildren: (FormControl | OFormDataComponent)[];\n\n  constructor(\n    formState: any = null,\n    validatorOrOpts?: ValidatorFn | ValidatorFn[] | AbstractControlOptions | null,\n    asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null\n  ) {\n    super(formState, validatorOrOpts, asyncValidator);\n  }\n\n  markAsTouched(opts: { onlySelf?: boolean } = {}): void {\n    super.markAsTouched(opts);\n    if (!this.fControlChildren) {\n      return;\n    }\n    this.fControlChildren.forEach(x => {\n      if (x instanceof FormControl) {\n        x.markAsTouched(opts);\n      } else {\n        if (x.getFormControl()) {\n\n          x.getFormControl().markAsTouched();\n        }\n      }\n    });\n  }\n\n  markAsDirty(opts: { onlySelf?: boolean } = {}): void {\n    super.markAsDirty(opts);\n    if (!this.fControlChildren) {\n      return;\n    }\n    this.fControlChildren.forEach(x => {\n      if (x instanceof FormControl) {\n        x.markAsDirty(opts);\n      } else {\n        if (x.getFormControl()) {\n          x.getFormControl().markAsDirty();\n        }\n      }\n    });\n  }\n\n  markAsPristine(opts: { onlySelf?: boolean } = {}): void {\n    super.markAsPristine(opts);\n    if (!this.fControlChildren) {\n      return;\n    }\n    this.fControlChildren.forEach(x => {\n      if (x instanceof FormControl) {\n        x.markAsPristine(opts);\n      } else {\n        if (x.getFormControl()) {\n          x.getFormControl().markAsPristine();\n        }\n      }\n    });\n  }\n\n  getValue() {\n    return this.value;\n  }\n\n  /**setValue(value: any, options: { } => Not override this method because there is a case where the children have a different value than the main one\n   */\n}\n"]}