{"version":3,"file":"o-table-apply-configuration-dialog.component.js","sourceRoot":"","sources":["../../../../../../../tmp/ontimize/components/table/extensions/dialog/apply-configuration/o-table-apply-configuration-dialog.component.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,0BAA0B,CAAC;AAC1D,OAAO,EAAE,SAAS,EAAE,YAAY,EAAE,MAAM,EAAE,QAAQ,EAAU,SAAS,EAAE,MAAM,eAAe,CAAC;AAC7F,OAAO,EAAE,eAAe,EAAE,YAAY,EAAiB,gBAAgB,EAAE,MAAM,mBAAmB,CAAC;AAEnG,OAAO,EAAE,aAAa,EAAE,MAAM,yBAAyB,CAAC;AAGxD;IA+CE,iDACS,SAAgE,EAC9C,IAA2B,EAC1C,QAAkB;QAFrB,cAAS,GAAT,SAAS,CAAuD;QAE7D,aAAQ,GAAR,QAAQ,CAAU;QAbvB,0BAAqB,GAAG,iDAAiD,CAAC;QAC1E,mBAAc,GAA0B,EAAE,CAAC;QAE3C,aAAQ,GAAyB,IAAI,YAAY,EAAE,CAAC;QAYzD,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;QAC9B,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;IACxD,CAAC;IAEM,0DAAQ,GAAf;QACE,IAAI,CAAC,iBAAiB,CAAC,eAAe,GAAG,IAAI,cAAc,CAAgB,KAAK,CAAC,CAAC;IACpF,CAAC;IAEM,oEAAkB,GAAzB,UAA0B,cAAqC;QAC7D,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;IACvC,CAAC;IAEM,qEAAmB,GAA1B,UAA2B,iBAAyB;QAApD,iBAMC;QALC,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,SAAS,EAAE,2CAA2C,CAAC,CAAC,IAAI,CAAC,UAAA,MAAM;YAC5F,IAAI,MAAM,EAAE;gBACV,KAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;aACvC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,gFAA8B,GAArC;QACE,IAAM,QAAQ,GAAoB,IAAI,CAAC,iBAAiB,CAAC,eAAe,CAAC,QAAQ,CAAC;QAClF,IAAM,aAAa,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;QACnE,OAAO,aAAa,KAAK,IAAI,CAAC,qBAAqB,CAAC;IACtD,CAAC;IAEM,8EAA4B,GAAnC;QACE,IAAM,QAAQ,GAAoB,IAAI,CAAC,iBAAiB,CAAC,eAAe,CAAC,QAAQ,CAAC;QAClF,OAAO,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;IACtD,CAAC;;gBAjFF,SAAS,SAAC;oBACT,QAAQ,EAAE,MAAM,CAAC,EAAE;oBACnB,QAAQ,EAAE,oCAAoC;oBAC9C,QAAQ,EAAE,qzDA2BT;oBACD,MAAM,EAAE,CAAC,QAER,CAAC;iBACH;;;gBAvCyB,YAAY;4CAsDjC,MAAM,SAAC,eAAe;gBAvDe,QAAQ;;;oCAgD/C,SAAS,SAAC,gBAAgB;;IAyC7B,8CAAC;CAAA,AAnFD,IAmFC;SAhDY,uCAAuC","sourcesContent":["import { SelectionModel } from '@angular/cdk/collections';\nimport { Component, EventEmitter, Inject, Injector, OnInit, ViewChild } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef, MatListOption, MatSelectionList } from '@angular/material';\n\nimport { DialogService } from '../../../../../services';\nimport { ITableConfiguration } from '../../o-table-storage.class';\n\n@Component({\n  moduleId: module.id,\n  selector: 'o-table-apply-configuration-dialog',\n  template: `\n    <span mat-dialog-title>{{ 'TABLE.BUTTONS.APPLY_CONFIGURATION' | oTranslate }}</span>\n\n    <mat-dialog-content fxLayout=\"column\">\n      <div mat-subheader>{{ 'TABLE.DIALOG.APPLY_CONFIGURATION' | oTranslate }}</div>\n      <mat-selection-list #configurationList dense class=\"o-table-apply-configuration-dialog-list\">\n        <mat-list-option checkboxPosition=\"before\" [value]=\"default_configuration\">\n          <span matLine class=\"o-table-apply-configuration-dialog-list-title\">{{ 'TABLE.DIALOG.APPLY_CONFIGURATION_DEFAULT' | oTranslate }}</span>\n          <span matLine>{{ 'TABLE.DIALOG.APPLY_CONFIGURATION_DEFAULT_DESCRIPTION' | oTranslate }}</span>\n        </mat-list-option>\n        <mat-list-option checkboxPosition=\"before\" *ngFor=\"let configuration of configurations; let i = index\" [value]=\"configuration.name\">\n          <span matLine>{{ configuration.name }}</span>\n          <span matLine>{{ configuration.description }}</span>\n        </mat-list-option>\n      </mat-selection-list>\n    </mat-dialog-content>\n\n    <mat-dialog-actions align=\"end\">\n      <button type=\"button\" mat-stroked-button [disabled]=\"configurationList.selectedOptions.selected.length!==1 || isDefaultConfigurationSelected()\"\n        (click)=\"removeConfiguration(configurationList.selectedOptions.selected[0].value)\">\n        {{ 'DELETE' | oTranslate | uppercase }}\n      </button>\n      <span fxFlex></span>\n      <button type=\"button\" mat-stroked-button class=\"mat-primary\" [mat-dialog-close]=\"false\">{{ 'CANCEL' | oTranslate | uppercase }}</button>\n      <button type=\"button\" mat-stroked-button class=\"mat-primary\" [mat-dialog-close]=\"true\"\n        [disabled]=\"configurationList.selectedOptions.selected.length!==1\">{{ 'OK' | oTranslate | uppercase }}</button>\n    </mat-dialog-actions>\n  `,\n  styles: [`\n\n  `]\n})\nexport class OTableApplyConfigurationDialogComponent implements OnInit {\n\n  public default_configuration = 'OTableApplyConfigurationDialogComponent-default';\n  public configurations: ITableConfiguration[] = [];\n\n  public onDelete: EventEmitter<string> = new EventEmitter();\n\n  @ViewChild(MatSelectionList)\n  protected configurationList: MatSelectionList;\n\n  protected dialogService: DialogService;\n\n  constructor(\n    public dialogRef: MatDialogRef<OTableApplyConfigurationDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) data: ITableConfiguration[],\n    protected injector: Injector\n  ) {\n    this.loadConfigurations(data);\n    this.dialogService = this.injector.get(DialogService);\n  }\n\n  public ngOnInit(): void {\n    this.configurationList.selectedOptions = new SelectionModel<MatListOption>(false);\n  }\n\n  public loadConfigurations(configurations: ITableConfiguration[]): void {\n    this.configurations = configurations;\n  }\n\n  public removeConfiguration(configurationName: string): void {\n    this.dialogService.confirm('CONFIRM', 'TABLE.DIALOG.CONFIRM_REMOVE_CONFIGURATION').then(result => {\n      if (result) {\n        this.onDelete.emit(configurationName);\n      }\n    });\n  }\n\n  public isDefaultConfigurationSelected(): boolean {\n    const selected: MatListOption[] = this.configurationList.selectedOptions.selected;\n    const selectedValue = selected.length ? selected[0].value : void 0;\n    return selectedValue === this.default_configuration;\n  }\n\n  public getSelectedConfigurationName(): string {\n    const selected: MatListOption[] = this.configurationList.selectedOptions.selected;\n    return selected.length ? selected[0].value : void 0;\n  }\n\n}\n"]}