var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { CommonModule } from '@angular/common';
import { Component, ElementRef, forwardRef, Inject, Injector, NgModule, Optional, ViewChild } from '@angular/core';
import * as _moment from 'moment';
import { InputConverter } from '../../../decorators/input-converter';
import { MomentService } from '../../../services/moment.service';
import { OTranslateService } from '../../../services/translate/o-translate.service';
import { OSharedModule } from '../../../shared';
import { Util } from '../../../util/util';
import { OFormComponent } from '../../form/o-form.component';
import { OFormDataComponent, OValueChangeEvent } from '../../o-form-data-component.class';
import { DEFAULT_INPUTS_O_DATE_INPUT } from '../date-input/o-date-input.component';
import { DEFAULT_OUTPUTS_O_TEXT_INPUT } from '../text-input/o-text-input.component';
import { ODaterangepickerDirective } from './o-daterange-input.directive';
import { DaterangepickerComponent } from './o-daterange-picker.component';
export var DEFAULT_OUTPUTS_O_DATERANGE_INPUT = DEFAULT_OUTPUTS_O_TEXT_INPUT.slice();
export var DEFAULT_INPUTS_O_DATERANGE_INPUT = [
    'separator',
    'showWeekNumbers:show-week-numbers',
    'showRanges:show-ranges',
    'olocale:locale',
    'startKey',
    'endKey'
].concat(DEFAULT_INPUTS_O_DATE_INPUT);
var moment = _moment;
var ODateRangeInputComponent = (function (_super) {
    __extends(ODateRangeInputComponent, _super);
    function ODateRangeInputComponent(form, elRef, injector) {
        var _this = _super.call(this, form, elRef, injector) || this;
        _this.textInputEnabled = true;
        _this.showWeekNumbers = false;
        _this.oTouchUi = false;
        _this.showRanges = false;
        _this._startKey = 'startDate';
        _this._endKey = 'endDate';
        _this._separator = ' - ';
        _this.oformat = 'L';
        _this.oTranslate = _this.injector.get(OTranslateService);
        _this.momentSrv = _this.injector.get(MomentService);
        _this._localeOptions = {
            direction: 'ltr',
            separator: ' - ',
            weekLabel: _this.oTranslate.get('DATERANGE.W'),
            applyLabel: _this.oTranslate.get('DATERANGE.APPLYLABEL'),
            cancelLabel: _this.oTranslate.get('CANCEL'),
            customRangeLabel: 'Custom range',
            daysOfWeek: moment.weekdaysMin(),
            monthNames: moment.monthsShort(),
            firstDay: moment.localeData().firstDayOfWeek(),
            format: 'L'
        };
        return _this;
    }
    Object.defineProperty(ODateRangeInputComponent.prototype, "oMinDate", {
        get: function () {
            return this._oMinDate;
        },
        set: function (value) {
            this._oMinDate = moment(value, this.oformat);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ODateRangeInputComponent.prototype, "oMaxDate", {
        get: function () {
            return this._oMaxDate;
        },
        set: function (value) {
            this._oMaxDate = moment(value, this.oformat);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ODateRangeInputComponent.prototype, "startKey", {
        get: function () {
            return this._startKey;
        },
        set: function (value) {
            this._startKey = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ODateRangeInputComponent.prototype, "endKey", {
        get: function () {
            return this._endKey;
        },
        set: function (value) {
            this._endKey = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ODateRangeInputComponent.prototype, "separator", {
        get: function () {
            return this._separator;
        },
        set: function (value) {
            this._separator = value;
            if (this.getFormControl() && this.getFormControl().value) {
                this.updateElement();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ODateRangeInputComponent.prototype, "showClearButton", {
        get: function () {
            return this.clearButton && !this.isReadOnly && this.enabled && this.matInputRef.nativeElement.value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ODateRangeInputComponent.prototype, "localeOptions", {
        get: function () {
            return this._localeOptions;
        },
        enumerable: true,
        configurable: true
    });
    ODateRangeInputComponent.prototype.ngOnInit = function () {
        _super.prototype.ngOnInit.call(this);
        if (!this.olocale) {
            this.olocale = this.momentSrv.getLocale();
            moment.locale(this.olocale);
        }
        if (this.oformat) {
            this._localeOptions.format = this.oformat;
        }
    };
    ODateRangeInputComponent.prototype.openPicker = function () {
        this.pickerDirective.open();
    };
    ODateRangeInputComponent.prototype.onChangeEvent = function (event) {
        var objectValue;
        if (event instanceof Event) {
            var value = event.target.value;
            if (value !== '') {
                objectValue = this.getDateRangeToString(value);
            }
        }
        else {
            objectValue = event;
        }
        this.setValue(objectValue, {
            changeType: OValueChangeEvent.USER_CHANGE,
            emitEvent: false,
            emitModelToViewChange: false
        });
    };
    ODateRangeInputComponent.prototype.setValue = function (val, options, setDirty) {
        if (options === void 0) { options = {}; }
        if (setDirty === void 0) { setDirty = false; }
        _super.prototype.setValue.call(this, val, options, setDirty);
        this.updateElement();
    };
    ODateRangeInputComponent.prototype.onClickClearValue = function (e) {
        _super.prototype.onClickClearValue.call(this, e);
        this.pickerDirective.value = undefined;
        this.pickerDirective.datesUpdated.emit(undefined);
    };
    ODateRangeInputComponent.prototype.datesUpdated = function (range) {
        this.pickerDirective.close();
        this.setValue(range, {
            changeType: OValueChangeEvent.USER_CHANGE,
            emitEvent: false,
            emitModelToViewChange: false
        });
    };
    ODateRangeInputComponent.prototype.setData = function (newValue) {
        _super.prototype.setData.call(this, newValue);
        this.pickerDirective.datesUpdated.emit(newValue);
        this.updateElement();
    };
    ODateRangeInputComponent.prototype.updateElement = function () {
        var chosenLabel = (!this.isObjectDataRangeNull(this.value)) ? this.value.value[this.pickerDirective.startKey].format(this.oformat) +
            this.separator + this.value.value[this.pickerDirective.endKey].format(this.oformat) : null;
        this.pickerDirective._el.nativeElement.value = chosenLabel;
    };
    ODateRangeInputComponent.prototype.getDateRangeToString = function (valueToString) {
        var value = {};
        var range = valueToString.split(this.separator);
        value[this._startKey] = moment(range[0].trim(), this.oformat);
        value[this._endKey] = moment(range[1].trim(), this.oformat);
        return value;
    };
    ODateRangeInputComponent.prototype.resolveValidators = function () {
        var validators = _super.prototype.resolveValidators.call(this);
        validators.push(this.rangeDateValidator.bind(this));
        if (Util.isDefined(this._oMinDate)) {
            validators.push(this.minDateValidator.bind(this));
        }
        if (Util.isDefined(this._oMaxDate)) {
            validators.push(this.maxDateValidator.bind(this));
        }
        validators.push(this.parseDateValidator.bind(this));
        return validators;
    };
    ODateRangeInputComponent.prototype.isObjectDataRangeNull = function (objectValue) {
        return objectValue !== null && objectValue.value !== null &&
            !Util.isDefined(objectValue.value[this.pickerDirective.startKey]) &&
            !Util.isDefined(objectValue.value[this.pickerDirective.endKey]);
    };
    ODateRangeInputComponent.prototype.rangeDateValidator = function (control) {
        if ((control.value instanceof Object)
            && !this.isObjectDataRangeNull(control) && control.value[this._endKey].isSameOrBefore(control.value[this._startKey])) {
            return {
                dateRange: true
            };
        }
        return {};
    };
    ODateRangeInputComponent.prototype.minDateValidator = function (control) {
        var mindate = moment(this._oMinDate);
        if ((control.value instanceof Object)
            && !this.isObjectDataRangeNull(control) && control.value[this._startKey].isBefore(mindate)) {
            return {
                dateRangeMin: {
                    dateMin: mindate.format(this.oformat)
                }
            };
        }
        return {};
    };
    ODateRangeInputComponent.prototype.maxDateValidator = function (control) {
        var maxdate = moment(this._oMaxDate);
        if ((control.value instanceof Object)
            && !this.isObjectDataRangeNull(control) && control.value[this._endKey].isAfter(maxdate)) {
            return {
                dateRangeMax: {
                    dateMax: maxdate.format(this.oformat)
                }
            };
        }
        return {};
    };
    ODateRangeInputComponent.prototype.parseDateValidator = function (control) {
        if ((control.value instanceof Object)
            && !this.isObjectDataRangeNull(control)
            && ((control.value[this._startKey] && !control.value[this._startKey].isValid())
                || (control.value[this._endKey] && !control.value[this._endKey].isValid()))) {
            return {
                dateRangeParse: {
                    format: this.oformat + this._localeOptions.separator + this.oformat
                }
            };
        }
        return {};
    };
    ODateRangeInputComponent.decorators = [
        { type: Component, args: [{
                    moduleId: module.id,
                    selector: 'o-daterange-input',
                    template: "\n    <div fxLayout=\"row\" fxLayoutAlign=\"space-between center\" [formGroup]=\"getFormGroup()\" [matTooltip]=\"tooltip\"\n      [matTooltipClass]=\"tooltipClass\" [matTooltipPosition]=\"tooltipPosition\" [matTooltipShowDelay]=\"tooltipShowDelay\"\n      [matTooltipHideDelay]=\"tooltipHideDelay\">\n\n      <mat-form-field [appearance]=\"appearance\" [floatLabel]=\"floatLabel\" [hideRequiredMarker]=\"hideRequiredMarker\"\n        [class.custom-width]=\"hasCustomWidth\" class=\"icon-field\" fxFlexFill>\n        <mat-label *ngIf=\"labelVisible\">{{ olabel | oTranslate }}</mat-label>\n        <input #matInputRef matInput type=\"text\" o-daterange-input [id]=\"getAttribute()\" [formControlName]=\"getAttribute()\"\n          [required]=\"isRequired\" [placeholder]=\"placeHolder\" [readonly]=\"isReadOnly || !textInputEnabled\"\n          showDropdowns=\"true\" showCancel=\"true\" [showRanges]=\"showRanges\" \n          (datesUpdated)=\"datesUpdated($event)\" [oTouchUi]=\"oTouchUi\" [minDate]=\"oMinDate\" [maxDate]=\"oMaxDate\"\n          (focus)=\"innerOnFocus($event)\" (blur)=\"innerOnBlur($event)\" (change)=\"onChangeEvent($event)\" [locale]=\"localeOptions\"   [separator]=\"separator\"\n          [startKey]=\"startKey\" [endKey]=\"endKey\" [showWeekNumbers]=\"showWeekNumbers\">\n        <button type=\"button\" matSuffix mat-icon-button (click)=\"openPicker()\" [disabled]=\"isReadOnly || !enabled\">\n          <mat-icon>today</mat-icon>\n        </button>\n\n        <button type=\"button\" *ngIf=\"showClearButton\" matSuffix mat-icon-button (click)=\"onClickClearValue($event)\"\n          [disabled]=\"isReadOnly || !enabled\">\n          <mat-icon svgIcon=\"ontimize:close\"></mat-icon>\n        </button>\n\n        <mat-error *ngIf=\"hasError('required')\" text=\"{{ 'FORM_VALIDATION.REQUIRED' | oTranslate }}\"></mat-error>\n        <mat-error *ngIf=\"hasError('dateRange')\" text=\"{{ 'FORM_VALIDATION.DATERANGE_INVALID' | oTranslate }}\"></mat-error>\n        <mat-error *ngIf=\"hasError('dateRangeParse')\"\n          text=\"{{ 'FORM_VALIDATION.DATE_PARSE' | oTranslate }} : {{ getErrorValue('dateRangeParse', 'format') }}\">\n        </mat-error>\n        <mat-error *ngIf=\"hasError('dateRangeMin')\"\n          text=\"{{ 'FORM_VALIDATION.DATERANGE_MIN' | oTranslate }} : {{ getErrorValue('dateRangeMin', 'dateMin') }}\">\n        </mat-error>\n        <mat-error *ngIf=\"hasError('dateRangeMax')\"\n          text=\"{{ 'FORM_VALIDATION.DATERANGE_MAX' | oTranslate }} : {{ getErrorValue('dateRangeMax', 'dateMax') }}\">\n        </mat-error>\n        <mat-error *ngFor=\"let oError of getActiveOErrors()\" text=\"{{ oError.text | oTranslate }}\"></mat-error>\n      </mat-form-field>\n    </div>\n  ",
                    styles: ['./o-daterange-input.component.scss'],
                    outputs: DEFAULT_OUTPUTS_O_DATERANGE_INPUT,
                    inputs: DEFAULT_INPUTS_O_DATERANGE_INPUT
                },] },
    ];
    ODateRangeInputComponent.ctorParameters = function () { return [
        { type: OFormComponent, decorators: [{ type: Optional }, { type: Inject, args: [forwardRef(function () { return OFormComponent; }),] }] },
        { type: ElementRef },
        { type: Injector }
    ]; };
    ODateRangeInputComponent.propDecorators = {
        pickerDirective: [{ type: ViewChild, args: [ODaterangepickerDirective,] }],
        matInputRef: [{ type: ViewChild, args: ['matInputRef',] }]
    };
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], ODateRangeInputComponent.prototype, "textInputEnabled", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], ODateRangeInputComponent.prototype, "showWeekNumbers", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], ODateRangeInputComponent.prototype, "oTouchUi", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], ODateRangeInputComponent.prototype, "showRanges", void 0);
    return ODateRangeInputComponent;
}(OFormDataComponent));
export { ODateRangeInputComponent };
var ODateRangeInputModule = (function () {
    function ODateRangeInputModule() {
    }
    ODateRangeInputModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [DaterangepickerComponent, ODateRangeInputComponent, ODaterangepickerDirective],
                    imports: [CommonModule, OSharedModule],
                    exports: [ODateRangeInputComponent],
                    entryComponents: [
                        DaterangepickerComponent
                    ],
                    providers: []
                },] },
    ];
    return ODateRangeInputModule;
}());
export { ODateRangeInputModule };
//# sourceMappingURL=o-daterange-input.component.js.map