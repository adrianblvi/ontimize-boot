{"version":3,"file":"o-table-cell-renderer-boolean.component.js","sourceRoot":"","sources":["../../../../../../../tmp/ontimize/components/table/column/cell-renderer/boolean/o-table-cell-renderer-boolean.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, Injector, ViewChild, TemplateRef, OnInit, ChangeDetectionStrategy } from '@angular/core';\nimport { OTranslateService } from '../../../../../services';\nimport { Util } from '../../../../../utils';\nimport { OBaseTableCellRenderer } from '../o-base-table-cell-renderer.class';\n\nexport const DEFAULT_INPUTS_O_TABLE_CELL_RENDERER_BOOLEAN = [\n  // true-value [string]: true value. Default: no value.\n  'trueValue: true-value',\n  // false-value [string]: false value. Default: no value.\n  'falseValue: false-value',\n  // false-value [number|boolean|string]: cellData value type. Default: boolean\n  'booleanType: boolean-type',\n\n  'renderTrueValue: render-true-value',\n  'renderFalseValue: render-false-value',\n  // [string|number|icon|image]\n  'renderType: render-type'\n];\n\n@Component({\n  moduleId: module.id,\n  selector: 'o-table-cell-renderer-boolean',\n  template: `\n    <ng-template #templateref let-cellvalue=\"cellvalue\">\n      <ng-container *ngIf=\"hasCellDataTrueValue(cellvalue)\">\n        <ng-container [ngSwitch]=\"renderType\">\n          <ng-container *ngSwitchCase=\"'number'\">{{ renderTrueValue }}</ng-container>\n          <ng-container *ngSwitchCase=\"'icon'\">\n            <mat-icon class=\"material-icons\"> {{ renderTrueValue }}</mat-icon>\n          </ng-container>\n          <ng-container *ngSwitchCase=\"'image'\">\n            <img [src]=\"renderTrueValue\" />\n          </ng-container>\n          <span *ngSwitchDefault>{{ renderTrueValue | oTranslate }}</span>\n        </ng-container>\n      </ng-container>\n      <ng-container *ngIf=\"!hasCellDataTrueValue(cellvalue)\">\n        <ng-container [ngSwitch]=\"renderType\">\n          <ng-container *ngSwitchCase=\"'number'\">{{ renderFalseValue }}</ng-container>\n          <ng-container *ngSwitchCase=\"'icon'\">\n            <mat-icon class=\"material-icons\"> {{ renderFalseValue }}</mat-icon>\n          </ng-container>\n          <ng-container *ngSwitchCase=\"'image'\">\n            <img [src]=\"renderFalseValue\" />\n          </ng-container>\n          <ng-container *ngSwitchDefault>{{ renderFalseValue | oTranslate}}</ng-container>\n        </ng-container>\n      </ng-container>\n    </ng-template>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: DEFAULT_INPUTS_O_TABLE_CELL_RENDERER_BOOLEAN\n})\nexport class OTableCellRendererBooleanComponent extends OBaseTableCellRenderer implements OnInit {\n\n  public static DEFAULT_INPUTS_O_TABLE_CELL_RENDERER_BOOLEAN = DEFAULT_INPUTS_O_TABLE_CELL_RENDERER_BOOLEAN;\n\n  trueValue: any;\n  falseValue: any;\n  protected _renderTrueValue: any;\n  protected _renderFalseValue: any;\n\n  protected _renderType: string = 'string';\n  protected _booleanType: string = 'boolean';\n  protected translateService: OTranslateService;\n\n  @ViewChild('templateref', { read: TemplateRef })\n  templateref: TemplateRef<any>;\n\n  constructor(protected injector: Injector) {\n    super(injector);\n    this.tableColumn.type = 'boolean';\n    this.translateService = this.injector.get(OTranslateService);\n  }\n\n  ngOnInit() {\n    this.parseInputs();\n  }\n\n  protected parseInputs() {\n    switch (this.booleanType) {\n      case 'string':\n        this.parseStringInputs();\n        break;\n      case 'number':\n        this.parseNumberInputs();\n        break;\n      default:\n        this.trueValue = true;\n        this.falseValue = false;\n        break;\n    }\n  }\n\n  protected parseStringInputs() {\n    if ((this.trueValue || '').length === 0) {\n      this.trueValue = undefined;\n    }\n    if ((this.falseValue || '').length === 0) {\n      this.falseValue = undefined;\n    }\n  }\n\n  protected parseNumberInputs() {\n    this.trueValue = parseInt(this.trueValue);\n    if (isNaN(this.trueValue)) {\n      this.trueValue = 1;\n    }\n    this.falseValue = parseInt(this.falseValue);\n    if (isNaN(this.falseValue)) {\n      this.falseValue = 0;\n    }\n  }\n\n  hasCellDataTrueValue(cellData: any): boolean {\n    let result: boolean = undefined;\n    if (Util.isDefined(cellData)) {\n      result = (cellData === this.trueValue);\n      if (this.booleanType === 'string' && !Util.isDefined(this.trueValue)) {\n        result = Util.parseBoolean(cellData, false);\n      }\n    }\n    return result;\n  }\n\n  getCellData(cellvalue: any, rowvalue?: any) {\n    let result = cellvalue;\n    const cellIsTrue = this.hasCellDataTrueValue(cellvalue);\n    let value = cellIsTrue ? this.trueValue : this.falseValue;\n    switch (this.renderType) {\n      case 'string':\n        result = this.translateService.get(value);\n        break;\n      case 'number':\n        result = value;\n        break;\n      default:\n        break;\n    }\n    return result;\n  }\n\n  get booleanType(): string {\n    return this._booleanType;\n  }\n\n  set booleanType(arg: string) {\n    arg = (arg || '').toLowerCase();\n    if (['number', 'boolean', 'string'].indexOf(arg) === -1) {\n      arg = 'boolean';\n    }\n    this._booleanType = arg;\n  }\n\n  get renderType(): string {\n    return this._renderType;\n  }\n\n  set renderType(arg: string) {\n    arg = (arg || '').toLowerCase();\n    if (['string', 'number', 'icon', 'image'].indexOf(arg) === -1) {\n      arg = 'string';\n    }\n    this._renderType = arg;\n  }\n\n  get renderTrueValue(): string {\n    return this._renderTrueValue || this.trueValue;\n  }\n\n  set renderTrueValue(arg: string) {\n    this._renderTrueValue = arg;\n  }\n\n  get renderFalseValue(): string {\n    return this._renderFalseValue || this.falseValue;\n  }\n\n  set renderFalseValue(arg: string) {\n    this._renderFalseValue = arg;\n  }\n}\n"]}