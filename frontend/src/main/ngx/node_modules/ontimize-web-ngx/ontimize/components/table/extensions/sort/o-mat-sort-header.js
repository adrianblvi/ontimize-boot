var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Component, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, Optional } from '@angular/core';
import { matSortAnimations, MatSortHeader, MatSortHeaderIntl } from '@angular/material';
import { CdkColumnDef } from '@angular/cdk/table';
import { OMatSort } from './o-mat-sort';
var OMatSortHeader = (function (_super) {
    __extends(OMatSortHeader, _super);
    function OMatSortHeader(_intl, changeDetectorRef, _sort, _cdkColumnDef) {
        var _this = _super.call(this, _intl, changeDetectorRef, _sort, _cdkColumnDef) || this;
        _this._intl = _intl;
        _this._sort = _sort;
        _this._cdkColumnDef = _cdkColumnDef;
        return _this;
    }
    OMatSortHeader.prototype._handleClick = function () {
        if (this._isDisabled()) {
            return;
        }
        this._sort.addSortColumn(this);
        if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {
            this._disableViewStateAnimation = true;
        }
        var viewState = this._isSorted() ?
            { fromState: this._arrowDirection, toState: 'active' } :
            { fromState: 'active', toState: this._arrowDirection };
        this._setAnimationTransitionState(viewState);
        this._showIndicatorHint = false;
    };
    OMatSortHeader.prototype._isSorted = function () {
        return this._sort.isActive(this) && this._sort.hasDirection(this.id);
    };
    OMatSortHeader.prototype._updateArrowDirection = function () {
        this._arrowDirection = this._isSorted() ?
            this._sort.directionById[this.id] :
            (this.start || this._sort.start);
    };
    OMatSortHeader.prototype.refresh = function () {
        if (this._sort.isActive(this)) {
            this._setAnimationTransitionState({
                fromState: this._sort.directionById[this.id],
                toState: 'active'
            });
            this._showIndicatorHint = false;
        }
        else {
            this._viewState.toState = 'active';
            this._intl.changes.next();
        }
    };
    OMatSortHeader.decorators = [
        { type: Component, args: [{
                    moduleId: module.id,
                    selector: '[o-mat-sort-header]',
                    exportAs: 'oMatSortHeader',
                    template: "\n    <div class=\"mat-sort-header-container\"\n         [class.mat-sort-header-sorted]=\"_isSorted()\"\n         [class.mat-sort-header-position-before]=\"arrowPosition == 'before'\">\n      <button class=\"mat-sort-header-button\" type=\"button\"\n              [attr.disabled]=\"_isDisabled() || null\"\n              [attr.aria-label]=\"_intl.sortButtonLabel(id)\"\n              (focus)=\"_setIndicatorHintVisible(true)\"\n              (blur)=\"_setIndicatorHintVisible(false)\">\n        <ng-content></ng-content>\n      </button>\n\n      <!-- Disable animations while a current animation is running -->\n      <div class=\"mat-sort-header-arrow\"\n           [@arrowOpacity]=\"_getArrowViewState()\"\n           [@arrowPosition]=\"_getArrowViewState()\"\n           [@allowChildren]=\"_getArrowDirectionState()\"\n           (@arrowPosition.start)=\"_disableViewStateAnimation = true\"\n           (@arrowPosition.done)=\"_disableViewStateAnimation = false\">\n        <div class=\"mat-sort-header-stem\"></div>\n        <div class=\"mat-sort-header-indicator\" [@indicator]=\"_getArrowDirectionState()\">\n          <div class=\"mat-sort-header-pointer-left\" [@leftPointer]=\"_getArrowDirectionState()\"></div>\n          <div class=\"mat-sort-header-pointer-right\" [@rightPointer]=\"_getArrowDirectionState()\"></div>\n          <div class=\"mat-sort-header-pointer-middle\"></div>\n        </div>\n      </div>\n    </div>\n  ",
                    styles: ["\n    .mat-sort-header-container{display:flex;cursor:pointer}.mat-sort-header-disabled .mat-sort-header-container{cursor:default}.mat-sort-header-position-before{flex-direction:row-reverse}.mat-sort-header-button{border:none;background:0 0;display:flex;align-items:center;padding:0;cursor:inherit;outline:0;font:inherit;color:currentColor}.mat-sort-header-arrow{height:12px;width:12px;min-width:12px;margin:0 0 0 6px;position:relative;display:flex}.mat-sort-header-position-before .mat-sort-header-arrow{margin:0 6px 0 0}.mat-sort-header-stem{background:currentColor;height:10px;width:2px;margin:auto;display:flex;align-items:center}.mat-sort-header-indicator{width:100%;height:2px;display:flex;align-items:center;position:absolute;top:0;left:0}.mat-sort-header-pointer-middle{margin:auto;height:2px;width:2px;background:currentColor;transform:rotate(45deg)}.mat-sort-header-pointer-left,.mat-sort-header-pointer-right{background:currentColor;width:6px;height:2px;position:absolute;top:0}.mat-sort-header-pointer-left{transform-origin:right;left:0}.mat-sort-header-pointer-right{transform-origin:left;right:0}\n  "],
                    host: {
                        '(click)': '_handleClick()',
                        '(mouseenter)': '_setIndicatorHintVisible(true)',
                        '(longpress)': '_setIndicatorHintVisible(true)',
                        '(mouseleave)': '_setIndicatorHintVisible(false)',
                        '[attr.aria-sort]': '_getAriaSortAttribute()',
                        '[class.mat-sort-header-disabled]': '_isDisabled()',
                    },
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    inputs: ['disabled'],
                    animations: [
                        matSortAnimations.indicator,
                        matSortAnimations.leftPointer,
                        matSortAnimations.rightPointer,
                        matSortAnimations.arrowOpacity,
                        matSortAnimations.arrowPosition,
                        matSortAnimations.allowChildren,
                    ]
                },] },
    ];
    OMatSortHeader.ctorParameters = function () { return [
        { type: MatSortHeaderIntl },
        { type: ChangeDetectorRef },
        { type: OMatSort, decorators: [{ type: Optional }] },
        { type: CdkColumnDef, decorators: [{ type: Optional }] }
    ]; };
    return OMatSortHeader;
}(MatSortHeader));
export { OMatSortHeader };
//# sourceMappingURL=o-mat-sort-header.js.map