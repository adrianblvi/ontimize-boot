{"version":3,"file":"o-table-export-dialog.component.js","sourceRoot":"","sources":["../../../../../../../tmp/ontimize/components/table/extensions/dialog/export/o-table-export-dialog.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { HttpErrorResponse } from '@angular/common/http';\nimport { ChangeDetectionStrategy, Component, Inject, Injector, OnInit, ViewEncapsulation } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatButton, MatDialogRef } from '@angular/material';\n\nimport { DialogService, OExportExtension, OntimizeExportService, OTranslateService } from '../../../../../services';\nimport { Codes, SQLTypes, Util } from '../../../../../utils';\n\nexport class OTableExportConfiguration {\n  data: any[];\n  columns: Array<any>;\n  columnNames: Object;\n  sqlTypes: Object;\n  service: string;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'o-table-export-dialog',\n  template: `\n    <span mat-dialog-title>{{ 'TABLE.BUTTONS.EXPORT' | oTranslate }}</span>\n    <mat-dialog-content>\n      <div mat-subheader>{{ 'TABLE.DIALOG.EXPORT.DESCRIPTION' | oTranslate }}</div>\n      <div fxLayout=\"row\" fxLayoutAlign=\"space-around center\">\n        <button type=\"button\" #excelButton mat-raised-button (click)=\"exportExcel(excelButton)\" class=\"excel-button\">\n          <div fxLayout=\"column\" fxLayoutAlign=\"center center\">\n            <mat-icon svgIcon=\"ontimize:EXCEL\"></mat-icon>\n            <span>{{ 'TABLE.BUTTONS.EXCEL' | oTranslate }}</span>\n          </div>\n        </button>\n        <button type=\"button\" #htmlButton mat-raised-button (click)=\"exportHTML(htmlButton)\" class=\"html-button\">\n          <div fxLayout=\"column\" fxLayoutAlign=\"center center\">\n            <mat-icon svgIcon=\"ontimize:HTML\"></mat-icon>\n            <span>{{ 'TABLE.BUTTONS.HTML' | oTranslate }}</span>\n          </div>\n        </button>\n        <button type=\"button\" #pdfButton mat-raised-button (click)=\"exportPDF(pdfButton)\" class=\"pdf-button\">\n          <div fxLayout=\"column\" fxLayoutAlign=\"center center\">\n            <mat-icon svgIcon=\"ontimize:PDF\"></mat-icon>\n            <span>{{ 'TABLE.BUTTONS.PDF' | oTranslate }}</span>\n          </div>\n        </button>\n      </div>\n    </mat-dialog-content>\n\n    <mat-dialog-actions fxLayoutAlign=\"end center\">\n      <button type=\"button\" mat-stroked-button [mat-dialog-close]=\"false\">{{ 'CANCEL' | oTranslate | uppercase }}</button>\n    </mat-dialog-actions>\n  `,\n  styles: [`\n    .o-table-export-dialog .mat-icon{padding:6px 6px 0;width:48px;height:48px;font-size:48px}\n  `],\n  providers: [OntimizeExportService],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'o-table-export-dialog'\n  },\n  encapsulation: ViewEncapsulation.None\n})\nexport class OTableExportDialogComponent implements OnInit {\n\n  protected dialogService: DialogService;\n  protected exportService: OntimizeExportService;\n  protected translateService: OTranslateService;\n\n  constructor(\n    public dialogRef: MatDialogRef<OTableExportDialogComponent>,\n    protected injector: Injector,\n    @Inject(MAT_DIALOG_DATA) protected config: OTableExportConfiguration\n  ) {\n    this.dialogService = injector.get(DialogService);\n    this.translateService = this.injector.get(OTranslateService);\n  }\n\n  ngOnInit() {\n    this.initialize();\n  }\n\n  initialize(): void {\n    this.configureService();\n  }\n\n  configureService(): void {\n    let loadingService: any = OntimizeExportService;\n    // TODO: allow service type selection (extension)\n    // if (this.serviceType) {\n    //   loadingService = this.serviceType;\n    // }\n    try {\n      this.exportService = this.injector.get(loadingService);\n      let serviceCfg = this.exportService.getDefaultServiceConfiguration(this.config.service);\n      this.exportService.configureService(serviceCfg);\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  exportExcel(excelButton: MatButton): void {\n    excelButton.disabled = true;\n    let exportData = {\n      data: this.config.data,\n      columns: this.config.columns,\n      columnNames: this.config.columnNames,\n      sqlTypes: this.config.sqlTypes\n    };\n    let self = this;\n    this.proccessExportData(exportData.data, exportData.sqlTypes);\n    this.exportService.exportData(exportData, OExportExtension.Excel).subscribe((resp) => {\n      if (resp.code === Codes.ONTIMIZE_SUCCESSFUL_CODE) {\n        self.exportService.downloadFile(resp.data[0]['xslxId'], OExportExtension.Excel).subscribe(\n          () => self.dialogRef.close(true),\n          downloadError => {\n            console.error(downloadError);\n            self.dialogRef.close(false);\n          }\n        );\n      } else {\n        self.dialogService.alert('ERROR', resp.message).then(() => self.dialogRef.close(false));\n      }\n    },\n      (err) => self.handleError(err)\n    );\n  }\n\n  exportHTML(htmlButton: MatButton): void {\n    htmlButton.disabled = true;\n    let exportData = {\n      data: this.config.data,\n      columns: this.config.columns,\n      columnNames: this.config.columnNames,\n      sqlTypes: this.config.sqlTypes\n    };\n    let self = this;\n    this.proccessExportData(exportData.data, exportData.sqlTypes);\n    this.exportService.exportData(exportData, OExportExtension.HTML).subscribe(\n      (resp) => {\n        if (resp.code === Codes.ONTIMIZE_SUCCESSFUL_CODE) {\n          self.exportService.downloadFile(resp.data[0]['htmlId'], OExportExtension.HTML).subscribe(\n            () => self.dialogRef.close(true),\n            downloadError => {\n              console.error(downloadError);\n              self.dialogRef.close(false);\n            }\n          );\n        } else {\n          self.dialogService.alert('ERROR', resp.message).then(() => self.dialogRef.close(false));\n        }\n      },\n      (err) => self.handleError(err)\n    );\n  }\n\n  exportPDF(pdfButton: MatButton): void {\n    pdfButton.disabled = true;\n    let exportData = {\n      data: this.config.data,\n      columns: this.config.columns,\n      columnNames: this.config.columnNames,\n      sqlTypes: this.config.sqlTypes\n    };\n    let self = this;\n    this.proccessExportData(exportData.data, exportData.sqlTypes);\n    this.exportService.exportData(exportData, OExportExtension.PDF).subscribe(\n      (resp) => {\n        if (resp.code === Codes.ONTIMIZE_SUCCESSFUL_CODE) {\n          self.exportService.downloadFile(resp.data[0]['pdfId'], OExportExtension.PDF).subscribe(\n            () => self.dialogRef.close(true),\n            downloadError => {\n              console.error(downloadError);\n              self.dialogRef.close(false);\n            }\n          );\n        } else {\n          self.dialogService.alert('ERROR', resp.message).then(() => self.dialogRef.close(false));\n        }\n      },\n      (err) => self.handleError(err)\n    );\n  }\n\n  proccessExportData(data: Object[], sqlTypes: Object): void {\n    // Parse boolean\n    Object.keys(sqlTypes).forEach(key => {\n      if (SQLTypes.BOOLEAN === sqlTypes[key]) {\n        let yes = this.translateService.get('YES');\n        let no = this.translateService.get('NO');\n        data.forEach(row => {\n          if (row[key]) {\n            row[key] = Util.parseBoolean(row[key]) ? yes : no;\n          }\n        });\n      }\n    });\n  }\n\n  protected handleError(err): void {\n    console.error(err);\n    const self = this;\n    if (err instanceof HttpErrorResponse) {\n      this.dialogService.alert('ERROR', err.message).then(() => self.dialogRef.close(false));\n    } else {\n      this.dialogService.alert('ERROR', 'MESSAGES.ERROR_EXPORT_TABLE_DATA').then(() => self.dialogRef.close(false));\n    }\n  }\n\n}\n"]}