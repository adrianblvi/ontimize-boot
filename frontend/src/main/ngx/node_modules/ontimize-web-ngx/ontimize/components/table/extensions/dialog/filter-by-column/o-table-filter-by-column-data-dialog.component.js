import { ChangeDetectionStrategy, Component, ElementRef, Inject, ViewChild, ViewEncapsulation } from '@angular/core';
import { BehaviorSubject, fromEvent } from 'rxjs';
import { ColumnValueFilterOperator } from '../../header/o-table-header-components';
import { MAT_DIALOG_DATA, MatDialogRef, MatSelectionList } from '@angular/material';
import { debounceTime, distinctUntilChanged } from 'rxjs/operators';
import { FormControl } from '@angular/forms';
import { Util } from '../../../../../util/util';
var OTableFilterByColumnDataDialogComponent = (function () {
    function OTableFilterByColumnDataDialogComponent(dialogRef, data) {
        this.dialogRef = dialogRef;
        this.preloadValues = true;
        this.isCustomFilterSubject = new BehaviorSubject(false);
        this.isCustomFilter = this.isCustomFilterSubject.asObservable();
        this.isDefaultFilterSubject = new BehaviorSubject(false);
        this.isDefaultFilter = this.isDefaultFilterSubject.asObservable();
        this.fcText = new FormControl();
        this.fcFrom = new FormControl();
        this.fcTo = new FormControl();
        this.columnData = [];
        this.tableData = [];
        if (data.column) {
            this.column = data.column;
        }
        var previousFilter = {
            attr: undefined,
            operator: undefined,
            values: undefined
        };
        if (data.mode) {
            this.isDefaultFilterSubject.next(data.mode === 'default');
            this.isCustomFilterSubject.next(data.mode === 'custom');
            this.mode = data.mode;
        }
        if (data.previousFilter) {
            previousFilter = data.previousFilter;
            this.isCustomFilterSubject.next([ColumnValueFilterOperator.LESS_EQUAL, ColumnValueFilterOperator.MORE_EQUAL, ColumnValueFilterOperator.BETWEEN, ColumnValueFilterOperator.EQUAL].indexOf(previousFilter.operator) !== -1);
        }
        if (data.hasOwnProperty('preloadValues')) {
            this.preloadValues = data.preloadValues;
        }
        if (data.tableData && Array.isArray(data.tableData)) {
            this.getDistinctValues(data.tableData, previousFilter);
            this.initializeCustomFilterValues(previousFilter);
            this.initializeDataList(previousFilter);
        }
        if (data.mode) {
            this.mode = data.mode;
        }
    }
    OTableFilterByColumnDataDialogComponent.prototype.ngAfterViewInit = function () {
        this.initializeFilterEvent();
    };
    Object.defineProperty(OTableFilterByColumnDataDialogComponent.prototype, "listData", {
        get: function () {
            return this._listData;
        },
        set: function (arg) {
            this._listData = arg;
        },
        enumerable: true,
        configurable: true
    });
    OTableFilterByColumnDataDialogComponent.prototype.initializeDataList = function (filter) {
        if (this.preloadValues || (filter && filter.operator === ColumnValueFilterOperator.IN)) {
            this.listData = this.columnData.slice();
        }
    };
    OTableFilterByColumnDataDialogComponent.prototype.initializeFilterEvent = function () {
        if (this.filter) {
            var self_1 = this;
            fromEvent(this.filter.nativeElement, 'keyup')
                .pipe(debounceTime(150))
                .pipe(distinctUntilChanged())
                .subscribe(function () {
                var filterValue = self_1.filter.nativeElement.value;
                filterValue = Util.normalizeString(filterValue);
                if (filterValue.indexOf('*') !== -1) {
                    self_1.listData = self_1.columnData.filter(function (item) { return new RegExp('^' + Util.normalizeString(filterValue).split('*').join('.*') + '$').test(Util.normalizeString(item.value)); });
                }
                else {
                    self_1.listData = self_1.columnData.filter(function (item) { return (Util.normalizeString(item.value).indexOf(filterValue) !== -1); });
                }
            });
        }
    };
    OTableFilterByColumnDataDialogComponent.prototype.initializeCustomFilterValues = function (filter) {
        if (filter.operator !== ColumnValueFilterOperator.IN) {
            if (ColumnValueFilterOperator.EQUAL === filter.operator) {
                if (this.isTextType()) {
                    this.fcText.setValue(filter.values);
                }
            }
            if (filter.operator === ColumnValueFilterOperator.BETWEEN) {
                if (this.isDateType()) {
                    this.fcFrom.setValue(new Date(filter.values[0]));
                    this.fcTo.setValue(new Date(filter.values[1]));
                }
                else {
                    this.fcFrom.setValue(filter.values[0]);
                    this.fcTo.setValue(filter.values[1]);
                }
            }
            else {
                if (filter.operator === ColumnValueFilterOperator.MORE_EQUAL) {
                    if (this.isDateType()) {
                        this.fcFrom.setValue(new Date(filter.values));
                    }
                    else {
                        this.fcFrom.setValue(filter.values);
                    }
                }
                if (filter.operator === ColumnValueFilterOperator.LESS_EQUAL) {
                    if (this.isDateType()) {
                        this.fcTo.setValue(new Date(filter.values));
                    }
                    else {
                        this.fcTo.setValue(filter.values);
                    }
                }
            }
        }
    };
    Object.defineProperty(OTableFilterByColumnDataDialogComponent.prototype, "selectedValues", {
        get: function () {
            return this.filterValueList ? this.filterValueList.selectedOptions.selected : [];
        },
        enumerable: true,
        configurable: true
    });
    OTableFilterByColumnDataDialogComponent.prototype.areAllSelected = function () {
        return this.selectedValues.length === this.columnData.length;
    };
    OTableFilterByColumnDataDialogComponent.prototype.isIndeterminate = function () {
        return this.selectedValues.length > 0 && this.selectedValues.length !== this.columnData.length;
    };
    OTableFilterByColumnDataDialogComponent.prototype.onSelectAllChange = function (event) {
        if (event.checked) {
            this.filterValueList.selectAll();
        }
        else {
            this.filterValueList.deselectAll();
        }
    };
    OTableFilterByColumnDataDialogComponent.prototype.getDistinctValues = function (data, filter) {
        var _this = this;
        var colValues = data.map(function (elem) { return elem[_this.column.attr]; });
        colValues.forEach(function (value, i) {
            if (_this.columnData.find(function (item) { return item.value === value; }) === undefined) {
                _this.columnData.push({
                    value: value,
                    selected: filter.operator === ColumnValueFilterOperator.IN && (filter.values || []).indexOf(value) !== -1
                });
                _this.tableData.push(data[i]);
            }
        });
    };
    OTableFilterByColumnDataDialogComponent.prototype.getColumnValuesFilter = function () {
        var filter = {
            attr: this.column.attr,
            operator: undefined,
            values: undefined
        };
        if (!this.isCustomFilterSubject.getValue()) {
            if (this.selectedValues.length) {
                filter.operator = ColumnValueFilterOperator.IN;
                filter.values = this.selectedValues.map(function (item) { return item.value; });
            }
        }
        else {
            if (this.fcText.value) {
                filter.operator = ColumnValueFilterOperator.EQUAL;
                filter.values = this.getTypedValue(this.fcText);
            }
            if (this.fcFrom.value && this.fcTo.value) {
                filter.operator = ColumnValueFilterOperator.BETWEEN;
                var fromValue = this.getTypedValue(this.fcFrom);
                var toValue = this.getTypedValue(this.fcTo);
                filter.values = fromValue <= toValue ? [fromValue, toValue] : [toValue, fromValue];
            }
            else {
                if (this.fcFrom.value) {
                    filter.operator = ColumnValueFilterOperator.MORE_EQUAL;
                    filter.values = this.getTypedValue(this.fcFrom);
                }
                if (this.fcTo.value) {
                    filter.operator = ColumnValueFilterOperator.LESS_EQUAL;
                    filter.values = this.getTypedValue(this.fcTo);
                }
            }
        }
        return filter;
    };
    OTableFilterByColumnDataDialogComponent.prototype.onSlideChange = function (e) {
        this.isCustomFilterSubject.next(e.checked);
        if (!e.checked) {
            this.initializeDataList();
            var self_2 = this;
            setTimeout(function () {
                self_2.initializeFilterEvent();
            }, 0);
        }
    };
    OTableFilterByColumnDataDialogComponent.prototype.isTextType = function () {
        return !this.isNumericType() && !this.isDateType();
    };
    OTableFilterByColumnDataDialogComponent.prototype.isNumericType = function () {
        return ['integer', 'real', 'currency'].indexOf(this.column.type) !== -1;
    };
    OTableFilterByColumnDataDialogComponent.prototype.isDateType = function () {
        return 'date' === this.column.type;
    };
    OTableFilterByColumnDataDialogComponent.prototype.getRowValue = function (i) {
        return this.tableData[i];
    };
    OTableFilterByColumnDataDialogComponent.prototype.getFixedDimensionClass = function () {
        return this.mode === 'selection' || this.mode === 'default';
    };
    OTableFilterByColumnDataDialogComponent.prototype.getTypedValue = function (control) {
        var value = control.value;
        if (this.isNumericType()) {
            value = control.value;
        }
        if (this.isDateType()) {
            value = control.value.valueOf();
        }
        return value;
    };
    OTableFilterByColumnDataDialogComponent.decorators = [
        { type: Component, args: [{
                    moduleId: module.id,
                    selector: 'o-table-filter-by-column-data-dialog',
                    template: "\n    <span mat-dialog-title>{{ 'TABLE.BUTTONS.FILTER_BY_COLUMN' | oTranslate }}: {{ column.title | oTranslate }}</span>\n    <div mat-dialog-content fxLayout=\"row\" fxLayoutAlign=\"space-between stretch\" class=\"dialog-list-container\">\n      <div fxLayout=\"column\" class=\"content-wrapper\"  [class.content-wrapper-fixed-dimension]=\"getFixedDimensionClass()\">\n        <mat-slide-toggle #customFilterSlide (change)=\"onSlideChange($event)\" [checked]=\"(isCustomFilter | async)\"\n          *ngIf=\"isDefaultFilter | async\">\n          {{ 'TABLE.FILTER_BY_COLUMN.CUSTOM_FILTER' | oTranslate }}\n        </mat-slide-toggle>\n        <div fxFlex *ngIf=\"!(isCustomFilter | async);else customFilterTemplate\" fxLayout=\"column\">\n          <mat-form-field class=\"hinted\">\n            <mat-icon matPrefix svgIcon=\"ontimize:search\"></mat-icon>\n            <input matInput #filter placeholder=\"{{ 'TABLE.FILTER' | oTranslate }}\">\n            <mat-hint>{{ 'TABLE.FILTER_BY_COLUMN.HINT_STAR' | oTranslate }}</mat-hint>\n          </mat-form-field>\n          <mat-checkbox (change)=\"onSelectAllChange($event)\" [checked]=\"areAllSelected()\"\n            [indeterminate]=\"isIndeterminate()\" [disabled]=\"!listData\" class=\"select-all-checkbox\">\n            {{ 'TABLE.FILTER_BY_COLUMN.CHECK_ALL' | oTranslate }}\n          </mat-checkbox>\n          <span *ngIf=\"!listData\" class=\"column-filter-empty-list\">\n            {{ 'TABLE.FILTER_BY_COLUMN.LIST_EMPTY_FILTER' | oTranslate }}\n          </span>\n          <span *ngIf=\"listData?.length === 0\" class=\"column-filter-empty-list\">{{ 'TABLE.FILTER_BY_COLUMN.LIST_EMPTY' |\n            oTranslate }}</span>\n          <mat-selection-list *ngIf=\"preloadValues || listData\" #filterValueList fxFlex fxLayout=\"column\"\n            class=\"select-values-list\">\n            <mat-list-option *ngFor=\"let record of listData; let i = index\" checkboxPosition=\"before\"\n              [selected]=\"record.selected\" [value]=\"record.value\">\n              <ng-container *ngIf=\"!column.renderer\">\n                {{ record.value || ('TABLE.FILTER_BY_COLUMN.EMPTY_VALUE' | oTranslate) }}\n              </ng-container>\n              <ng-template *ngIf=\"column.renderer\" [ngTemplateOutlet]=\"column.renderer.templateref\"\n                [ngTemplateOutletContext]=\"{ cellvalue: record.value, rowvalue: getRowValue(i) }\"></ng-template>\n            </mat-list-option>\n          </mat-selection-list>\n        </div>\n\n      </div>\n    </div>\n\n    <mat-dialog-actions align=\"end\">\n      <button type=\"button\" mat-stroked-button class=\"mat-primary\" [mat-dialog-close]=\"false\">\n        {{ 'CANCEL' | oTranslate | uppercase }} </button>\n      <button type=\"button\" mat-stroked-button class=\"mat-primary\" [mat-dialog-close]=\"true\">\n        {{ 'ACCEPT' | oTranslate | uppercase }} </button>\n    </mat-dialog-actions>\n\n    <!-- TEMPLATE CUSTOM FILTER-->\n    <ng-template #customFilterTemplate>\n      <div *ngIf=\"isTextType()\">\n        <mat-form-field fxFlex class=\"hinted\">\n          <input matInput #filterText [formControl]=\"fcText\" placeholder=\"{{ 'TABLE.FILTER' | oTranslate }}\">\n          <mat-hint>{{ 'TABLE.FILTER_BY_COLUMN.HINT_STAR' | oTranslate }}</mat-hint>\n        </mat-form-field>\n      </div>\n      <div *ngIf=\"isNumericType()\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n        <mat-form-field fxFlex=\"45\">\n          <input matInput [formControl]=\"fcFrom\" placeholder=\"{{ 'TABLE.FILTER_BY_COLUMN.FROM' | oTranslate }}\">\n        </mat-form-field>\n        <mat-form-field fxFlex=\"45\">\n          <input matInput [formControl]=\"fcTo\" placeholder=\"{{ 'TABLE.FILTER_BY_COLUMN.TO' | oTranslate }}\">\n        </mat-form-field>\n      </div>\n      <div *ngIf=\"isDateType()\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n        <mat-form-field fxFlex=\"45\">\n          <input matInput [matDatepicker]=\"datepickerFrom\" [max]=\"fcTo.value\" [formControl]=\"fcFrom\"\n            placeholder=\"{{ 'TABLE.FILTER_BY_COLUMN.FROM' | oTranslate }}\">\n          <mat-datepicker-toggle matSuffix [for]=\"datepickerFrom\">\n            <mat-icon matDatepickerToggleIcon>today</mat-icon>\n          </mat-datepicker-toggle>\n          <mat-datepicker #datepickerFrom></mat-datepicker>\n        </mat-form-field>\n        <mat-form-field fxFlex=\"45\">\n          <input matInput [matDatepicker]=\"datepickerTo\" [min]=\"fcFrom.value\" [formControl]=\"fcTo\"\n            placeholder=\"{{ 'TABLE.FILTER_BY_COLUMN.TO' | oTranslate }}\">\n          <mat-datepicker-toggle matSuffix [for]=\"datepickerTo\">\n            <mat-icon matDatepickerToggleIcon>today</mat-icon>\n          </mat-datepicker-toggle>\n          <mat-datepicker #datepickerTo></mat-datepicker>\n        </mat-form-field>\n      </div>\n\n    </ng-template>\n  ",
                    styles: ["\n    .o-filter-by-column-dialog .mat-slide-toggle{padding-bottom:24px}.o-filter-by-column-dialog .content-wrapper{padding:24px 0 12px;margin:0}.o-filter-by-column-dialog .content-wrapper.content-wrapper-fixed-dimension{max-height:430px;min-height:430px;min-width:250px}.o-filter-by-column-dialog .content-wrapper .mat-form-field.hinted{margin-bottom:24px}.o-filter-by-column-dialog .content-wrapper .select-all-checkbox{padding-bottom:6px}.o-filter-by-column-dialog .content-wrapper .select-values-list{padding-top:0;overflow-y:auto;overflow-x:hidden;outline:none}.o-filter-by-column-dialog .content-wrapper .select-values-list .mat-list-item{height:30px}.o-filter-by-column-dialog .content-wrapper .select-values-list .mat-list-item .mat-list-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.o-filter-by-column-dialog .content-wrapper .select-values-list .mat-list-item .mat-list-text .mat-icon{font-size:24px}.o-filter-by-column-dialog .content-wrapper .column-filter-empty-list{text-align:center}\n  "],
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: {
                        '[class.o-filter-by-column-dialog]': 'true'
                    }
                },] },
    ];
    OTableFilterByColumnDataDialogComponent.ctorParameters = function () { return [
        { type: MatDialogRef },
        { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
    ]; };
    OTableFilterByColumnDataDialogComponent.propDecorators = {
        filter: [{ type: ViewChild, args: ['filter',] }],
        filterValueList: [{ type: ViewChild, args: ['filterValueList',] }]
    };
    return OTableFilterByColumnDataDialogComponent;
}());
export { OTableFilterByColumnDataDialogComponent };
//# sourceMappingURL=o-table-filter-by-column-data-dialog.component.js.map