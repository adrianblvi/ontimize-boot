import { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Inject, Injector, ViewChild, ViewEncapsulation, forwardRef } from '@angular/core';
import { FilterExpressionUtils } from '../../../../filter-expression.utils';
import { MatMenu } from '@angular/material';
import { OTableComponent } from '../../../o-table.component';
import { O_INPUTS_OPTIONS } from '../../../../../config/app-config';
import { fromEvent } from 'rxjs';
import { debounceTime, distinctUntilChanged } from 'rxjs/operators';
import { FormControl } from '@angular/forms';
import { OTableCellRendererServiceComponent } from '../../../column/cell-renderer/cell-renderer';
import { SQLTypes } from '../../../../../util/sqltypes';
import { Util } from '../../../../../utils';
export var DEFAULT_INPUTS_O_TABLE_QUICKFILTER = [];
export var DEFAULT_OUTPUTS_O_TABLE_QUICKFILTER = [
    'onChange'
];
var OTableQuickfilterComponent = (function () {
    function OTableQuickfilterComponent(injector, elRef, table) {
        this.injector = injector;
        this.elRef = elRef;
        this.table = table;
        this.onChange = new EventEmitter();
        this.formControl = new FormControl();
    }
    OTableQuickfilterComponent.prototype.ngOnInit = function () {
        this.table.registerQuickFilter(this);
        this.matMenu.xPosition = 'before';
    };
    OTableQuickfilterComponent.prototype.ngAfterViewInit = function () {
        this.initializeEventFilter();
        try {
            this.oInputsOptions = this.injector.get(O_INPUTS_OPTIONS);
        }
        catch (e) {
            this.oInputsOptions = {};
        }
        Util.parseOInputsOptions(this.elRef, this.oInputsOptions);
    };
    OTableQuickfilterComponent.prototype.ngOnDestroy = function () {
        if (this.quickFilterObservable) {
            this.quickFilterObservable.unsubscribe();
        }
    };
    Object.defineProperty(OTableQuickfilterComponent.prototype, "oTableOptions", {
        get: function () {
            return this.table.oTableOptions;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableQuickfilterComponent.prototype, "quickFilterColumns", {
        get: function () {
            return this.table.oTableOptions.columns.filter(function (oCol) {
                return oCol.searchable && oCol.visible;
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableQuickfilterComponent.prototype, "filterExpression", {
        get: function () {
            var _this = this;
            var result = this.getUserFilter();
            if (!Util.isDefined(result) && Util.isDefined(this.value) && this.value.length > 0) {
                var expressions_1 = [];
                this.oTableOptions.columns.forEach(function (oCol) {
                    if (oCol.searching && oCol.visible && _this.isFilterableColumn(oCol)) {
                        if (oCol.renderer instanceof OTableCellRendererServiceComponent) {
                            var cacheValue = Object.keys(oCol.renderer.responseMap).find(function (key) { return Util.normalizeString(oCol.renderer['responseMap'][key]).indexOf(Util.normalizeString(_this.value)) !== -1; });
                            if (cacheValue) {
                                expressions_1.push(FilterExpressionUtils.buildExpressionEquals(oCol.attr, SQLTypes.parseUsingSQLType(cacheValue, SQLTypes.getSQLTypeKey(oCol.sqlType))));
                            }
                        }
                        else if (SQLTypes.isNumericSQLType(oCol.sqlType)) {
                            var numValue = SQLTypes.parseUsingSQLType(_this.value, SQLTypes.getSQLTypeKey(oCol.sqlType));
                            if (numValue) {
                                expressions_1.push(FilterExpressionUtils.buildExpressionEquals(oCol.attr, numValue));
                            }
                        }
                        else {
                            expressions_1.push(FilterExpressionUtils.buildExpressionLike(oCol.attr, _this.value));
                        }
                    }
                });
                if (expressions_1.length > 0) {
                    result = expressions_1.reduce(function (a, b) { return FilterExpressionUtils.buildComplexExpression(a, b, FilterExpressionUtils.OP_OR); });
                }
            }
            return result;
        },
        enumerable: true,
        configurable: true
    });
    OTableQuickfilterComponent.prototype.getUserFilter = function () {
        var result;
        if (this.table.quickFilterCallback instanceof Function) {
            var userFilter = this.table.quickFilterCallback(this.value);
            if (Util.isDefined(userFilter) && FilterExpressionUtils.instanceofExpression(userFilter)) {
                result = userFilter;
            }
            else if (Util.isDefined(userFilter)) {
                result = FilterExpressionUtils.buildExpressionFromObject(userFilter);
            }
        }
        return result;
    };
    OTableQuickfilterComponent.prototype.initializeEventFilter = function () {
        var _this = this;
        if (this.filter && !this.quickFilterObservable) {
            this.quickFilterObservable = fromEvent(this.filter.nativeElement, 'keyup')
                .pipe(debounceTime(150))
                .pipe(distinctUntilChanged())
                .subscribe(function () {
                var filterVal = _this.filter.nativeElement.value;
                if (!_this.table.dataSource || _this.value === filterVal) {
                    return;
                }
                _this.setValue(filterVal);
                _this.onChange.emit(_this.value);
            });
            var filterValue = this.value || this.filter.nativeElement.value;
            this.formControl.setValue(filterValue);
            if (this.table.dataSource && filterValue && filterValue.length) {
                this.table.dataSource.quickFilter = filterValue;
            }
        }
    };
    OTableQuickfilterComponent.prototype.setValue = function (value, trigger) {
        if (trigger === void 0) { trigger = true; }
        this.value = value;
        if (trigger && this.table && this.table.dataSource) {
            this.table.dataSource.quickFilter = this.value;
        }
    };
    OTableQuickfilterComponent.prototype.onMenuClosed = function () {
        this.setValue(this.value);
        this.onChange.emit(this.value);
    };
    OTableQuickfilterComponent.prototype.isChecked = function (column) {
        return column.searching;
    };
    OTableQuickfilterComponent.prototype.onCheckboxChange = function (column, event) {
        column.searching = event.checked;
    };
    OTableQuickfilterComponent.prototype.showCaseSensitiveCheckbox = function () {
        return this.table.showCaseSensitiveCheckbox();
    };
    OTableQuickfilterComponent.prototype.areAllColumnsChecked = function () {
        var result = true;
        this.quickFilterColumns.forEach(function (col) {
            result = result && col.searching;
        });
        return result;
    };
    OTableQuickfilterComponent.prototype.onSelectAllChange = function (event) {
        this.quickFilterColumns.forEach(function (col) {
            col.searching = event.checked;
        });
    };
    OTableQuickfilterComponent.prototype.isFilterableColumn = function (column) {
        return !column.renderer || (column.type === 'string' ||
            column.type === 'translate' ||
            column.type === 'integer' ||
            column.type === 'real' ||
            column.type === 'percentage' ||
            column.type === 'currency' ||
            column.type === 'service');
    };
    OTableQuickfilterComponent.DEFAULT_INPUTS_O_TABLE_QUICKFILTER = DEFAULT_INPUTS_O_TABLE_QUICKFILTER;
    OTableQuickfilterComponent.DEFAULT_OUTPUTS_O_TABLE_QUICKFILTER = DEFAULT_OUTPUTS_O_TABLE_QUICKFILTER;
    OTableQuickfilterComponent.decorators = [
        { type: Component, args: [{
                    moduleId: module.id,
                    selector: 'o-table-quickfilter',
                    template: "\n    <div class=\"quickFilter\" fxLayout=\"row\">\n      <mat-form-field floatLabel=\"never\">\n        <input matInput #filter placeholder=\"{{ 'TABLE.FILTER' | oTranslate}}\" [formControl]=\"formControl\" (click)=\"$event.stopPropagation()\">\n        <span class=\"icon-btn search-icon\" matPrefix fxFlexLayout=\"flex-end\" (menuClosed)=\"onMenuClosed()\"\n          [matMenuTriggerFor]=\"menu\" (click)=\"$event.stopPropagation()\">\n          <mat-icon svgIcon=\"ontimize:search\"></mat-icon>\n        </span>\n        <mat-menu #menu=\"matMenu\" class=\"o-table-quickfilter-menu\">\n          <div fxLayout=\"column\" class=\"checkbox-container\">\n\n            <mat-checkbox (click)=\"$event.stopPropagation()\" [checked]=\"areAllColumnsChecked()\"\n              (change)=\"onSelectAllChange($event)\">\n              {{ 'SELECT_ALL' | oTranslate}}\n            </mat-checkbox>\n            <mat-divider></mat-divider>\n\n            <ng-container *ngFor=\"let column of quickFilterColumns\">\n              <mat-checkbox (click)=\"$event.stopPropagation()\"  [checked]=\"isChecked(column)\" (change)=\"onCheckboxChange(column, $event)\">\n                {{ column.title | oTranslate }}\n              </mat-checkbox>\n            </ng-container>\n\n            <ng-container *ngIf=\"showCaseSensitiveCheckbox()\">\n              <mat-divider></mat-divider>\n              <mat-checkbox (click)=\"$event.stopPropagation()\"  [checked]=\"oTableOptions.filterCaseSensitive\"\n                (change)=\"oTableOptions.filterCaseSensitive = $event.checked\">\n                {{ 'TABLE.FILTER.CASE_SENSITIVE' | oTranslate}}\n              </mat-checkbox>\n            </ng-container>\n          </div>\n        </mat-menu>\n      </mat-form-field>\n    </div>\n  ",
                    styles: ["\n    .o-table-quickfilter .quickFilter{padding-right:24px}.o-table-quickfilter .quickFilter .mat-form-field-flex{align-items:flex-end}.o-table-quickfilter .search-icon{cursor:pointer}.o-table-quickfilter-menu .mat-divider{margin:8px 0}.o-table-quickfilter-menu .checkbox-container{padding:6px 12px}.o-table-quickfilter-menu .checkbox-container .mat-checkbox-layout{white-space:normal}.o-table-quickfilter-menu .checkbox-container .mat-checkbox-layout .mat-checkbox-ripple{display:none}\n  "],
                    inputs: DEFAULT_INPUTS_O_TABLE_QUICKFILTER,
                    outputs: DEFAULT_OUTPUTS_O_TABLE_QUICKFILTER,
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: {
                        '[class.o-table-quickfilter]': 'true',
                    }
                },] },
    ];
    OTableQuickfilterComponent.ctorParameters = function () { return [
        { type: Injector },
        { type: ElementRef },
        { type: OTableComponent, decorators: [{ type: Inject, args: [forwardRef(function () { return OTableComponent; }),] }] }
    ]; };
    OTableQuickfilterComponent.propDecorators = {
        filter: [{ type: ViewChild, args: ['filter',] }],
        matMenu: [{ type: ViewChild, args: ['menu',] }]
    };
    return OTableQuickfilterComponent;
}());
export { OTableQuickfilterComponent };
//# sourceMappingURL=o-table-quickfilter.component.js.map