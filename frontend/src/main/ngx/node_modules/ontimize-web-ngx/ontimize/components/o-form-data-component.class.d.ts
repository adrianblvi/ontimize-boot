import { AfterViewInit, ElementRef, EventEmitter, Injector, OnChanges, OnDestroy, OnInit, QueryList, SimpleChange } from '@angular/core';
import { FormControl, FormGroup, ValidatorFn } from '@angular/forms';
import { FloatLabelType, MatFormFieldAppearance, MatSuffix } from '@angular/material';
import { Subscription } from 'rxjs';
import { OInputsOptions } from '../config/app-config';
import { PermissionsService } from '../services';
import { OMatErrorComponent, OMatErrorOptions } from '../shared/material/o-mat-error/o-mat-error';
import { OFormComponent } from './form/o-form.component';
import { IFormValueOptions, OFormValue } from './form/OFormValue';
import { OFormControl } from './input/o-form-control.class';
import { OValidatorComponent } from './input/validation/o-validator.component';
import { IComponent, OBaseComponent } from './o-component.class';
export interface IMultipleSelection extends IComponent {
    getSelectedItems(): any[];
    setSelectedItems(values: any[]): void;
}
export interface IFormDataTypeComponent extends IComponent {
    getSQLType(): number;
}
export interface IFormControlComponent extends IComponent {
    getControl(): FormControl;
    getFormControl(): FormControl;
    hasError(error: string): boolean;
}
export interface IFormDataComponent extends IFormControlComponent {
    onChange: EventEmitter<Object>;
    onValueChange: EventEmitter<OValueChangeEvent>;
    data(value: any): void;
    isAutomaticBinding(): boolean;
    isAutomaticRegistering(): boolean;
    setValue(val: any, options?: IFormValueOptions): void;
    clearValue(options?: IFormValueOptions): void;
    getValue(): any;
}
export interface IErrorData {
    name: string;
    text: string;
}
export declare class OValueChangeEvent {
    type: number;
    newValue: any;
    oldValue: any;
    target: any;
    static USER_CHANGE: number;
    static PROGRAMMATIC_CHANGE: number;
    constructor(type: number, newValue: any, oldValue: any, target: any);
    isUserChange(): boolean;
    isProgrammaticChange(): boolean;
}
export declare const DEFAULT_INPUTS_O_FORM_DATA_COMPONENT: string[];
export declare const DEFAULT_OUTPUTS_O_FORM_DATA_COMPONENT: string[];
export declare class OFormDataComponent extends OBaseComponent implements IFormDataComponent, IFormDataTypeComponent, OnInit, AfterViewInit, OnDestroy, OnChanges {
    sqlType: string;
    autoBinding: boolean;
    autoRegistering: boolean;
    width: string;
    clearButton: boolean;
    angularValidatorsFn: ValidatorFn[];
    hideRequiredMarker: boolean;
    labelVisible: boolean;
    onChange: EventEmitter<Object>;
    onValueChange: EventEmitter<OValueChangeEvent>;
    onFocus: EventEmitter<Object>;
    onBlur: EventEmitter<Object>;
    readonly hostWidth: string;
    protected value: OFormValue;
    protected defaultValue: any;
    protected _SQLType: number;
    protected _defaultSQLTypeKey: string;
    protected _fControl: OFormControl;
    protected _fControlSubscription: Subscription;
    protected _fGroup: FormGroup;
    protected elRef: ElementRef;
    protected form: OFormComponent;
    protected oldValue: any;
    protected _floatLabel: FloatLabelType;
    protected _appearance: MatFormFieldAppearance;
    protected matSuffixSubscription: Subscription;
    protected _matSuffixList: QueryList<MatSuffix>;
    protected errorsData: IErrorData[];
    protected validatorsSubscription: Subscription;
    protected validatorChildren: QueryList<OValidatorComponent>;
    protected permissionsService: PermissionsService;
    protected mutationObserver: MutationObserver;
    protected errorOptions: OMatErrorOptions;
    protected oMatErrorChildren: QueryList<OMatErrorComponent>;
    protected oInputsOptions: OInputsOptions;
    constructor(form: OFormComponent, elRef: ElementRef, injector: Injector);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: {
        [propName: string]: SimpleChange;
    }): void;
    hasEnabledPermission(): boolean;
    hasVisiblePermission(): boolean;
    getFormGroup(): FormGroup;
    getFormControl(): FormControl;
    hasError(error: string): boolean;
    getErrorValue(error: string, prop: string): string;
    getActiveOErrors(): IErrorData[];
    initialize(): void;
    destroy(): void;
    registerFormListeners(): void;
    unregisterFormListeners(): void;
    data: any;
    setData(newValue: any): void;
    isAutomaticBinding(): boolean;
    isAutomaticRegistering(): boolean;
    getValue(): any;
    setValue(val: any, options?: IFormValueOptions, setDirty?: boolean): void;
    clearValue(options?: IFormValueOptions, setDirty?: boolean): void;
    onClickClearValue(event: Event): void;
    onChangeEvent(arg: any): void;
    readonly showClearButton: boolean;
    onFormControlChange(value: any): void;
    ensureOFormValue(arg: any): void;
    createFormControl(cfg?: any, validators?: any): OFormControl;
    getControl(): FormControl;
    resolveValidators(): ValidatorFn[];
    getSQLType(): number;
    readonly isValid: boolean;
    isEmpty(): boolean;
    setEnabled(value: boolean): void;
    readonly elementRef: ElementRef;
    readonly hasCustomWidth: boolean;
    orequired: boolean;
    innerOnFocus(event: any): void;
    innerOnBlur(event: any): void;
    appearance: MatFormFieldAppearance;
    floatLabel: FloatLabelType;
    protected registerOnFormControlChange(): void;
    protected emitOnValueChange(type: any, newValue: any, oldValue: any): void;
    protected setFormValue(val: any, options?: IFormValueOptions, setDirty?: boolean): void;
    protected updateValidators(): void;
    protected addOntimizeCustomAppearanceClass(): void;
    protected getTooltipClass(): string;
    protected getTooltipText(): string;
    protected parsePermissions(): void;
    protected getMutationObserverTarget(): any;
    protected setSuffixClass(count: number): void;
    private disableFormControl;
}
