var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, ElementRef, Inject, Injector, NgModule, Optional, ViewChild, forwardRef } from '@angular/core';
import { DEFAULT_INPUTS_O_TEXT_INPUT, DEFAULT_OUTPUTS_O_TEXT_INPUT } from '../text-input/o-text-input.component';
import { DateAdapter, MAT_DATE_LOCALE, MatDatepicker, MatDatepickerInput } from '@angular/material';
import { OFormValue } from '../../form/OFormValue';
import { ObservableMedia } from '@angular/flex-layout';
import { OFormDataComponent, OValueChangeEvent } from '../../o-form-data-component.class';
import { OSharedModule, OntimizeMomentDateAdapter } from '../../../shared';
import { CommonModule } from '@angular/common';
import { InputConverter } from '../../../decorators';
import { MomentService } from '../../../services';
import { OFormComponent } from '../../form/o-form.component';
import { SQLTypes } from '../../../util/sqltypes';
import { Util } from '../../../util/util';
import moment from 'moment';
export var DEFAULT_OUTPUTS_O_DATE_INPUT = DEFAULT_OUTPUTS_O_TEXT_INPUT.slice();
export var DEFAULT_INPUTS_O_DATE_INPUT = [
    'oformat: format',
    'olocale: locale',
    'oStartView: start-view',
    'oMinDate: min',
    'oMaxDate: max',
    'oTouchUi: touch-ui',
    'oStartAt: start-at',
    'filterDate: filter-date',
    'textInputEnabled: text-input-enabled',
    'valueType: value-type'
].concat(DEFAULT_INPUTS_O_TEXT_INPUT);
var ODateInputComponent = (function (_super) {
    __extends(ODateInputComponent, _super);
    function ODateInputComponent(form, dateAdapter, elRef, injector) {
        var _this = _super.call(this, form, elRef, injector) || this;
        _this.textInputEnabled = true;
        _this._oformat = 'L';
        _this.updateLocaleOnChange = false;
        _this.oStartView = 'month';
        _this._valueType = 'timestamp';
        _this.momentDateAdapter = dateAdapter;
        _this._defaultSQLTypeKey = 'DATE';
        _this.momentSrv = _this.injector.get(MomentService);
        _this.media = _this.injector.get(ObservableMedia);
        return _this;
    }
    ODateInputComponent.convertToODateValueType = function (val) {
        var result = 'timestamp';
        var lowerVal = (val || '').toLowerCase();
        if (lowerVal === 'string' || lowerVal === 'date' || lowerVal === 'timestamp' || lowerVal === 'iso-8601') {
            result = lowerVal;
        }
        return result;
    };
    ODateInputComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.initialize();
        if (!this.olocale) {
            this.updateLocaleOnChange = true;
            this.olocale = this.momentSrv.getLocale();
        }
        if (this.oformat) {
            this.momentDateAdapter.oFormat = this.oformat;
        }
        this.momentDateAdapter.setLocale(this.olocale);
        if (this.oStartView) {
            this.datepicker.startView = this.oStartView;
        }
        if (this.oStartAt) {
            this.datepicker.startAt = new Date(this.oStartAt);
        }
        if (this.oMinDate) {
            var date = new Date(this.oMinDate);
            var momentD = moment(date);
            if (momentD.isValid()) {
                this.datepickerInput.min = date;
                this.minDateString = momentD.format(this.oformat);
            }
        }
        if (this.oMaxDate) {
            var date = new Date(this.oMaxDate);
            var momentD = moment(date);
            if (momentD.isValid()) {
                this.datepickerInput.max = date;
                this.maxDateString = momentD.format(this.oformat);
            }
        }
        if (this.updateLocaleOnChange) {
            this.onLanguageChangeSubscription = this.translateService.onLanguageChanged.subscribe(function () {
                _this.momentDateAdapter.setLocale(_this.translateService.getCurrentLang());
                _this.setValue(_this.getValue());
            });
        }
    };
    ODateInputComponent.prototype.ngAfterViewChecked = function () {
        var _this = this;
        this.mediaSubscription = this.media.subscribe(function (change) {
            if (['xs', 'sm'].indexOf(change.mqAlias) !== -1) {
                _this.touchUi = Util.isDefined(_this.oTouchUi) ? _this.oTouchUi : true;
            }
            if (['md', 'lg', 'xl'].indexOf(change.mqAlias) !== -1) {
                _this.touchUi = Util.isDefined(_this.oTouchUi) ? _this.oTouchUi : false;
            }
        });
    };
    ODateInputComponent.prototype.ngOnDestroy = function () {
        _super.prototype.ngOnDestroy.call(this);
        if (this.mediaSubscription) {
            this.mediaSubscription.unsubscribe();
        }
        if (this.onLanguageChangeSubscription) {
            this.onLanguageChangeSubscription.unsubscribe();
        }
    };
    ODateInputComponent.prototype.getValueAsDate = function () {
        return this.dateValue;
    };
    ODateInputComponent.prototype.getValue = function () {
        var timestampValue = _super.prototype.getValue.call(this);
        if (timestampValue && timestampValue instanceof Date) {
            timestampValue = timestampValue.getTime();
        }
        return timestampValue;
    };
    Object.defineProperty(ODateInputComponent.prototype, "showClearButton", {
        get: function () {
            return this.clearButton && !this.isReadOnly && this.enabled && this.matInputRef.nativeElement.value;
        },
        enumerable: true,
        configurable: true
    });
    ODateInputComponent.prototype.open = function () {
        if (!this.isReadOnly && this.enabled) {
            this.datepicker.open();
        }
    };
    ODateInputComponent.prototype.onChangeEvent = function (event) {
        var isValid = event.value && event.value.isValid && event.value.isValid();
        var val = isValid ? event.value.valueOf() : event.value;
        var m = moment(val);
        switch (this.valueType) {
            case 'string':
                if (val) {
                    val = m.format(this.oformat);
                }
                break;
            case 'date':
                val = new Date(val);
                break;
            case 'iso-8601':
                val = m.toISOString();
                break;
            case 'timestamp':
            default:
                break;
        }
        this.setValue(val, {
            changeType: OValueChangeEvent.USER_CHANGE,
            emitEvent: false,
            emitModelToViewChange: false
        });
    };
    ODateInputComponent.prototype.onClickInput = function (e) {
        if (!this.textInputEnabled) {
            this.open();
        }
    };
    Object.defineProperty(ODateInputComponent.prototype, "filterDate", {
        get: function () {
            return this._filterDate;
        },
        set: function (val) {
            this._filterDate = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ODateInputComponent.prototype, "oformat", {
        get: function () {
            return this._oformat;
        },
        set: function (val) {
            this._oformat = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ODateInputComponent.prototype, "minDateString", {
        get: function () {
            return this._minDateString;
        },
        set: function (val) {
            this._minDateString = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ODateInputComponent.prototype, "maxDateString", {
        get: function () {
            return this._maxDateString;
        },
        set: function (val) {
            this._maxDateString = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ODateInputComponent.prototype, "touchUi", {
        get: function () {
            return this.oTouchUi || false;
        },
        set: function (val) {
            this.oTouchUi = val;
            this.datepicker.touchUi = this.touchUi;
        },
        enumerable: true,
        configurable: true
    });
    ODateInputComponent.prototype.ensureODateValueType = function (val) {
        if (!Util.isDefined(val)) {
            return val;
        }
        var result = val;
        switch (this.valueType) {
            case 'string':
                if (typeof val === 'string') {
                    var m = moment(val, this.oformat);
                    if (m.isValid()) {
                        this.dateValue = new Date(m.valueOf());
                    }
                }
                else {
                    result = undefined;
                }
                break;
            case 'date':
                if ((val instanceof Date)) {
                    this.dateValue = val;
                }
                else {
                    result = undefined;
                }
                break;
            case 'timestamp':
                if (typeof val === 'number') {
                    this.dateValue = new Date(val);
                }
                else {
                    result = undefined;
                }
                break;
            case 'iso-8601':
                if (typeof val !== 'string') {
                    var acceptTimestamp = typeof val === 'number' && this.getSQLType() === SQLTypes.TIMESTAMP;
                    if (acceptTimestamp) {
                        this.dateValue = new Date(val);
                    }
                    else {
                        result = undefined;
                    }
                }
                else {
                    var m = moment(val);
                    if (m.isValid()) {
                        this.dateValue = new Date(m.valueOf());
                    }
                    else {
                        result = undefined;
                    }
                }
                break;
            default:
                break;
        }
        if (!Util.isDefined(result)) {
            console.warn("ODateInputComponent value (" + val + ") is not consistent with value-type (" + this.valueType + ")");
        }
        return result;
    };
    ODateInputComponent.prototype.setFormValue = function (val, options, setDirty) {
        if (setDirty === void 0) { setDirty = false; }
        var value = val;
        if (val instanceof OFormValue) {
            value = val.value;
        }
        value = this.ensureODateValueType(value);
        _super.prototype.setFormValue.call(this, value, options, setDirty);
    };
    Object.defineProperty(ODateInputComponent.prototype, "valueType", {
        get: function () {
            return this._valueType;
        },
        set: function (val) {
            this._valueType = ODateInputComponent.convertToODateValueType(val);
        },
        enumerable: true,
        configurable: true
    });
    ODateInputComponent.decorators = [
        { type: Component, args: [{
                    moduleId: module.id,
                    selector: 'o-date-input',
                    template: "\n    <div fxLayout=\"row\" fxLayoutAlign=\"space-between center\" [formGroup]=\"getFormGroup()\" [matTooltip]=\"tooltip\"\n      [matTooltipClass]=\"tooltipClass\" [matTooltipPosition]=\"tooltipPosition\" [matTooltipShowDelay]=\"tooltipShowDelay\"\n      [matTooltipHideDelay]=\"tooltipHideDelay\" (click)=\"onClickInput($event)\">\n      <mat-form-field [appearance]=\"appearance\" [floatLabel]=\"floatLabel\" [hideRequiredMarker]=\"hideRequiredMarker\"\n        [class.custom-width]=\"hasCustomWidth\" class=\"icon-field\" fxFlexFill>\n        <mat-label *ngIf=\"labelVisible\">{{ olabel | oTranslate }}</mat-label>\n        <input matInput #matInputRef [matDatepicker]=\"d\" [id]=\"getAttribute()\" [formControlName]=\"getAttribute()\"\n          [placeholder]=\"placeHolder\" [readonly]=\"isReadOnly || !textInputEnabled\" (focus)=\"innerOnFocus($event)\"\n          (blur)=\"innerOnBlur($event)\" [matDatepickerFilter]=\"filterDate\" (dateChange)=\"onChangeEvent($event)\"\n          [required]=\"isRequired\" [value]=\"getValueAsDate()\">\n\n        <button type=\"button\" *ngIf=\"showClearButton\" matSuffix mat-icon-button (click)=\"onClickClearValue($event)\">\n          <mat-icon svgIcon=\"ontimize:close\"></mat-icon>\n        </button>\n        <mat-datepicker-toggle matSuffix [disabled]=\"isReadOnly || !enabled\" [class.read-only]=\"isReadOnly\" [for]=\"d\">\n          <mat-icon matDatepickerToggleIcon>today</mat-icon>\n        </mat-datepicker-toggle>\n        <mat-datepicker #d [disabled]=\"isReadOnly || !enabled\"></mat-datepicker>\n        <mat-error *ngIf=\"hasError('required')\" text=\"{{ 'FORM_VALIDATION.REQUIRED' | oTranslate }}\"></mat-error>\n        <mat-error *ngIf=\"hasError('matDatepickerParse')\"\n          text=\"{{ 'FORM_VALIDATION.DATE_PARSE' | oTranslate }} {{ oformat }}\"></mat-error>\n        <mat-error *ngIf=\"hasError('matDatepickerFilter')\" text=\"{{ 'FORM_VALIDATION.DATE_FILTER' | oTranslate }}\">\n        </mat-error>\n        <mat-error *ngIf=\"hasError('matDatepickerMin')\"\n          text=\"{{ 'FORM_VALIDATION.DATE_MIN' | oTranslate }} {{ minDateString }}\"></mat-error>\n        <mat-error *ngIf=\"hasError('matDatepickerMax')\"\n          text=\"{{ 'FORM_VALIDATION.DATE_MAX' | oTranslate }} {{ maxDateString }}\"></mat-error>\n        <mat-error *ngFor=\"let oError of getActiveOErrors()\" text=\"{{ oError.text | oTranslate }}\"></mat-error>\n      </mat-form-field>\n    </div>\n  ",
                    styles: ['./o-date-input.component.scss'],
                    outputs: DEFAULT_OUTPUTS_O_DATE_INPUT,
                    inputs: DEFAULT_INPUTS_O_DATE_INPUT,
                    providers: [
                        { provide: DateAdapter, useClass: OntimizeMomentDateAdapter, deps: [MAT_DATE_LOCALE] }
                    ]
                },] },
    ];
    ODateInputComponent.ctorParameters = function () { return [
        { type: OFormComponent, decorators: [{ type: Optional }, { type: Inject, args: [forwardRef(function () { return OFormComponent; }),] }] },
        { type: DateAdapter },
        { type: ElementRef },
        { type: Injector }
    ]; };
    ODateInputComponent.propDecorators = {
        datepicker: [{ type: ViewChild, args: [MatDatepicker,] }],
        datepickerInput: [{ type: ViewChild, args: [MatDatepickerInput,] }],
        matInputRef: [{ type: ViewChild, args: ['matInputRef',] }]
    };
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], ODateInputComponent.prototype, "textInputEnabled", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], ODateInputComponent.prototype, "oTouchUi", void 0);
    return ODateInputComponent;
}(OFormDataComponent));
export { ODateInputComponent };
var ODateInputModule = (function () {
    function ODateInputModule() {
    }
    ODateInputModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [ODateInputComponent],
                    imports: [CommonModule, OSharedModule],
                    exports: [ODateInputComponent]
                },] },
    ];
    return ODateInputModule;
}());
export { ODateInputModule };
//# sourceMappingURL=o-date-input.component.js.map