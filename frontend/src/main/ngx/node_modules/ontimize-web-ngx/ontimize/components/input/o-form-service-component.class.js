var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { EventEmitter, NgZone } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { Observable } from 'rxjs';
import { InputConverter } from '../../decorators';
import { DialogService, OntimizeService } from '../../services';
import { Codes, Util } from '../../utils';
import { DEFAULT_INPUTS_O_FORM_DATA_COMPONENT, DEFAULT_OUTPUTS_O_FORM_DATA_COMPONENT, OFormDataComponent, } from '../o-form-data-component.class';
import { ServiceUtils } from '../service.utils';
export var DEFAULT_INPUTS_O_FORM_SERVICE_COMPONENT = DEFAULT_INPUTS_O_FORM_DATA_COMPONENT.concat([
    'staticData: static-data',
    'entity',
    'service',
    'columns',
    'valueColumn: value-column',
    'valueColumnType: value-column-type',
    'parentKeys: parent-keys',
    'visibleColumns: visible-columns',
    'descriptionColumns: description-columns',
    'separator',
    'queryOnInit: query-on-init',
    'queryOnBind: query-on-bind',
    'queryOnEvent: query-on-event',
    'queryMethod: query-method',
    'serviceType: service-type',
    'queryWithNullParentKeys: query-with-null-parent-keys',
    'setValueOnValueChange: set-value-on-value-change'
]);
export var DEFAULT_OUTPUTS_O_FORM_SERVICE_COMPONENT = DEFAULT_OUTPUTS_O_FORM_DATA_COMPONENT.concat([
    'onSetValueOnValueChange',
    'onDataLoaded'
]);
var OFormServiceComponent = (function (_super) {
    __extends(OFormServiceComponent, _super);
    function OFormServiceComponent(form, elRef, injector) {
        var _this = _super.call(this, form, elRef, injector) || this;
        _this.valueColumnType = Codes.TYPE_INT;
        _this.separator = Codes.SPACE_SEPARATOR;
        _this.queryOnInit = true;
        _this.queryOnBind = false;
        _this.queryMethod = Codes.QUERY_METHOD;
        _this.queryWithNullParentKeys = false;
        _this.onSetValueOnValueChange = new EventEmitter();
        _this.onDataLoaded = new EventEmitter();
        _this.dataArray = [];
        _this.colArray = [];
        _this.visibleColArray = [];
        _this.descriptionColArray = [];
        _this.loading = false;
        _this.cacheQueried = false;
        _this._pKeysEquiv = {};
        _this._setValueOnValueChangeEquiv = {};
        _this.delayLoad = 250;
        _this.loadingSubject = new BehaviorSubject(false);
        _this.form = form;
        _this.elRef = elRef;
        _this.dialogService = injector.get(DialogService);
        return _this;
    }
    OFormServiceComponent.prototype.initialize = function () {
        var _this = this;
        _super.prototype.initialize.call(this);
        this.cacheQueried = false;
        this.colArray = Util.parseArray(this.columns, true);
        this.visibleColArray = Util.parseArray(this.visibleColumns, true);
        if (Util.isArrayEmpty(this.visibleColArray)) {
            this.visibleColumns = this.columns;
            this.visibleColArray = this.colArray;
        }
        this.descriptionColArray = Util.parseArray(this.descriptionColumns);
        if (Util.isArrayEmpty(this.descriptionColArray)) {
            this.descriptionColArray = this.visibleColArray;
        }
        var pkArray = Util.parseArray(this.parentKeys);
        this._pKeysEquiv = Util.parseParentKeysEquivalences(pkArray);
        var setValueSetArray = Util.parseArray(this.setValueOnValueChange);
        this._setValueOnValueChangeEquiv = Util.parseParentKeysEquivalences(setValueSetArray);
        if (this.form && this.queryOnBind) {
            var self_1 = this;
            this._formDataSubcribe = this.form.onDataLoaded.subscribe(function () { return self_1.queryData(); });
        }
        if (this.staticData) {
            this.queryOnBind = false;
            this.queryOnInit = false;
            this.setDataArray(this.staticData);
        }
        else {
            this.configureService();
        }
        if (this.queryOnEvent !== undefined && this.queryOnEvent.subscribe !== undefined) {
            var self_2 = this;
            this.queryOnEventSubscription = this.queryOnEvent.subscribe(function (value) {
                if (Util.isDefined(value) || _this.queryWithNullParentKeys) {
                    self_2.queryData();
                }
            });
        }
    };
    OFormServiceComponent.prototype.destroy = function () {
        _super.prototype.destroy.call(this);
        if (this._formDataSubcribe) {
            this._formDataSubcribe.unsubscribe();
        }
        if (this.queryOnEventSubscription) {
            this.queryOnEventSubscription.unsubscribe();
        }
        if (this.loaderSubscription) {
            this.loaderSubscription.unsubscribe();
        }
    };
    OFormServiceComponent.prototype.emitOnValueChange = function (type, newValue, oldValue) {
        var _this = this;
        _super.prototype.emitOnValueChange.call(this, type, newValue, oldValue);
        var record = this.getSelectedRecord();
        this.onSetValueOnValueChange.emit(record);
        var setValueSetKeys = Object.keys(this._setValueOnValueChangeEquiv);
        if (setValueSetKeys.length) {
            var formComponents_1 = this.form.getComponents();
            if (Util.isDefined(record)) {
                setValueSetKeys.forEach(function (key) {
                    var comp = formComponents_1[_this._setValueOnValueChangeEquiv[key]];
                    if (Util.isDefined(comp)) {
                        comp.setValue(record[key]);
                    }
                });
            }
        }
    };
    OFormServiceComponent.prototype.configureService = function () {
        var loadingService = OntimizeService;
        if (this.serviceType) {
            loadingService = this.serviceType;
        }
        try {
            this.dataService = this.injector.get(loadingService);
            if (Util.isDataService(this.dataService)) {
                var serviceCfg = this.dataService.getDefaultServiceConfiguration(this.service);
                if (this.entity) {
                    serviceCfg['entity'] = this.entity;
                }
                this.dataService.configureService(serviceCfg);
            }
        }
        catch (e) {
            console.error(e);
        }
    };
    OFormServiceComponent.prototype.getAttributesValuesToQuery = function (columns) {
        var result = Util.isDefined(columns) ? columns : this.colArray;
        if (result.indexOf(this.valueColumn) === -1) {
            result.push(this.valueColumn);
        }
        return result;
    };
    OFormServiceComponent.prototype.queryData = function (filter) {
        var _this = this;
        if (filter === void 0) { filter = undefined; }
        var self = this;
        if (!this.dataService || !(this.queryMethod in this.dataService) || !this.entity) {
            console.warn('Service not properly configured! aborting query');
            return;
        }
        filter = Object.assign(filter || {}, ServiceUtils.getParentKeysFromForm(this._pKeysEquiv, this.form));
        if (!ServiceUtils.filterContainsAllParentKeys(filter, this._pKeysEquiv) && !this.queryWithNullParentKeys) {
            this.setDataArray([]);
        }
        else {
            if (this.querySuscription) {
                this.querySuscription.unsubscribe();
            }
            if (this.loaderSubscription) {
                this.loaderSubscription.unsubscribe();
            }
            var queryCols = this.getAttributesValuesToQuery();
            this.loaderSubscription = this.load();
            this.querySuscription = this.dataService[this.queryMethod](filter, queryCols, this.entity).subscribe(function (resp) {
                if (resp.code === Codes.ONTIMIZE_SUCCESSFUL_CODE) {
                    self.cacheQueried = true;
                    self.setDataArray(resp.data);
                }
                self.loadingSubject.next(false);
                self.loaderSubscription.unsubscribe();
            }, function (err) {
                console.error(err);
                self.loadingSubject.next(false);
                self.loaderSubscription.unsubscribe();
                if (err && !Util.isObject(err)) {
                    _this.dialogService.alert('ERROR', err);
                }
                else {
                    _this.dialogService.alert('ERROR', 'MESSAGES.ERROR_QUERY');
                }
            });
        }
    };
    OFormServiceComponent.prototype.getDataArray = function () {
        return this.dataArray;
    };
    OFormServiceComponent.prototype.setDataArray = function (data) {
        if (Util.isArray(data)) {
            this.dataArray = data;
            this.syncDataIndex(false);
        }
        else if (Util.isObject(data) && Object.keys(data).length > 0) {
            this.dataArray = [data];
        }
        else {
            console.warn('Component has received not supported service data. Supported data are Array or not empty Object');
            this.dataArray = [];
        }
        this.onDataLoaded.emit(this.dataArray);
    };
    OFormServiceComponent.prototype.syncDataIndex = function (queryIfNotFound) {
        var _this = this;
        if (queryIfNotFound === void 0) { queryIfNotFound = true; }
        this._currentIndex = undefined;
        if (this.value && this.value.value && this.dataArray) {
            var self_3 = this;
            this.dataArray.forEach(function (item, index) {
                if (_this.value.value instanceof Array) {
                    _this._currentIndex = [];
                    _this.value.value.forEach(function (itemValue, indexValue) {
                        if (item[self_3.valueColumn] === itemValue) {
                            _this._currentIndex[_this._currentIndex.length] = indexValue;
                        }
                    });
                }
                else if (item[self_3.valueColumn] === _this.value.value) {
                    self_3._currentIndex = index;
                }
                if (item[self_3.valueColumn] === _this.value.value) {
                    self_3._currentIndex = index;
                }
            });
            if (this._currentIndex === undefined && queryIfNotFound) {
                if (this.queryOnBind && this.dataArray && this.dataArray.length === 0
                    && !this.cacheQueried && !this.isEmpty()) {
                    this.queryData();
                }
                return;
            }
        }
    };
    OFormServiceComponent.prototype.parseByValueColumnType = function (val) {
        var value = val;
        if (this.valueColumnType === Codes.TYPE_INT) {
            var parsed = parseInt(value);
            if (!isNaN(parsed)) {
                value = parsed;
            }
        }
        return value;
    };
    OFormServiceComponent.prototype.setValue = function (val, options) {
        var value = this.parseByValueColumnType(val);
        _super.prototype.setValue.call(this, value, options);
    };
    OFormServiceComponent.prototype.setData = function (val) {
        var value = this.parseByValueColumnType(val);
        _super.prototype.setData.call(this, value);
    };
    OFormServiceComponent.prototype.getSelectedRecord = function () {
        var _this = this;
        var result = undefined;
        var selectedValue = this.getValue();
        if (Util.isDefined(selectedValue)) {
            result = this.getDataArray().find(function (item) { return item[_this.valueColumn] === selectedValue; });
        }
        return result;
    };
    OFormServiceComponent.prototype.load = function () {
        var self = this;
        var zone = this.injector.get(NgZone);
        var loadObservable = new Observable(function (observer) {
            var timer = window.setTimeout(function () {
                observer.next(true);
            }, self.delayLoad);
            return function () {
                window.clearTimeout(timer);
                zone.run(function () {
                    observer.next(false);
                    self.loading = false;
                });
            };
        });
        var subscription = loadObservable.subscribe(function (val) {
            zone.run(function () {
                self.loading = val;
                self.loadingSubject.next(val);
            });
        });
        return subscription;
    };
    OFormServiceComponent.prototype.onFormControlChange = function (value) {
        if (this.oldValue === value) {
            return;
        }
        _super.prototype.onFormControlChange.call(this, value);
    };
    OFormServiceComponent.DEFAULT_INPUTS_O_FORM_SERVICE_COMPONENT = DEFAULT_INPUTS_O_FORM_SERVICE_COMPONENT;
    OFormServiceComponent.DEFAULT_OUTPUTS_O_FORM_SERVICE_COMPONENT = DEFAULT_OUTPUTS_O_FORM_SERVICE_COMPONENT;
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OFormServiceComponent.prototype, "queryOnInit", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OFormServiceComponent.prototype, "queryOnBind", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OFormServiceComponent.prototype, "queryWithNullParentKeys", void 0);
    return OFormServiceComponent;
}(OFormDataComponent));
export { OFormServiceComponent };
//# sourceMappingURL=o-form-service-component.class.js.map