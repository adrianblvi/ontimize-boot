import { ChangeDetectorRef, Component, ElementRef, EventEmitter, forwardRef, Inject, ViewChild } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { MatSelect } from '@angular/material';
import { Subject } from 'rxjs';
import { take, takeUntil } from 'rxjs/operators';
var OComboSearchComponent = (function () {
    function OComboSearchComponent(matSelect, changeDetectorRef) {
        this.matSelect = matSelect;
        this.changeDetectorRef = changeDetectorRef;
        this.placeholder = 'SEARCH';
        this.change = new EventEmitter();
        this._onDestroy = new Subject();
        this.onChange = function (_) {
        };
        this.onTouched = function (_) {
        };
    }
    Object.defineProperty(OComboSearchComponent.prototype, "value", {
        get: function () {
            return this._value;
        },
        enumerable: true,
        configurable: true
    });
    OComboSearchComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.matSelect.openedChange
            .pipe(takeUntil(this._onDestroy))
            .subscribe(function (opened) { return opened ? _this.focus() : _this.reset(); });
        this.matSelect.openedChange
            .pipe(take(1))
            .pipe(takeUntil(this._onDestroy))
            .subscribe(function () {
            if (_this.matSelect.multiple) {
                _this.previousSelectedValues = _this.matSelect.value;
            }
            _this._options = _this.matSelect.options;
            _this._options.changes
                .pipe(takeUntil(_this._onDestroy))
                .subscribe(function () {
                var keyManager = _this.matSelect._keyManager;
                if (keyManager && _this.matSelect.panelOpen) {
                    setTimeout(function () { return keyManager.setFirstItemActive(); });
                }
            });
        });
        this.change
            .pipe(takeUntil(this._onDestroy))
            .subscribe(function () { return _this.changeDetectorRef.detectChanges(); });
        this.initMultipleHandling();
    };
    OComboSearchComponent.prototype.ngOnDestroy = function () {
        this._onDestroy.next();
        this._onDestroy.complete();
    };
    OComboSearchComponent.prototype.handleKeydown = function (event) {
        if (event.keyCode === 32) {
            event.stopPropagation();
        }
    };
    OComboSearchComponent.prototype.onInputChange = function (value) {
        var valueChanged = value !== this._value;
        if (valueChanged) {
            this._value = value;
            this.onChange(value);
            this.change.emit(value);
        }
    };
    OComboSearchComponent.prototype.onBlur = function (value) {
        this.writeValue(value);
        this.onTouched();
    };
    OComboSearchComponent.prototype.writeValue = function (value) {
        var valueChanged = value !== this._value;
        if (valueChanged) {
            this._value = value;
            this.change.emit(value);
        }
    };
    OComboSearchComponent.prototype.registerOnChange = function (fn) {
        this.onChange = fn;
    };
    OComboSearchComponent.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    OComboSearchComponent.prototype.focus = function () {
        if (!this.searchSelectInput) {
            return;
        }
        var panel = this.matSelect.panel.nativeElement;
        var scrollTop = panel.scrollTop;
        this.searchSelectInput.nativeElement.focus();
        panel.scrollTop = scrollTop;
    };
    OComboSearchComponent.prototype.reset = function (focus) {
        if (!this.searchSelectInput) {
            return;
        }
        this.searchSelectInput.nativeElement.value = '';
        this.onInputChange('');
        if (focus) {
            this.focus();
        }
    };
    OComboSearchComponent.prototype.initMultipleHandling = function () {
        var _this = this;
        this.matSelect.valueChange
            .pipe(takeUntil(this._onDestroy))
            .subscribe(function (values) {
            if (_this.matSelect.multiple) {
                var restoreSelectedValues_1 = false;
                if (_this._value && _this._value.length
                    && _this.previousSelectedValues && Array.isArray(_this.previousSelectedValues)) {
                    if (!values || !Array.isArray(values)) {
                        values = [];
                    }
                    var optionValues_1 = _this.matSelect.options.map(function (option) { return option.value; });
                    _this.previousSelectedValues.forEach(function (previousValue) {
                        if (values.indexOf(previousValue) === -1 && optionValues_1.indexOf(previousValue) === -1) {
                            values.push(previousValue);
                            restoreSelectedValues_1 = true;
                        }
                    });
                }
                if (restoreSelectedValues_1) {
                    _this.matSelect._onChange(values);
                }
                _this.previousSelectedValues = values;
            }
        });
    };
    OComboSearchComponent.decorators = [
        { type: Component, args: [{
                    selector: 'o-combo-search',
                    template: "\n    <input matInput class=\"o-combo-search-hidden\" />\n\n    <mat-form-field floatLabel=\"never\" class=\"o-combo-search-inner\">\n      <input matInput #searchSelectInput placeholder=\"{{ placeholder | oTranslate }}\" (keydown)=\"handleKeydown($event)\"\n        (input)=\"onInputChange($event.target.value)\" (blur)=\"onBlur($event.target.value)\" class=\"mat-select-search-input\" />\n      <button mat-icon-button matSuffix *ngIf=\"value\" (click)=\"reset(true)\" class=\"mat-select-search-clear\">\n        <mat-icon>close</mat-icon>\n      </button>\n    </mat-form-field>\n\n    <div *ngIf=\"value && _options?.length === 0\" fxLayoutAlign=\"center center\" class=\"o-combo-search-emmpty\">\n      <span>{{ 'INPUT.COMBO.EMPTY' | oTranslate }}</span>\n    </div>\n  ",
                    styles: ["\n    :host{display:flex;flex-direction:column;padding:0 16px}:host .o-combo-search-hidden{display:none}:host .o-combo-search-inner{height:3em;width:100%}:host .o-combo-search-emmpty{height:3em;line-height:3em}\n  "],
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return OComboSearchComponent; }),
                            multi: true
                        }
                    ],
                    host: {
                        '[class.o-combo-search]': 'true'
                    }
                },] },
    ];
    OComboSearchComponent.ctorParameters = function () { return [
        { type: MatSelect, decorators: [{ type: Inject, args: [MatSelect,] }] },
        { type: ChangeDetectorRef }
    ]; };
    OComboSearchComponent.propDecorators = {
        searchSelectInput: [{ type: ViewChild, args: ['searchSelectInput', { read: ElementRef },] }]
    };
    return OComboSearchComponent;
}());
export { OComboSearchComponent };
//# sourceMappingURL=o-combo-search.component.js.map