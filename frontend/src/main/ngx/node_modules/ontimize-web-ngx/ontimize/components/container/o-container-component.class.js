import { ElementRef, forwardRef, Inject, Injector, Optional, ViewChild } from '@angular/core';
import { MAT_FORM_FIELD_DEFAULT_OPTIONS } from '@angular/material';
import { OFormComponent } from '../form/form-components';
import { Util } from '../../utils';
export var DEFAULT_INPUTS_O_CONTAINER = [
    'oattr: attr',
    'title',
    'layoutAlign: layout-align',
    'elevation',
    'icon',
    'appearance',
    'layoutGap: layout-gap'
];
var OContainerComponent = (function () {
    function OContainerComponent(form, elRef, injector, matFormDefaultOption) {
        var _this = this;
        this.form = form;
        this.elRef = elRef;
        this.injector = injector;
        this.matFormDefaultOption = matFormDefaultOption;
        this._elevation = 0;
        this.defaultLayoutAlign = 'start start';
        this._outlineGapCalculationNeededImmediately = false;
        this.titleObserver = new MutationObserver(function () { return _this.updateOutlineGap(); });
    }
    Object.defineProperty(OContainerComponent.prototype, "containerTitle", {
        set: function (elem) {
            this._titleEl = elem;
            if (this._titleEl) {
                this.registerObserver();
                this.updateOutlineGap();
            }
            else {
                this.unRegisterObserver();
            }
        },
        enumerable: true,
        configurable: true
    });
    OContainerComponent.prototype.ngAfterViewInit = function () {
        if (this.elRef) {
            this.elRef.nativeElement.removeAttribute('title');
        }
        this.registerObserver();
    };
    OContainerComponent.prototype.ngAfterContentChecked = function () {
        if (this._outlineGapCalculationNeededImmediately) {
            this.updateOutlineGap();
        }
    };
    OContainerComponent.prototype.ngOnDestroy = function () {
        this.unRegisterObserver();
    };
    OContainerComponent.prototype.getAttribute = function () {
        if (this.oattr) {
            return this.oattr;
        }
        else if (this.elRef && this.elRef.nativeElement.attributes['attr']) {
            return this.elRef.nativeElement.attributes['attr'].value;
        }
    };
    Object.defineProperty(OContainerComponent.prototype, "appearance", {
        get: function () {
            return this._appearance;
        },
        set: function (value) {
            var _this = this;
            this._appearance = value;
            setTimeout(function () { _this.updateOutlineGap(); });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OContainerComponent.prototype, "elevation", {
        get: function () {
            return this._elevation;
        },
        set: function (elevation) {
            this._elevation = elevation;
            this.propagateElevationToDOM();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OContainerComponent.prototype, "layoutAlign", {
        get: function () {
            return this._layoutAlign;
        },
        set: function (align) {
            if (!align || align.length === 0) {
                align = this.defaultLayoutAlign;
            }
            this._layoutAlign = align;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OContainerComponent.prototype, "layoutGap", {
        get: function () {
            return this._layoutGap;
        },
        set: function (layoutGap) {
            this._layoutGap = layoutGap;
        },
        enumerable: true,
        configurable: true
    });
    OContainerComponent.prototype.hasHeader = function () {
        return !!this.title || !!this.icon;
    };
    OContainerComponent.prototype.isAppearanceOutline = function () {
        var isAppearanceOutline = (this.matFormDefaultOption && this.matFormDefaultOption.appearance === OContainerComponent.APPEARANCE_OUTLINE);
        if (Util.isDefined(this.appearance)) {
            isAppearanceOutline = this.appearance === OContainerComponent.APPEARANCE_OUTLINE;
        }
        return isAppearanceOutline;
    };
    OContainerComponent.prototype.hasTitleInAppearanceOutline = function () {
        return this.isAppearanceOutline() && this.hasHeader();
    };
    OContainerComponent.prototype.propagateElevationToDOM = function () {
        this.cleanElevationCSSclasses();
        if (this.elevation > 0 && this.elevation <= 12) {
            this.elRef.nativeElement.classList.add('mat-elevation-z' + this.elevation);
        }
    };
    OContainerComponent.prototype.cleanElevationCSSclasses = function () {
        var _this = this;
        var classList = [].slice.call(this.elRef.nativeElement.classList);
        if (classList && classList.length) {
            classList.forEach(function (item) {
                if (item.startsWith('mat-elevation')) {
                    _this.elRef.nativeElement.classList.remove(item);
                }
            });
        }
    };
    OContainerComponent.prototype.updateOutlineGap = function () {
        if (this.isAppearanceOutline()) {
            var titleEl = this._titleEl ? this._titleEl.nativeElement : null;
            if (!this._containerRef) {
                return;
            }
            if (!document.documentElement.contains(this.elRef.nativeElement)) {
                this._outlineGapCalculationNeededImmediately = true;
                return;
            }
            var container = this._containerRef.nativeElement;
            var containerRect = container.getBoundingClientRect();
            if (containerRect.width === 0 && containerRect.height === 0) {
                return;
            }
            var containerStart = containerRect.left;
            var labelStart = titleEl.getBoundingClientRect().left;
            var labelWidth = this.hasHeader() ? titleEl.offsetWidth : 0;
            var startWidth = labelStart - containerStart;
            var startEls = container.querySelectorAll('.o-container-outline-start');
            var gapEls = container.querySelectorAll('.o-container-outline-gap');
            gapEls[0].style.width = labelWidth + "px";
            startEls[0].style.width = startWidth + "px";
            this._outlineGapCalculationNeededImmediately = false;
        }
    };
    OContainerComponent.prototype.registerObserver = function () {
        if (this._titleEl) {
            this.titleObserver.observe(this._titleEl.nativeElement, {
                childList: true,
                characterData: true,
                subtree: true
            });
        }
    };
    OContainerComponent.prototype.unRegisterObserver = function () {
        if (this.titleObserver) {
            this.titleObserver.disconnect();
        }
    };
    OContainerComponent.APPEARANCE_OUTLINE = 'outline';
    OContainerComponent.DEFAULT_INPUTS_O_CONTAINER = DEFAULT_INPUTS_O_CONTAINER;
    OContainerComponent.ctorParameters = function () { return [
        { type: OFormComponent, decorators: [{ type: Optional }, { type: Inject, args: [forwardRef(function () { return OFormComponent; }),] }] },
        { type: ElementRef },
        { type: Injector },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_FORM_FIELD_DEFAULT_OPTIONS,] }] }
    ]; };
    OContainerComponent.propDecorators = {
        containerTitle: [{ type: ViewChild, args: ['containerTitle',] }],
        _containerRef: [{ type: ViewChild, args: ['container',] }]
    };
    return OContainerComponent;
}());
export { OContainerComponent };
//# sourceMappingURL=o-container-component.class.js.map