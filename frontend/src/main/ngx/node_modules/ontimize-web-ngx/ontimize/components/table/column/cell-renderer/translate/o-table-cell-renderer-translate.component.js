var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { ChangeDetectionStrategy, Component, Injector, TemplateRef, ViewChild } from '@angular/core';
import { OTranslatePipe } from '../../../../../pipes';
import { OBaseTableCellRenderer } from '../o-base-table-cell-renderer.class';
export var DEFAULT_INPUTS_O_TABLE_CELL_RENDERER_TRANSLATE = [
    'translateArgsFn: translate-params'
];
var OTableCellRendererTranslateComponent = (function (_super) {
    __extends(OTableCellRendererTranslateComponent, _super);
    function OTableCellRendererTranslateComponent(injector) {
        var _this = _super.call(this, injector) || this;
        _this.injector = injector;
        _this.pipeArguments = {};
        _this.tableColumn.type = 'translate';
        _this.setComponentPipe();
        return _this;
    }
    OTableCellRendererTranslateComponent.prototype.setComponentPipe = function () {
        this.componentPipe = new OTranslatePipe(this.injector);
    };
    OTableCellRendererTranslateComponent.prototype.getCellData = function (cellvalue, rowvalue) {
        this.pipeArguments = this.translateArgsFn ? { values: this.translateArgsFn(rowvalue) } : {};
        return _super.prototype.getCellData.call(this, cellvalue, rowvalue);
    };
    OTableCellRendererTranslateComponent.DEFAULT_IPUTS_O_TABLE_CELL_RENDERER_TRANSLATE = DEFAULT_INPUTS_O_TABLE_CELL_RENDERER_TRANSLATE;
    OTableCellRendererTranslateComponent.decorators = [
        { type: Component, args: [{
                    moduleId: module.id,
                    selector: 'o-table-cell-renderer-translate',
                    template: "\n    <ng-template #templateref let-cellvalue=\"cellvalue\" let-rowvalue=\"rowvalue\">\n      {{ getCellData(cellvalue, rowvalue) }}\n    </ng-template>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    inputs: DEFAULT_INPUTS_O_TABLE_CELL_RENDERER_TRANSLATE
                },] },
    ];
    OTableCellRendererTranslateComponent.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    OTableCellRendererTranslateComponent.propDecorators = {
        templateref: [{ type: ViewChild, args: ['templateref', { read: TemplateRef },] }]
    };
    return OTableCellRendererTranslateComponent;
}(OBaseTableCellRenderer));
export { OTableCellRendererTranslateComponent };
//# sourceMappingURL=o-table-cell-renderer-translate.component.js.map