var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { ChangeDetectionStrategy, Component, Inject, Injector, forwardRef } from '@angular/core';
import { Codes, Util } from '../../../../../utils';
import { OTableComponent } from '../../../o-table.component';
import { InputConverter } from '../../../../../decorators';
export var DEFAULT_INPUTS_O_TABLE_COLUMN_FILTER = [
    'columns',
    'preloadValues: preload-values',
    'mode'
];
export var DEFAULT_OUTPUTS_O_TABLE_COLUMN_FILTER = [];
export var ColumnValueFilterOperator;
(function (ColumnValueFilterOperator) {
    ColumnValueFilterOperator[ColumnValueFilterOperator["IN"] = 0] = "IN";
    ColumnValueFilterOperator[ColumnValueFilterOperator["LESS_EQUAL"] = 1] = "LESS_EQUAL";
    ColumnValueFilterOperator[ColumnValueFilterOperator["MORE_EQUAL"] = 2] = "MORE_EQUAL";
    ColumnValueFilterOperator[ColumnValueFilterOperator["BETWEEN"] = 3] = "BETWEEN";
    ColumnValueFilterOperator[ColumnValueFilterOperator["EQUAL"] = 4] = "EQUAL";
})(ColumnValueFilterOperator || (ColumnValueFilterOperator = {}));
var OTableColumnsFilterComponent = (function () {
    function OTableColumnsFilterComponent(injector, table) {
        this.injector = injector;
        this.table = table;
        this._mode = 'default';
        this.preloadValues = true;
        this._columnsArray = [];
        this.columnsComparisonProperty = {};
    }
    Object.defineProperty(OTableColumnsFilterComponent.prototype, "mode", {
        get: function () {
            return this._mode;
        },
        set: function (val) {
            var m = OTableColumnsFilterComponent.OTableColumnsFilterModes.find(function (e) { return e === val; });
            if (Util.isDefined(m)) {
                this._mode = m;
            }
            else {
                console.error('Invalid `o-table-columns-filter` mode (' + val + ')');
            }
        },
        enumerable: true,
        configurable: true
    });
    OTableColumnsFilterComponent.prototype.ngOnInit = function () {
        if (this.columnsArray.length === 0) {
            this.columnsArray = this.table.oTableOptions.visibleColumns;
        }
        var self = this;
        this.columnsArray.forEach(function (colData, i, arr) {
            var colDef = colData.split(Codes.TYPE_SEPARATOR);
            var colName = colDef[0];
            var compType = (colDef[1] || '').toUpperCase();
            if ([OTableColumnsFilterComponent.DEFAULT_COMPARISON_TYPE, OTableColumnsFilterComponent.MODEL_COMPARISON_TYPE].indexOf(compType) === -1) {
                compType = OTableColumnsFilterComponent.DEFAULT_COMPARISON_TYPE;
            }
            arr[i] = colName;
            self.columnsComparisonProperty[colName] = compType;
        });
        this.table.setOTableColumnsFilter(this);
    };
    OTableColumnsFilterComponent.prototype.isColumnFilterable = function (attr) {
        return (this.columnsArray.indexOf(attr) !== -1);
    };
    OTableColumnsFilterComponent.prototype.getColumnComparisonValue = function (column, val) {
        if (!column || this.columnsComparisonProperty[column.attr] === OTableColumnsFilterComponent.MODEL_COMPARISON_TYPE) {
            return val;
        }
        else {
            return column.renderer ? column.renderer.getCellData(val) : val;
        }
    };
    Object.defineProperty(OTableColumnsFilterComponent.prototype, "columns", {
        set: function (arg) {
            this._columns = arg;
            this._columnsArray = Util.parseArray(this._columns, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableColumnsFilterComponent.prototype, "columnsArray", {
        get: function () {
            return this._columnsArray;
        },
        set: function (arg) {
            this._columnsArray = arg;
        },
        enumerable: true,
        configurable: true
    });
    OTableColumnsFilterComponent.DEFAULT_INPUTS_O_TABLE_COLUMN_FILTER = DEFAULT_INPUTS_O_TABLE_COLUMN_FILTER;
    OTableColumnsFilterComponent.DEFAULT_OUTPUTS_O_TABLE_COLUMN_FILTER = DEFAULT_OUTPUTS_O_TABLE_COLUMN_FILTER;
    OTableColumnsFilterComponent.DEFAULT_COMPARISON_TYPE = 'VIEW';
    OTableColumnsFilterComponent.MODEL_COMPARISON_TYPE = 'MODEL';
    OTableColumnsFilterComponent.OTableColumnsFilterModes = ['default', 'selection', 'custom'];
    OTableColumnsFilterComponent.decorators = [
        { type: Component, args: [{
                    moduleId: module.id,
                    selector: 'o-table-columns-filter',
                    template: ' ',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    inputs: DEFAULT_INPUTS_O_TABLE_COLUMN_FILTER,
                    outputs: DEFAULT_OUTPUTS_O_TABLE_COLUMN_FILTER
                },] },
    ];
    OTableColumnsFilterComponent.ctorParameters = function () { return [
        { type: Injector },
        { type: OTableComponent, decorators: [{ type: Inject, args: [forwardRef(function () { return OTableComponent; }),] }] }
    ]; };
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OTableColumnsFilterComponent.prototype, "preloadValues", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], OTableColumnsFilterComponent.prototype, "mode", null);
    return OTableColumnsFilterComponent;
}());
export { OTableColumnsFilterComponent };
//# sourceMappingURL=o-table-columns-filter.component.js.map