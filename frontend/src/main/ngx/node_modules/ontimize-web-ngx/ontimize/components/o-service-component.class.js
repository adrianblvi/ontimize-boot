var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { SelectionModel } from '@angular/cdk/collections';
import { forwardRef, ViewChild } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { OSearchInputComponent } from '../components';
import { InputConverter } from '../decorators';
import { OFormLayoutDialogComponent } from '../layouts/form-layout/dialog/o-form-layout-dialog.component';
import { OFormLayoutManagerComponent } from '../layouts/form-layout/o-form-layout-manager.component';
import { NavigationService, OTranslateService, PermissionsService } from '../services';
import { Codes, Util } from '../utils';
import { FilterExpressionUtils } from './filter-expression.utils';
import { DEFAULT_INPUTS_O_SERVICE_BASE_COMPONENT, OServiceBaseComponent } from './o-service-base-component.class';
export var DEFAULT_INPUTS_O_SERVICE_COMPONENT = DEFAULT_INPUTS_O_SERVICE_BASE_COMPONENT.concat([
    '_title: title',
    'ovisible: visible',
    'enabled',
    'controls',
    'detailMode: detail-mode',
    'detailFormRoute: detail-form-route',
    'recursiveDetail: recursive-detail',
    'detailButtonInRow: detail-button-in-row',
    'detailButtonInRowIcon: detail-button-in-row-icon',
    'editFormRoute: edit-form-route',
    'recursiveEdit: recursive-edit',
    'editButtonInRow: edit-button-in-row',
    'editButtonInRowIcon: edit-button-in-row-icon',
    'insertButton: insert-button',
    'rowHeight : row-height',
    'insertFormRoute: insert-form-route',
    'recursiveInsert: recursive-insert',
    'filterCaseSensitive: filter-case-sensitive',
    'quickFilter: quick-filter',
]);
var OServiceComponent = (function (_super) {
    __extends(OServiceComponent, _super);
    function OServiceComponent(injector, elRef, form) {
        var _this = _super.call(this, injector) || this;
        _this.elRef = elRef;
        _this.form = form;
        _this.ovisible = true;
        _this.oenabled = true;
        _this.controls = true;
        _this.detailMode = Codes.DETAIL_MODE_CLICK;
        _this.recursiveDetail = false;
        _this.detailButtonInRow = false;
        _this.detailButtonInRowIcon = Codes.DETAIL_ICON;
        _this.recursiveEdit = false;
        _this.editButtonInRow = false;
        _this.editButtonInRowIcon = Codes.EDIT_ICON;
        _this._rowHeight = Codes.DEFAULT_ROW_HEIGHT;
        _this.rowHeightSubject = new BehaviorSubject(_this._rowHeight);
        _this.rowHeightObservable = _this.rowHeightSubject.asObservable();
        _this.recursiveInsert = false;
        _this.filterCaseSensitive = false;
        _this._quickFilter = true;
        _this.selection = new SelectionModel(true, []);
        _this.permissionsService = _this.injector.get(PermissionsService);
        _this.translateService = _this.injector.get(OTranslateService);
        _this.navigationService = _this.injector.get(NavigationService);
        try {
            _this.formLayoutManager = _this.injector.get(OFormLayoutManagerComponent);
        }
        catch (e) {
        }
        try {
            _this.oFormLayoutDialog = _this.injector.get(OFormLayoutDialogComponent);
            _this.formLayoutManager = _this.oFormLayoutDialog.formLayoutManager;
        }
        catch (e) {
        }
        return _this;
    }
    Object.defineProperty(OServiceComponent.prototype, "title", {
        get: function () {
            if (Util.isDefined(this._title)) {
                return this.translateService.get(this._title);
            }
            return this._title;
        },
        set: function (val) {
            this._title = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OServiceComponent.prototype, "rowHeight", {
        get: function () {
            return this._rowHeight;
        },
        set: function (value) {
            this._rowHeight = value ? value.toLowerCase() : value;
            if (!Codes.isValidRowHeight(this._rowHeight)) {
                this._rowHeight = Codes.DEFAULT_ROW_HEIGHT;
            }
            this.rowHeightSubject.next(this._rowHeight);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OServiceComponent.prototype, "quickFilter", {
        get: function () {
            return this._quickFilter;
        },
        set: function (val) {
            var _this = this;
            val = Util.parseBoolean(String(val));
            this._quickFilter = val;
            if (val) {
                setTimeout(function () { return _this.registerQuickFilter(_this.searchInputComponent); }, 0);
            }
        },
        enumerable: true,
        configurable: true
    });
    OServiceComponent.prototype.initialize = function () {
        var _this = this;
        if (this.formLayoutManager && this.formLayoutManager.isTabMode() && this.formLayoutManager.oTabGroup) {
            this.formLayoutManagerTabIndex = this.formLayoutManager.oTabGroup.data.length;
            this.tabsSubscriptions = this.formLayoutManager.oTabGroup.onSelectedTabChange.subscribe(function () {
                if (_this.formLayoutManagerTabIndex !== _this.formLayoutManager.oTabGroup.selectedTabIndex) {
                    _this.updateStateStorage();
                    _this.alreadyStored = false;
                }
            });
            this.tabsSubscriptions.add(this.formLayoutManager.oTabGroup.onCloseTab.subscribe(function () {
                if (_this.formLayoutManagerTabIndex === _this.formLayoutManager.oTabGroup.selectedTabIndex) {
                    _this.updateStateStorage();
                }
            }));
        }
        _super.prototype.initialize.call(this);
        if (this.detailButtonInRow || this.editButtonInRow) {
            this.detailMode = Codes.DETAIL_MODE_NONE;
        }
    };
    OServiceComponent.prototype.afterViewInit = function () {
        var _this = this;
        _super.prototype.afterViewInit.call(this);
        if (this.elRef) {
            this.elRef.nativeElement.removeAttribute('title');
        }
        if (this.formLayoutManager && this.formLayoutManager.isMainComponent(this)) {
            this.onTriggerUpdateSubscription = this.formLayoutManager.onTriggerUpdate.subscribe(function () {
                _this.reloadData();
            });
        }
    };
    OServiceComponent.prototype.destroy = function () {
        _super.prototype.destroy.call(this);
        if (this.onTriggerUpdateSubscription) {
            this.onTriggerUpdateSubscription.unsubscribe();
        }
        if (this.tabsSubscriptions) {
            this.tabsSubscriptions.unsubscribe();
        }
    };
    OServiceComponent.prototype.isVisible = function () {
        return this.ovisible;
    };
    OServiceComponent.prototype.hasControls = function () {
        return this.controls;
    };
    OServiceComponent.prototype.hasTitle = function () {
        return this.title !== undefined;
    };
    OServiceComponent.prototype.getSelectedItems = function () {
        return this.selection.selected;
    };
    OServiceComponent.prototype.clearSelection = function () {
        this.selection.clear();
    };
    OServiceComponent.prototype.setSelected = function (item) {
        this.selection.toggle(item);
    };
    OServiceComponent.prototype.navigateToDetail = function (route, qParams, relativeTo) {
        var extras = {
            relativeTo: relativeTo
        };
        if (this.formLayoutManager && this.formLayoutManager.isMainComponent(this)) {
            qParams[Codes.IGNORE_CAN_DEACTIVATE] = true;
            this.formLayoutManager.setAsActiveFormLayoutManager();
        }
        extras[Codes.QUERY_PARAMS] = qParams;
        this.router.navigate(route, extras);
    };
    OServiceComponent.prototype.insertDetail = function () {
        if (this.oFormLayoutDialog) {
            console.warn('Navigation is not available yet in a form layout manager with mode="dialog"');
            return;
        }
        var route = this.getInsertRoute();
        this.addFormLayoutManagerRoute(route);
        if (route.length > 0) {
            var relativeTo = this.recursiveInsert ? this.actRoute.parent : this.actRoute;
            var qParams = {};
            this.navigateToDetail(route, qParams, relativeTo);
        }
    };
    OServiceComponent.prototype.viewDetail = function (item) {
        if (this.oFormLayoutDialog) {
            console.warn('Navigation is not available yet in a form layout manager with mode="dialog"');
            return;
        }
        var route = this.getItemModeRoute(item, 'detailFormRoute');
        this.addFormLayoutManagerRoute(route);
        if (route.length > 0) {
            var qParams = Codes.getIsDetailObject();
            var relativeTo = this.recursiveDetail ? this.actRoute.parent : this.actRoute;
            this.navigateToDetail(route, qParams, relativeTo);
        }
    };
    OServiceComponent.prototype.editDetail = function (item) {
        if (this.oFormLayoutDialog) {
            console.warn('Navigation is not available yet in a form layout manager with mode="dialog"');
            return;
        }
        var route = this.getItemModeRoute(item, 'editFormRoute');
        this.addFormLayoutManagerRoute(route);
        if (route.length > 0) {
            var qParams = Codes.getIsDetailObject();
            var relativeTo = this.recursiveEdit ? this.actRoute.parent : this.actRoute;
            this.navigateToDetail(route, qParams, relativeTo);
        }
    };
    OServiceComponent.prototype.addFormLayoutManagerRoute = function (routeArr) {
        if (this.formLayoutManager && routeArr.length > 0) {
            var compRoute = this.formLayoutManager.getRouteForComponent(this);
            if (compRoute && compRoute.length > 0) {
                routeArr.unshift.apply(routeArr, compRoute);
            }
        }
    };
    OServiceComponent.prototype.getEncodedParentKeys = function () {
        var encoded;
        if (Object.keys(this._pKeysEquiv).length > 0) {
            var pKeys = this.getParentKeysValues();
            if (Object.keys(pKeys).length > 0) {
                encoded = Util.encodeParentKeys(pKeys);
            }
        }
        return encoded;
    };
    OServiceComponent.prototype.getInsertRoute = function () {
        var route = [];
        if (Util.isDefined(this.detailFormRoute)) {
            route.push(this.detailFormRoute);
        }
        var insertRoute = Util.isDefined(this.insertFormRoute) ? this.insertFormRoute : Codes.DEFAULT_INSERT_ROUTE;
        route.push(insertRoute);
        var encodedParentKeys = this.getEncodedParentKeys();
        if (Util.isDefined(encodedParentKeys)) {
            var routeObj = {};
            routeObj[Codes.PARENT_KEYS_KEY] = encodedParentKeys;
            route.push(routeObj);
        }
        if (route.length > 0) {
            this.storeNavigationFormRoutes('insertFormRoute');
        }
        return route;
    };
    OServiceComponent.prototype.getItemModeRoute = function (item, modeRoute) {
        var result = this.getRouteOfSelectedRow(item);
        if (result.length > 0) {
            if (Util.isDefined(this.detailFormRoute)) {
                result.unshift(this.detailFormRoute);
            }
            if (modeRoute === 'editFormRoute') {
                result.push(this.editFormRoute || Codes.DEFAULT_EDIT_ROUTE);
            }
        }
        if (result.length > 0 && !this.oFormLayoutDialog) {
            this.storeNavigationFormRoutes(modeRoute, this.getQueryConfiguration());
        }
        return result;
    };
    OServiceComponent.prototype.getQueryConfiguration = function () {
        var result = {
            keysValues: this.getKeysValues()
        };
        if (this.pageable) {
            result = Object.assign({
                serviceType: this.serviceType,
                queryArguments: this.queryArguments,
                entity: this.entity,
                service: this.service,
                queryMethod: this.pageable ? this.paginatedQueryMethod : this.queryMethod,
                totalRecordsNumber: this.getTotalRecordsNumber(),
                queryRows: this.queryRows,
                queryRecordOffset: Math.max(this.state.queryRecordOffset - this.queryRows, 0)
            }, result);
        }
        return result;
    };
    OServiceComponent.prototype.getRouteOfSelectedRow = function (item) {
        var route = [];
        if (Util.isObject(item)) {
            this.keysArray.forEach(function (key) {
                if (Util.isDefined(item[key])) {
                    route.push(item[key]);
                }
            });
        }
        return route;
    };
    OServiceComponent.prototype.deleteLocalItems = function () {
        var selectedItems = this.getSelectedItems();
        for (var i = 0; i < selectedItems.length; ++i) {
            var selectedItem = selectedItems[i];
            var selectedItemKv = {};
            for (var k = 0; k < this.keysArray.length; ++k) {
                var key = this.keysArray[k];
                selectedItemKv[key] = selectedItem[key];
            }
            for (var j = this.dataArray.length - 1; j >= 0; --j) {
                var item = this.dataArray[j];
                var itemKv = {};
                for (var k = 0; k < this.keysArray.length; ++k) {
                    var key = this.keysArray[k];
                    itemKv[key] = item[key];
                }
                var found = false;
                for (var k in selectedItemKv) {
                    if (selectedItemKv.hasOwnProperty(k)) {
                        found = itemKv.hasOwnProperty(k) && (selectedItemKv[k] === itemKv[k]);
                    }
                }
                if (found) {
                    this.dataArray.splice(j, 1);
                    break;
                }
            }
        }
        this.clearSelection();
    };
    OServiceComponent.prototype.reinitialize = function (options) {
        if (options && Object.keys(options).length) {
            var clonedOpts = Object.assign({}, options);
            if (clonedOpts.hasOwnProperty('entity')) {
                this.entity = clonedOpts.entity;
                if (this.oattrFromEntity) {
                    this.oattr = undefined;
                }
                delete clonedOpts.entity;
            }
            for (var prop in clonedOpts) {
                if (clonedOpts.hasOwnProperty(prop)) {
                    this[prop] = clonedOpts[prop];
                }
            }
            this.destroy();
            this.initialize();
        }
    };
    OServiceComponent.prototype.setFilterBuilder = function (filterBuilder) {
        this.filterBuilder = filterBuilder;
    };
    OServiceComponent.prototype.getComponentFilter = function (existingFilter) {
        if (existingFilter === void 0) { existingFilter = {}; }
        var filter = _super.prototype.getComponentFilter.call(this, existingFilter);
        var quickFilterExpr = this.getQuickFilterExpression();
        var filterBuilderExpr = this.getFilterBuilderExpression();
        var complexExpr = quickFilterExpr || filterBuilderExpr;
        if (quickFilterExpr && filterBuilderExpr) {
            complexExpr = FilterExpressionUtils.buildComplexExpression(quickFilterExpr, filterBuilderExpr, FilterExpressionUtils.OP_AND);
        }
        if (complexExpr && !Util.isDefined(filter[FilterExpressionUtils.BASIC_EXPRESSION_KEY])) {
            filter[FilterExpressionUtils.BASIC_EXPRESSION_KEY] = complexExpr;
        }
        else if (complexExpr) {
            filter[FilterExpressionUtils.BASIC_EXPRESSION_KEY] =
                FilterExpressionUtils.buildComplexExpression(filter[FilterExpressionUtils.BASIC_EXPRESSION_KEY], complexExpr, FilterExpressionUtils.OP_AND);
        }
        return filter;
    };
    OServiceComponent.prototype.getQuickFilterExpression = function () {
        if (this.pageable && Util.isDefined(this.quickFilterComponent)) {
            return this.quickFilterComponent.filterExpression;
        }
        return undefined;
    };
    OServiceComponent.prototype.getFilterBuilderExpression = function () {
        if (Util.isDefined(this.filterBuilder)) {
            return this.filterBuilder.getExpression();
        }
        return undefined;
    };
    OServiceComponent.prototype.storeNavigationFormRoutes = function (activeMode, queryConf) {
        var mainFormLayoutComp = this.formLayoutManager ? Util.isDefined(this.formLayoutManager.isMainComponent(this)) : undefined;
        this.navigationService.storeFormRoutes({
            mainFormLayoutManagerComponent: mainFormLayoutComp,
            detailFormRoute: this.detailFormRoute,
            editFormRoute: this.editFormRoute,
            insertFormRoute: Util.isDefined(this.insertFormRoute) ? this.insertFormRoute : Codes.DEFAULT_INSERT_ROUTE
        }, activeMode, queryConf);
    };
    OServiceComponent.prototype.saveDataNavigationInLocalStorage = function () {
    };
    OServiceComponent.prototype.getKeysValues = function () {
        var data = this.dataArray;
        var self = this;
        return data.map(function (row) {
            var obj = {};
            self.keysArray.forEach(function (key) {
                if (row[key] !== undefined) {
                    obj[key] = row[key];
                }
            });
            return obj;
        });
    };
    OServiceComponent.prototype.getRouteKey = function () {
        var route = '';
        if (this.formLayoutManager && !this.formLayoutManager.isMainComponent(this)) {
            route = this.router.url;
            var params = this.formLayoutManager.getParams();
            if (params) {
                route += '/' + (Object.keys(params).join('/'));
            }
        }
        else {
            route = _super.prototype.getRouteKey.call(this);
        }
        return route;
    };
    Object.defineProperty(OServiceComponent.prototype, "elementRef", {
        get: function () {
            return this.elRef;
        },
        enumerable: true,
        configurable: true
    });
    OServiceComponent.prototype.initializeState = function () {
        var routeKey = _super.prototype.getRouteKey.call(this);
        if (this.formLayoutManager && this.formLayoutManager.isTabMode() && !this.formLayoutManager.isMainComponent(this)) {
            try {
                var params = this.formLayoutManager.oTabGroup.state.tabsData[0].params;
                if (params) {
                    routeKey = this.router.url;
                    routeKey += '/' + (Object.keys(params).join('/'));
                }
            }
            catch (e) {
            }
        }
        this.state = this.localStorageService.getComponentStorage(this, routeKey);
    };
    OServiceComponent.prototype.showCaseSensitiveCheckbox = function () {
        return !this.pageable;
    };
    OServiceComponent.prototype.registerQuickFilter = function (arg) {
        var _this = this;
        var quickFilter = arg;
        if (Util.isDefined(this.quickFilterComponent)) {
            return;
        }
        this.quickFilterComponent = quickFilter;
        if (Util.isDefined(this.quickFilterComponent)) {
            if (this.state.hasOwnProperty('filterValue')) {
                this.quickFilterComponent.setValue(this.state.filterValue);
            }
            if (this.state.hasOwnProperty('quickFilterActiveColumns')) {
                var parsedArr = Util.parseArray(this.state.quickFilterActiveColumns, true);
                this.quickFilterComponent.setActiveColumns(parsedArr);
            }
            this.quickFilterComponent.onSearch.subscribe(function (val) { return _this.filterData(val); });
        }
    };
    OServiceComponent.prototype.filterData = function (value, loadMore) {
    };
    OServiceComponent.prototype.isFilterCaseSensitive = function () {
        var useQuickFilterValue = Util.isDefined(this.quickFilterComponent) && this.showCaseSensitiveCheckbox();
        if (useQuickFilterValue) {
            return this.quickFilterComponent.filterCaseSensitive;
        }
        return this.filterCaseSensitive;
    };
    OServiceComponent.prototype.configureFilterValue = function (value) {
        var returnVal = value;
        if (value && value.length > 0) {
            if (!value.startsWith('*')) {
                returnVal = '*' + returnVal;
            }
            if (!value.endsWith('*')) {
                returnVal = returnVal + '*';
            }
        }
        return returnVal;
    };
    OServiceComponent.prototype.getQuickFilterValue = function () {
        var result = '';
        if (Util.isDefined(this.quickFilterComponent)) {
            return this.quickFilterComponent.getValue() || '';
        }
        return result;
    };
    OServiceComponent.prototype.getQuickFilterColumns = function () {
        var result = this.quickFilterColArray;
        if (Util.isDefined(this.quickFilterComponent)) {
            result = this.quickFilterComponent.getActiveColumns();
        }
        return result;
    };
    OServiceComponent.DEFAULT_INPUTS_O_SERVICE_COMPONENT = DEFAULT_INPUTS_O_SERVICE_COMPONENT;
    OServiceComponent.propDecorators = {
        searchInputComponent: [{ type: ViewChild, args: [(forwardRef(function () { return OSearchInputComponent; })),] }]
    };
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OServiceComponent.prototype, "ovisible", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OServiceComponent.prototype, "oenabled", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OServiceComponent.prototype, "controls", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OServiceComponent.prototype, "recursiveDetail", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OServiceComponent.prototype, "detailButtonInRow", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OServiceComponent.prototype, "recursiveEdit", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OServiceComponent.prototype, "editButtonInRow", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OServiceComponent.prototype, "insertButton", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OServiceComponent.prototype, "recursiveInsert", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OServiceComponent.prototype, "filterCaseSensitive", void 0);
    return OServiceComponent;
}(OServiceBaseComponent));
export { OServiceComponent };
//# sourceMappingURL=o-service-component.class.js.map