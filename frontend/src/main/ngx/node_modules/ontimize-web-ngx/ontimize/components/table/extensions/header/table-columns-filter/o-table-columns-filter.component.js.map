{"version":3,"file":"o-table-columns-filter.component.js","sourceRoot":"","sources":["../../../../../../../tmp/ontimize/components/table/extensions/header/table-columns-filter/o-table-columns-filter.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { ChangeDetectionStrategy, Component, Inject, Injector, OnInit, forwardRef } from '@angular/core';\nimport { Codes, Util } from '../../../../../utils';\nimport { OColumn, OTableComponent } from '../../../o-table.component';\nimport { InputConverter } from '../../../../../decorators';\n\nexport const DEFAULT_INPUTS_O_TABLE_COLUMN_FILTER = [\n  // columns [string]: columns that might be filtered, separated by ';'. Default: all visible columns.\n  'columns',\n  // preloadValues [true|false|yes|no]: indicates whether or not to show the list values when the filter dialog is opened. Default: true.\n  'preloadValues: preload-values',\n  //mode [default | selection |  custom]\n  'mode'\n];\n\nexport const DEFAULT_OUTPUTS_O_TABLE_COLUMN_FILTER = [\n];\n\nexport enum ColumnValueFilterOperator { IN, LESS_EQUAL, MORE_EQUAL, BETWEEN, EQUAL }\n\nexport interface IColumnValueFilter {\n  attr: string;\n  operator: ColumnValueFilterOperator;\n  values: any;\n}\n\nexport type OTableColumnsFilterMode = 'default' | 'selection' | 'custom';\n@Component({\n  moduleId: module.id,\n  selector: 'o-table-columns-filter',\n  template: ' ',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: DEFAULT_INPUTS_O_TABLE_COLUMN_FILTER,\n  outputs: DEFAULT_OUTPUTS_O_TABLE_COLUMN_FILTER\n})\n\nexport class OTableColumnsFilterComponent implements OnInit {\n\n  public static DEFAULT_INPUTS_O_TABLE_COLUMN_FILTER = DEFAULT_INPUTS_O_TABLE_COLUMN_FILTER;\n  public static DEFAULT_OUTPUTS_O_TABLE_COLUMN_FILTER = DEFAULT_OUTPUTS_O_TABLE_COLUMN_FILTER;\n\n  public static DEFAULT_COMPARISON_TYPE = 'VIEW';\n  public static MODEL_COMPARISON_TYPE = 'MODEL';\n  public static OTableColumnsFilterModes = ['default', 'selection', 'custom'];\n\n  protected _columns: string;\n  protected _mode: string = 'default';\n  @InputConverter()\n  preloadValues: boolean = true;\n\n  get mode(): string {\n    return this._mode;\n  }\n\n  @InputConverter()\n  set mode(val: string) {\n    let m = OTableColumnsFilterComponent.OTableColumnsFilterModes.find(e => e === val);\n    if (Util.isDefined(m)) {\n      this._mode = m;\n    } else {\n      console.error('Invalid `o-table-columns-filter` mode (' + val + ')');\n    }\n  }\n\n  protected _columnsArray: Array<string> = [];\n  protected columnsComparisonProperty: Object = {};\n\n  constructor(\n    protected injector: Injector,\n    @Inject(forwardRef(() => OTableComponent)) protected table: OTableComponent\n  ) { }\n\n  ngOnInit() {\n    if (this.columnsArray.length === 0) {\n      this.columnsArray = this.table.oTableOptions.visibleColumns;\n    }\n    const self = this;\n    this.columnsArray.forEach((colData, i, arr) => {\n      let colDef = colData.split(Codes.TYPE_SEPARATOR);\n      let colName = colDef[0];\n      let compType = (colDef[1] || '').toUpperCase();\n      if ([OTableColumnsFilterComponent.DEFAULT_COMPARISON_TYPE, OTableColumnsFilterComponent.MODEL_COMPARISON_TYPE].indexOf(compType) === -1) {\n        compType = OTableColumnsFilterComponent.DEFAULT_COMPARISON_TYPE;\n      }\n      arr[i] = colName;\n      self.columnsComparisonProperty[colName] = compType;\n    });\n    this.table.setOTableColumnsFilter(this);\n  }\n\n  isColumnFilterable(attr: string) {\n    return (this.columnsArray.indexOf(attr) !== -1);\n  }\n\n  getColumnComparisonValue(column: OColumn, val: any): any {\n    if (!column || this.columnsComparisonProperty[column.attr] === OTableColumnsFilterComponent.MODEL_COMPARISON_TYPE) {\n      return val;\n    } else {\n      return column.renderer ? column.renderer.getCellData(val) : val;\n    }\n  }\n\n  set columns(arg: string) {\n    this._columns = arg;\n    this._columnsArray = Util.parseArray(this._columns, true);\n  }\n\n  set columnsArray(arg: string[]) {\n    this._columnsArray = arg;\n  }\n\n  get columnsArray(): string[] {\n    return this._columnsArray;\n  }\n\n}\n"]}