var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { ChangeDetectorRef, ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Injector, NgModule, ViewEncapsulation } from '@angular/core';
import { CommonModule } from '@angular/common';
import { trigger, state, style, transition, animate } from '@angular/animations';
import { Util } from '../../../utils';
import { OSharedModule } from '../../../shared';
import { InputConverter } from '../../../decorators';
import { PermissionsUtils } from '../../../util/permissions';
import { OAppSidenavComponent } from '../o-app-sidenav.component';
import { AppMenuService, OTranslateService, PermissionsService } from '../../../services';
import { OAppSidenavMenuItemModule } from '../menu-item/o-app-sidenav-menu-item.component';
export var DEFAULT_INPUTS_O_APP_SIDENAV_MENU_GROUP = [
    'menuGroup : menu-group',
    'sidenavOpened : sidenav-opened'
];
export var DEFAULT_OUTPUTS_O_APP_SIDENAV_MENU_GROUP = [
    'onItemClick'
];
var OAppSidenavMenuGroupComponent = (function () {
    function OAppSidenavMenuGroupComponent(injector, elRef, cd) {
        this.injector = injector;
        this.elRef = elRef;
        this.cd = cd;
        this.onItemClick = new EventEmitter();
        this.sidenavOpened = true;
        this.translateService = this.injector.get(OTranslateService);
        this.appMenuService = this.injector.get(AppMenuService);
        this.permissionsService = this.injector.get(PermissionsService);
        this.sidenav = this.injector.get(OAppSidenavComponent);
    }
    OAppSidenavMenuGroupComponent.prototype.ngOnInit = function () {
        this.parsePermissions();
    };
    OAppSidenavMenuGroupComponent.prototype.ngAfterViewInit = function () {
        if (this.menuGroup.id === 'user-info') {
            var self_1 = this;
            this.sidenavSubscription = this.sidenav.sidenav.openedChange.subscribe(function (opened) {
                self_1.disabled = !!(!opened || (self_1.permissions && self_1.permissions.enabled === false));
                self_1.updateContentExpansion();
                self_1.cd.markForCheck();
            });
        }
        this.updateContentExpansion();
    };
    OAppSidenavMenuGroupComponent.prototype.ngOnDestroy = function () {
        if (this.sidenavSubscription) {
            this.sidenavSubscription.unsubscribe();
        }
    };
    OAppSidenavMenuGroupComponent.prototype.parsePermissions = function () {
        this.permissions = this.permissionsService.getMenuPermissions(this.menuGroup.id);
        if (!Util.isDefined(this.permissions)) {
            return;
        }
        this.hidden = this.permissions.visible === false;
        this.disabled = this.permissions.enabled === false;
        if (this.disabled) {
            this.mutationObserver = PermissionsUtils.registerDisabledChangesInDom(this.elRef.nativeElement, {
                checkStringValue: true
            });
        }
    };
    OAppSidenavMenuGroupComponent.prototype.onClick = function () {
        if (this.disabled) {
            return;
        }
        this.menuGroup.opened = !this.menuGroup.opened;
        this.updateContentExpansion();
    };
    OAppSidenavMenuGroupComponent.prototype.updateContentExpansion = function () {
        var isOpened = this.menuGroup && this.menuGroup.opened;
        if (this.menuGroup.id === 'user-info') {
            isOpened = (this.sidenav && this.sidenav.sidenav.opened) && isOpened;
        }
        this.contentExpansion = isOpened ? 'expanded' : 'collapsed';
    };
    Object.defineProperty(OAppSidenavMenuGroupComponent.prototype, "contentExpansion", {
        get: function () {
            return this._contentExpansion;
        },
        set: function (val) {
            this._contentExpansion = val;
            this.cd.detectChanges();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OAppSidenavMenuGroupComponent.prototype, "tooltip", {
        get: function () {
            var result = this.translateService.get(this.menuGroup.name);
            if (Util.isDefined(this.menuGroup.tooltip)) {
                result += ': ' + this.translateService.get(this.menuGroup.tooltip);
            }
            return result;
        },
        enumerable: true,
        configurable: true
    });
    OAppSidenavMenuGroupComponent.prototype.onMenuItemClick = function (e) {
        this.onItemClick.emit(e);
    };
    OAppSidenavMenuGroupComponent.prototype.getClass = function () {
        var className = 'o-app-sidenav-menu-group';
        if (this.menuGroup.class) {
            className += ' ' + this.menuGroup.class;
        }
        return className;
    };
    OAppSidenavMenuGroupComponent.DEFAULT_INPUTS_O_APP_SIDENAV_MENU_GROUP = DEFAULT_INPUTS_O_APP_SIDENAV_MENU_GROUP;
    OAppSidenavMenuGroupComponent.DEFAULT_OUTPUTS_O_APP_SIDENAV_MENU_GROUP = DEFAULT_OUTPUTS_O_APP_SIDENAV_MENU_GROUP;
    OAppSidenavMenuGroupComponent.decorators = [
        { type: Component, args: [{
                    moduleId: module.id,
                    selector: 'o-app-sidenav-menu-group',
                    inputs: DEFAULT_INPUTS_O_APP_SIDENAV_MENU_GROUP,
                    outputs: DEFAULT_OUTPUTS_O_APP_SIDENAV_MENU_GROUP,
                    template: "\n    <ng-container *ngIf=\"!hidden\">\n      <button type=\"button\" mat-button class=\"o-app-sidenav-item o-app-sidenav-menugroup\" [class.active]=\"menuGroup.opened\"\n        fxLayout=\"column\" (click)=\"onClick()\">\n        <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxFill>\n          <ng-container *ngIf=\"sidenavOpened\">\n            <mat-icon *ngIf=\"menuGroup.icon\">{{ menuGroup.icon }}</mat-icon>\n            <h3>{{ menuGroup.name | oTranslate }}</h3>\n            <span class=\"fill-remaining\"></span>\n            <mat-icon class=\"o-app-sidenav-menugroup-arrow\" svgIcon=\"ontimize:keyboard_arrow_right\"></mat-icon>\n          </ng-container>\n          <ng-container *ngIf=\"!sidenavOpened\">\n            <mat-icon [matTooltip]=\"tooltip\" matTooltipClass=\"menugroup-tooltip\" matTooltipPosition=\"right\" *ngIf=\"menuGroup.icon\">{{\n              menuGroup.icon }}</mat-icon>\n          </ng-container>\n        </div>\n      </button>\n\n      <div class=\"o-app-sidenav-menugroup-items-container\">\n        <ul [@contentExpansion]=\"contentExpansion\" class=\"o-app-sidenav-menugroup-ul\">\n          <ng-container *ngFor=\"let menuItem of menuGroup.items\">\n            <o-app-sidenav-menu-item [sidenav-opened]=\"sidenavOpened\" [disabled]=\"disabled\" [menu-item]=\"menuItem\"\n              [menu-item-type]=\"appMenuService.getMenuItemType(menuItem)\" (onClick)=\"onMenuItemClick($event)\">\n            </o-app-sidenav-menu-item>\n          </ng-container>\n        </ul>\n      </div>\n    </ng-container>\n  ",
                    styles: ["\n    .o-app-sidenav-menu-group .o-app-sidenav-menugroup{width:100%}.o-app-sidenav-menu-group[disabled=true] .o-app-sidenav-menugroup{cursor:default}.o-app-sidenav-menu-group .mat-tooltip.menugroup-tooltip{margin-left:28px}\n  "],
                    encapsulation: ViewEncapsulation.None,
                    animations: [
                        trigger('contentExpansion', [
                            state('collapsed', style({ height: '0px' })),
                            state('expanded', style({ height: '*' })),
                            transition('collapsed => expanded', animate('200ms ease-in')),
                            transition('expanded => collapsed', animate('200ms ease-out'))
                        ])
                    ],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: {
                        '[class]': 'getClass()',
                        '[attr.disabled]': 'disabled'
                    }
                },] },
    ];
    OAppSidenavMenuGroupComponent.ctorParameters = function () { return [
        { type: Injector },
        { type: ElementRef },
        { type: ChangeDetectorRef }
    ]; };
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OAppSidenavMenuGroupComponent.prototype, "sidenavOpened", void 0);
    return OAppSidenavMenuGroupComponent;
}());
export { OAppSidenavMenuGroupComponent };
var OAppSidenavMenuGroupModule = (function () {
    function OAppSidenavMenuGroupModule() {
    }
    OAppSidenavMenuGroupModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, OAppSidenavMenuItemModule, OSharedModule],
                    declarations: [OAppSidenavMenuGroupComponent],
                    exports: [OAppSidenavMenuGroupComponent]
                },] },
    ];
    return OAppSidenavMenuGroupModule;
}());
export { OAppSidenavMenuGroupModule };
//# sourceMappingURL=o-app-sidenav-menu-group.component.js.map