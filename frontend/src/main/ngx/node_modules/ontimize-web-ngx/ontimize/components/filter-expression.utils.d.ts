export interface IExpression {
    lop: string | IExpression;
    op: string;
    rop?: string | any[] | IExpression;
}
export interface IBasicExpression {
    '@basic_expression': IExpression;
}
export interface IFilterExpression {
    '@filter_expression': IExpression;
}
export declare class FilterExpressionUtils {
    static BASIC_EXPRESSION_KEY: string;
    static FILTER_EXPRESSION_KEY: string;
    static OP_OR: string;
    static OP_AND: string;
    static OP_LIKE: string;
    static OP_NOT_LIKE: string;
    static OP_EQUAL: string;
    static OP_NOT_EQUAL: string;
    static OP_NULL: string;
    static OP_NOT_NULL: string;
    static OP_LESS: string;
    static OP_LESS_EQUAL: string;
    static OP_MORE: string;
    static OP_MORE_EQUAL: string;
    static OP_IN: string;
    static instanceofBasicExpression(arg: any): boolean;
    static buildBasicExpression(exp: IExpression): IBasicExpression;
    static instanceofFilterExpression(exp: any): boolean;
    static buildFilterExpression(exp: IExpression): IFilterExpression;
    static instanceofExpression(exp: any): boolean;
    static buildComplexExpression(expr1: IExpression, expr2: IExpression, op: string): IExpression;
    static buildExpressionEquals(key: string, value: any): IExpression;
    static buildExpressionIsNotNull(key: string): IExpression;
    static buildExpressionIsNull(key: string): IExpression;
    static buildExpressionLess(key: string, value: any): IExpression;
    static buildExpressionLessEqual(key: string, value: any): IExpression;
    static buildExpressionMore(key: string, value: any): IExpression;
    static buildExpressionMoreEqual(key: string, value: any): IExpression;
    static buildExpressionIn(key: string, values: any[]): IExpression;
    static buildExpressionNotLike(key: string, value: string): IExpression;
    static buildExpressionLike(key: string, value: string): IExpression;
    static buildExpressionLikeEnd(key: string, value: string): IExpression;
    static buildExpressionLikeStart(key: string, value: string): IExpression;
    static buildExpressionNotEquals(key: string, value: any): IExpression;
    static buildExpressionNullAndValue(key: string, value: any, op: string): IExpression;
    static buildArrayExpressionLike(keys: any[], value: any): IExpression;
    static buildExpressionFromObject(obj: any): IExpression;
    private static stackExpressionLikeOR;
    private static stackExpressionEqualsAND;
}
