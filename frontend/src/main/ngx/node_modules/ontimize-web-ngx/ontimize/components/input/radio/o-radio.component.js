var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, ElementRef, forwardRef, Inject, Injector, NgModule, Optional, ViewEncapsulation } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Util } from '../../../util/util';
import { OFormComponent } from '../../form/form-components';
import { OSharedModule } from '../../../shared/shared.module';
import { InputConverter } from '../../../decorators/input-converter';
import { OntimizeService } from '../../../services/ontimize.service';
import { OFormServiceComponent } from '../o-form-service-component.class';
import { dataServiceFactory } from '../../../services/data-service.provider';
import { OValueChangeEvent } from '../../o-form-data-component.class';
export var DEFAULT_INPUTS_O_RADIO = OFormServiceComponent.DEFAULT_INPUTS_O_FORM_SERVICE_COMPONENT.concat([
    'translate',
    'layout',
    'labelPosition: label-position'
]);
export var DEFAULT_OUTPUTS_O_RADIO = OFormServiceComponent.DEFAULT_OUTPUTS_O_FORM_SERVICE_COMPONENT.slice();
var ɵ0 = dataServiceFactory;
var ORadioComponent = (function (_super) {
    __extends(ORadioComponent, _super);
    function ORadioComponent(form, elRef, injector) {
        var _this = _super.call(this, form, elRef, injector) || this;
        _this.translate = false;
        _this.layout = 'column';
        _this.labelPosition = 'after';
        return _this;
    }
    ORadioComponent.prototype.ngAfterViewInit = function () {
        _super.prototype.ngAfterViewInit.call(this);
        if (this.queryOnInit) {
            this.queryData();
        }
    };
    ORadioComponent.prototype.onMatRadioGroupChange = function (e) {
        var newValue = e.value;
        this.setValue(newValue, {
            changeType: OValueChangeEvent.USER_CHANGE,
            emitEvent: false,
            emitModelToViewChange: false
        });
    };
    ORadioComponent.prototype.getOptionDescriptionValue = function (item) {
        if (item === void 0) { item = {}; }
        var descTxt = '';
        if (this.descriptionColArray && this.descriptionColArray.length > 0) {
            var self = this;
            this.descriptionColArray.forEach(function (col, index) {
                var txt = item[col];
                if (txt) {
                    if (self.translate && self.translateService) {
                        txt = self.translateService.get(txt);
                    }
                    descTxt += txt;
                }
                if (index < self.descriptionColArray.length - 1) {
                    descTxt += self.separator;
                }
            });
        }
        return descTxt;
    };
    ORadioComponent.prototype.getValueColumn = function (item) {
        if (item && item.hasOwnProperty(this.valueColumn)) {
            var option = item[this.valueColumn];
            if (option === 'undefined') {
                option = null;
            }
            return option;
        }
        return void 0;
    };
    ORadioComponent.prototype.getDescriptionValue = function () {
        var _this = this;
        if (Util.isDefined(this.descriptionColArray) && this.descriptionColArray.length) {
            var currItem_1 = this.dataArray.find(function (e) { return e[_this.valueColumn] === _this.getValue(); });
            if (Util.isDefined(currItem_1)) {
                return this.descriptionColArray.map(function (col) { return (_this.translate && _this.translateService) ? _this.translateService.get(currItem_1[col]) : currItem_1[col]; }).join(this.separator);
            }
        }
        return '';
    };
    ORadioComponent.DEFAULT_INPUTS_O_RADIO = DEFAULT_INPUTS_O_RADIO;
    ORadioComponent.DEFAULT_OUTPUTS_O_RADIO = DEFAULT_OUTPUTS_O_RADIO;
    ORadioComponent.decorators = [
        { type: Component, args: [{
                    selector: 'o-radio',
                    template: "\n    <div [formGroup]=\"getFormGroup()\" [matTooltip]=\"tooltip\" [matTooltipClass]=\"tooltipClass\"\n      [matTooltipPosition]=\"tooltipPosition\" [matTooltipShowDelay]=\"tooltipShowDelay\"\n      [matTooltipHideDelay]=\"tooltipHideDelay\" class=\"relative\">\n      <!-- mat-form-field and hidden input are used only for displaying component label and errors as mat-radio is not supported inside form-field -->\n      <!-- https://github.com/angular/material2/issues/7891 -->\n      <mat-form-field [appearance]=\"appearance\" [floatLabel]=\"floatLabel\" [hideRequiredMarker]=\"hideRequiredMarker\"\n        [class.read-only]=\"isReadOnly\" [class.custom-width]=\"hasCustomWidth\" [class.o-radio-from-field-row]=\"layout==='row'\"\n        floatLabel=\"always\" class=\"mat-form-field--no-underline\" fxFill>\n        <mat-label *ngIf=\"labelVisible\">{{ olabel | oTranslate }}</mat-label>\n        <input matInput [id]=\"getAttribute()\" [formControlName]=\"getAttribute()\" [placeholder]=\"placeHolder\"\n          [required]=\"isRequired\" style=\"display: none\" />\n        <mat-radio-group [id]=\"getAttribute()\" [formControlName]=\"getAttribute()\" [name]=\"getAttribute()\"\n          [value]=\"getValue()\" [required]=\"isRequired\" [labelPosition]=\"labelPosition\"\n          (change)=\"onMatRadioGroupChange($event)\" [fxLayout]=\"layout\" fxLayoutGap=\"8px\">\n          <mat-radio-button *ngFor=\"let item of getDataArray()\" [value]=\"getValueColumn(item)\" [disabled]=\"!enabled\">\n            {{ getOptionDescriptionValue(item) }}\n          </mat-radio-button>\n        </mat-radio-group>\n        <mat-error *ngIf=\"hasError('required')\" text=\"{{ 'FORM_VALIDATION.REQUIRED' | oTranslate }}\"></mat-error>\n        <mat-error *ngFor=\"let oError of getActiveOErrors()\" text=\"{{ oError.text | oTranslate }}\"></mat-error>\n      </mat-form-field>\n      <div *ngIf=\"isReadOnly\" (click)=\"$event.stopPropagation()\" class=\"read-only-blocker\" fxFill></div>\n    </div>\n  ",
                    styles: ["\n    .o-radio .mat-form-field--no-underline .mat-form-field-underline,.o-radio .mat-form-field--no-underline .mat-form-field-underline .mat-form-field-ripple{background-image:none;background-color:transparent}.o-radio .mat-form-field:not(.custom-width).o-radio-from-field-row .mat-form-field-infix{width:auto}.o-radio .read-only-blocker{z-index:2;position:absolute;top:0;left:0;right:0}\n  "],
                    inputs: DEFAULT_INPUTS_O_RADIO,
                    outputs: DEFAULT_OUTPUTS_O_RADIO,
                    providers: [
                        { provide: OntimizeService, useFactory: ɵ0, deps: [Injector] }
                    ],
                    encapsulation: ViewEncapsulation.None,
                    host: {
                        '[class.o-radio]': 'true'
                    }
                },] },
    ];
    ORadioComponent.ctorParameters = function () { return [
        { type: OFormComponent, decorators: [{ type: Optional }, { type: Inject, args: [forwardRef(function () { return OFormComponent; }),] }] },
        { type: ElementRef },
        { type: Injector }
    ]; };
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], ORadioComponent.prototype, "translate", void 0);
    return ORadioComponent;
}(OFormServiceComponent));
export { ORadioComponent };
var ORadioModule = (function () {
    function ORadioModule() {
    }
    ORadioModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [ORadioComponent],
                    imports: [CommonModule, OSharedModule],
                    exports: [ORadioComponent]
                },] },
    ];
    return ORadioModule;
}());
export { ORadioModule };
export { ɵ0 };
//# sourceMappingURL=o-radio.component.js.map