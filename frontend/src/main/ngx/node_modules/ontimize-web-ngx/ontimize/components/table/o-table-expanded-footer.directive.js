import { Directive, ElementRef, Inject, Renderer2, forwardRef } from '@angular/core';
import { Injector } from '@angular/core';
import { OTableComponent } from './table-components';
import { OTranslateService } from '../../services';
var OTableExpandedFooter = (function () {
    function OTableExpandedFooter(table, element, renderer, injector) {
        this.table = table;
        this.element = element;
        this.renderer = renderer;
        this.injector = injector;
        this.translateService = this.injector.get(OTranslateService);
    }
    OTableExpandedFooter.prototype.ngAfterViewInit = function () {
        if (this.element.nativeElement.childNodes[2]) {
            this.tableBody = this.element.nativeElement.childNodes[1];
            this.tableHeader = this.element.nativeElement.childNodes[0];
        }
        this.registerContentChange();
    };
    OTableExpandedFooter.prototype.registerContentChange = function () {
        var tr = this.renderer.createElement('tr');
        this.tdTableWithMessage = this.renderer.createElement('td');
        this.renderer.addClass(tr, 'o-table-no-results');
        tr.appendChild(this.tdTableWithMessage);
        this.renderer.appendChild(this.tableBody, tr);
        var self = this;
        this.onContentChangeSubscription = this.table.onContentChange.subscribe(function (data) {
            self.updateMessageNotResults(data);
        });
    };
    OTableExpandedFooter.prototype.updateMessageNotResults = function (data) {
        if (this.spanMessageNotResults) {
            this.renderer.removeChild(this.element.nativeElement, this.spanMessageNotResults);
        }
        if (data.length === 0) {
            var result = '';
            result = this.translateService.get('TABLE.EMPTY');
            if (this.table.quickFilter && this.table.oTableQuickFilterComponent &&
                this.table.oTableQuickFilterComponent.value && this.table.oTableQuickFilterComponent.value.length > 0) {
                result += this.translateService.get('TABLE.EMPTY_USING_FILTER', [(this.table.oTableQuickFilterComponent.value)]);
                this.spanMessageNotResults = this.renderer.createElement('span');
                var messageNotResults = this.renderer.createText(result);
                this.tdTableWithMessage.setAttribute('colspan', this.tableHeader.querySelectorAll('th').length);
                this.renderer.appendChild(this.spanMessageNotResults, messageNotResults);
                this.renderer.appendChild(this.tdTableWithMessage, this.spanMessageNotResults);
            }
        }
    };
    OTableExpandedFooter.prototype.destroy = function () {
        if (this.onContentChangeSubscription) {
            this.onContentChangeSubscription.unsubscribe();
        }
    };
    OTableExpandedFooter.decorators = [
        { type: Directive, args: [{
                    selector: '[oTableExpandedFooter]'
                },] },
    ];
    OTableExpandedFooter.ctorParameters = function () { return [
        { type: OTableComponent, decorators: [{ type: Inject, args: [forwardRef(function () { return OTableComponent; }),] }] },
        { type: ElementRef },
        { type: Renderer2 },
        { type: Injector }
    ]; };
    return OTableExpandedFooter;
}());
export { OTableExpandedFooter };
//# sourceMappingURL=o-table-expanded-footer.directive.js.map