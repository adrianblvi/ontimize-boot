import { Overlay, ScrollStrategyOptions } from '@angular/cdk/overlay';
import { ComponentPortal } from '@angular/cdk/portal';
import { Injectable } from '@angular/core';
import { Subject, Subscription } from 'rxjs';
import { OContextMenuContentComponent } from './context-menu/o-context-menu-content.component';
var OContextMenuService = (function () {
    function OContextMenuService(overlay, scrollStrategy) {
        var _this = this;
        this.overlay = overlay;
        this.scrollStrategy = scrollStrategy;
        this.showContextMenu = new Subject();
        this.closeContextMenu = new Subject();
        this.overlays = [];
        this.fakeElement = {
            getBoundingClientRect: function () { return ({
                bottom: 0,
                height: 0,
                left: 0,
                right: 0,
                top: 0,
                width: 0,
            }); }
        };
        this.subscription = new Subscription();
        this.subscription.add(this.closeContextMenu.subscribe(function () { return _this.destroyOverlays(); }));
    }
    OContextMenuService.prototype.ngOnDestroy = function () {
        this.subscription.unsubscribe();
    };
    OContextMenuService.prototype.openContextMenu = function (context) {
        this.destroyOverlays();
        this.createOverlay(context);
    };
    OContextMenuService.prototype.destroyOverlays = function () {
        if (this.overlays) {
            this.overlays.forEach(function (overlay, index) {
                overlay.detach();
                overlay.dispose();
            });
        }
        this.overlays = [];
        if (this.activeMenu) {
            this.activeMenu.close();
        }
    };
    OContextMenuService.prototype.createOverlay = function (context) {
        context.event.preventDefault();
        context.event.stopPropagation();
        this.fakeElement.getBoundingClientRect = function () { return ({
            bottom: context.event.clientY,
            height: 0,
            left: context.event.clientX,
            right: context.event.clientX,
            top: context.event.clientY,
            width: 0,
        }); };
        var positionStrategy = this.overlay.position()
            .flexibleConnectedTo(context.anchorElement || this.fakeElement)
            .withPositions([{
                overlayX: 'start',
                overlayY: 'top',
                originX: 'start',
                originY: 'bottom'
            }]);
        var overlayRef = this.overlay.create({
            positionStrategy: positionStrategy,
            hasBackdrop: false,
            panelClass: ['o-context-menu'],
            scrollStrategy: this.scrollStrategy.close()
        });
        this.overlays = [overlayRef];
        this.attachContextMenu(this.overlays[0], context);
    };
    OContextMenuService.prototype.attachContextMenu = function (overlay, context) {
        var contextMenuContent = overlay.attach(new ComponentPortal(OContextMenuContentComponent));
        contextMenuContent.instance.overlay = overlay;
        contextMenuContent.instance.menuItems = context.menuItems;
        contextMenuContent.instance.data = context.data;
        contextMenuContent.instance.menuClass = context.class;
    };
    OContextMenuService.decorators = [
        { type: Injectable },
    ];
    OContextMenuService.ctorParameters = function () { return [
        { type: Overlay },
        { type: ScrollStrategyOptions }
    ]; };
    return OContextMenuService;
}());
export { OContextMenuService };
//# sourceMappingURL=o-context-menu.service.js.map