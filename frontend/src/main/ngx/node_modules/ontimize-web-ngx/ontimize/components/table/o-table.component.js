var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { ObserversModule } from '@angular/cdk/observers';
import { CdkTableModule } from '@angular/cdk/table';
import { CommonModule } from '@angular/common';
import { ChangeDetectionStrategy, Component, ContentChildren, ElementRef, EventEmitter, forwardRef, HostListener, Inject, Injector, NgModule, Optional, QueryList, ViewChild, ViewChildren, ViewEncapsulation } from '@angular/core';
import { MatDialog, MatPaginator, MatPaginatorIntl, MatTab, MatTabGroup } from '@angular/material';
import { DndModule } from '@churchs19/ng2-dnd';
import { NgxMaterialTimepickerModule } from 'ngx-material-timepicker';
import { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';
import { BooleanConverter, InputConverter } from '../../decorators/input-converter';
import { OntimizeService, SnackBarService } from '../../services';
import { dataServiceFactory } from '../../services/data-service.provider';
import { OSharedModule } from '../../shared';
import { PermissionsUtils } from '../../util/permissions';
import { Codes, ObservableWrapper, SQLTypes, Util } from '../../utils';
import { OContextMenuModule } from '../contextmenu/o-context-menu.module';
import { FilterExpressionUtils } from '../filter-expression.utils';
import { OFormComponent } from '../form/o-form.component';
import { OServiceComponent } from '../o-service-component.class';
import { ServiceUtils } from '../service.utils';
import { OTableColumnCalculatedComponent } from './column/calculated/o-table-column-calculated.component';
import { OTableCellEditorBooleanComponent, O_TABLE_CELL_EDITORS } from './column/cell-editor/cell-editor';
import { O_TABLE_CELL_RENDERERS } from './column/cell-renderer/cell-renderer';
import { OTableColumnComponent } from './column/o-table-column.component';
import { OTableContextMenuComponent } from './extensions/contextmenu/o-table-context-menu.component';
import { OTableFilterByColumnDataDialogComponent, O_TABLE_DIALOGS } from './extensions/dialog/o-table-dialog-components';
import { OTableColumnAggregateComponent, OTableMatPaginatorIntl, OTablePaginatorComponent, O_TABLE_FOOTER_COMPONENTS } from './extensions/footer/o-table-footer-components';
import { ColumnValueFilterOperator, OTableButtonComponent, OTableButtonsComponent, OTableMenuComponent, OTableOptionComponent, O_TABLE_HEADER_COMPONENTS } from './extensions/header/o-table-header-components';
import { OTableStorage } from './extensions/o-table-storage.class';
import { OTableRowDirective } from './extensions/row/o-table-row.directive';
import { OMatSort } from './extensions/sort/o-mat-sort';
import { OMatSortHeader } from './extensions/sort/o-mat-sort-header';
import { OMatSortModule } from './extensions/sort/o-mat-sort-module';
import { OTableExpandedFooter } from './o-table-expanded-footer.directive';
import { OTableDao } from './o-table.dao';
import { OTableDataSource } from './o-table.datasource';
export var NAME_COLUMN_SELECT = 'select';
export var DEFAULT_INPUTS_O_TABLE = OServiceComponent.DEFAULT_INPUTS_O_SERVICE_COMPONENT.concat([
    'visibleColumns: visible-columns',
    'sortColumns: sort-columns',
    'quickFilterCallback: quick-filter-function',
    'deleteButton: delete-button',
    'refreshButton: refresh-button',
    'columnsVisibilityButton: columns-visibility-button',
    'exportButton: export-button',
    'showButtonsText: show-buttons-text',
    'selectAllCheckbox: select-all-checkbox',
    'paginationControls: pagination-controls',
    'fixedHeader: fixed-header',
    'showTitle: show-title',
    'editionMode: edition-mode',
    'selectionMode: selection-mode',
    'horizontalScroll: horizontal-scroll',
    'showPaginatorFirstLastButtons: show-paginator-first-last-buttons',
    'autoAlignTitles: auto-align-titles',
    'multipleSort: multiple-sort',
    'selectAllCheckboxVisible: select-all-checkbox-visible',
    'orderable',
    'resizable',
    'enabled',
    'keepSelectedItems: keep-selected-items',
    'exportMode: export-mode'
]);
export var DEFAULT_OUTPUTS_O_TABLE = [
    'onClick',
    'onDoubleClick',
    'onRowSelected',
    'onRowDeselected',
    'onRowDeleted',
    'onDataLoaded',
    'onPaginatedDataLoaded'
];
var OColumn = (function () {
    function OColumn(attr, table, column) {
        if (attr === void 0) { attr = undefined; }
        if (table === void 0) { table = undefined; }
        if (column === void 0) { column = undefined; }
        this.multilineSubject = new BehaviorSubject(this.multiline);
        this.isMultiline = this.multilineSubject.asObservable();
        this.attr = attr;
        if (Util.isDefined(table)) {
            this.setDefaultProperties(table);
        }
        if (Util.isDefined(column)) {
            this.setColumnProperties(column);
        }
    }
    OColumn.prototype.setDefaultProperties = function (table) {
        this.type = 'string';
        this.className = 'o-column-' + (this.type) + ' ';
        this.orderable = table.orderable;
        this.resizable = table.resizable;
        this.searchable = true;
        this.searching = true;
        this.name = this.attr;
        this.title = this.attr;
        this.multiline = false;
    };
    OColumn.prototype.setColumnProperties = function (column) {
        this.title = Util.isDefined(column.title) ? column.title : column.attr;
        this.definition = column;
        this.multiline = column.multiline;
        if (Util.isDefined(column.minWidth)) {
            this.minWidth = column.minWidth;
        }
        if (Util.isDefined(column.maxWidth)) {
            this.maxWidth = column.maxWidth;
        }
        if (Util.isDefined(column.orderable)) {
            this.orderable = column.orderable;
        }
        if (Util.isDefined(column.resizable)) {
            this.resizable = column.resizable;
        }
        if (Util.isDefined(column.searchable)) {
            this.searchable = column.searchable;
        }
        if (Util.isDefined(column.renderer)) {
            this.renderer = column.renderer;
        }
        if (Util.isDefined(column.editor)) {
            this.editor = column.editor;
        }
        if (Util.isDefined(column.type)) {
            this.type = column.type;
            this.className = 'o-column-' + (this.type) + ' ';
        }
        if (Util.isDefined(column.getSQLType)) {
            this.sqlType = column.getSQLType();
        }
        if (Util.isDefined(column.class)) {
            this.className = Util.isDefined(this.className) ? (this.className + ' ' + column.class) : column.class;
        }
        if (column instanceof OTableColumnCalculatedComponent) {
            if (Util.isDefined(column.operation) || Util.isDefined(column.functionOperation)) {
                this.calculate = column.operation ? column.operation : column.functionOperation;
            }
        }
        if (Util.isDefined(column.tooltip) && column.tooltip) {
            this.tooltip = {
                value: column.tooltipValue,
                function: column.tooltipFunction
            };
        }
    };
    Object.defineProperty(OColumn.prototype, "searchable", {
        get: function () {
            return this._searchable;
        },
        set: function (val) {
            this._searchable = val;
            this.searching = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OColumn.prototype, "multiline", {
        get: function () {
            return this._multiline;
        },
        set: function (val) {
            val = Util.parseBoolean(String(val));
            this._multiline = val;
            this.multilineSubject.next(this._multiline);
        },
        enumerable: true,
        configurable: true
    });
    OColumn.prototype.hasTooltip = function () {
        return Util.isDefined(this.tooltip);
    };
    OColumn.prototype.getTooltip = function (rowData) {
        if (!this.hasTooltip()) {
            return undefined;
        }
        var tooltip;
        if (Util.isDefined(this.tooltip.value)) {
            tooltip = this.tooltip.value;
        }
        else if (Util.isDefined(this.tooltip.function)) {
            try {
                tooltip = this.tooltip.function(rowData);
            }
            catch (e) {
                console.warn('o-table-column tooltip-function didnt worked');
            }
        }
        else {
            tooltip = Util.isDefined(this.renderer) ? this.renderer.getTooltip(rowData[this.name], rowData) : rowData[this.name];
        }
        return tooltip;
    };
    OColumn.prototype.getMinWidth = function () {
        if (Util.isDefined(this.width)) {
            return this.width;
        }
        return this.minWidth;
    };
    OColumn.prototype.getMinWidthValue = function () {
        return Util.extractPixelsValue(this.minWidth, OTableComponent.DEFAULT_COLUMN_MIN_WIDTH);
    };
    OColumn.prototype.getMaxWidthValue = function () {
        var value = Util.extractPixelsValue(this.maxWidth);
        return value ? value : undefined;
    };
    OColumn.prototype.getRenderWidth = function () {
        if (Util.isDefined(this.width)) {
            return this.width;
        }
        var minValue = Util.extractPixelsValue(this.minWidth, OTableComponent.DEFAULT_COLUMN_MIN_WIDTH);
        if (Util.isDefined(minValue) && this.DOMWidth < minValue) {
            this.DOMWidth = minValue;
        }
        if (Util.isDefined(this.maxWidth)) {
            var maxValue = Util.extractPixelsValue(this.maxWidth);
            if (Util.isDefined(maxValue) && this.DOMWidth > maxValue) {
                this.DOMWidth = maxValue;
            }
        }
        return Util.isDefined(this.DOMWidth) ? (this.DOMWidth + 'px') : undefined;
    };
    Object.defineProperty(OColumn.prototype, "width", {
        get: function () {
            return this._width;
        },
        set: function (val) {
            var widthVal = val;
            var pxVal = Util.extractPixelsValue(val);
            if (Util.isDefined(pxVal)) {
                this.DOMWidth = pxVal;
                widthVal = undefined;
            }
            this._width = widthVal;
        },
        enumerable: true,
        configurable: true
    });
    OColumn.prototype.getWidthToStore = function () {
        return this._width || this.DOMWidth;
    };
    OColumn.prototype.setWidth = function (val) {
        this.width = val + 'px';
        this.DOMWidth = val;
    };
    OColumn.prototype.getTitleAlignClass = function () {
        if (Util.isDefined(this.definition)) {
            return this.definition.titleAlign || Codes.COLUMN_TITLE_ALIGN_CENTER;
        }
        return Codes.COLUMN_TITLE_ALIGN_CENTER;
    };
    return OColumn;
}());
export { OColumn };
var SUFFIX_COLUMN_INSERTABLE = '_insertable';
var OTableOptions = (function () {
    function OTableOptions() {
        this.columns = [];
        this._visibleColumns = [];
        this.filter = true;
        this.filterCaseSensitive = false;
        this.selectColumn = new OColumn();
        this.selectColumn.name = NAME_COLUMN_SELECT;
        this.selectColumn.title = '';
        this.selectColumn.visible = false;
    }
    Object.defineProperty(OTableOptions.prototype, "visibleColumns", {
        get: function () {
            return this._visibleColumns;
        },
        set: function (arg) {
            var _this = this;
            this._visibleColumns = arg;
            this.columns.forEach(function (oCol) {
                oCol.visible = _this._visibleColumns.indexOf(oCol.attr) !== -1;
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableOptions.prototype, "columnsInsertables", {
        get: function () {
            return this._visibleColumns.map(function (col) {
                return col + SUFFIX_COLUMN_INSERTABLE;
            });
        },
        enumerable: true,
        configurable: true
    });
    return OTableOptions;
}());
export { OTableOptions };
var ɵ0 = dataServiceFactory;
var OTableComponent = (function (_super) {
    __extends(OTableComponent, _super);
    function OTableComponent(injector, elRef, dialog, form) {
        var _this = _super.call(this, injector, elRef, form) || this;
        _this.dialog = dialog;
        _this.selectAllCheckbox = false;
        _this.exportButton = true;
        _this.columnsVisibilityButton = true;
        _this.showButtonsText = true;
        _this._oTableOptions = new OTableOptions();
        _this.filterCaseSensitivePvt = false;
        _this.insertButton = true;
        _this.refreshButton = true;
        _this.deleteButton = true;
        _this.paginationControls = true;
        _this.fixedHeader = false;
        _this.showTitle = false;
        _this.editionMode = Codes.DETAIL_MODE_NONE;
        _this.selectionMode = Codes.SELECTION_MODE_MULTIPLE;
        _this.horizontalScroll = false;
        _this.showPaginatorFirstLastButtons = true;
        _this.autoAlignTitles = false;
        _this.multipleSort = true;
        _this.orderable = true;
        _this.resizable = true;
        _this._enabled = true;
        _this.keepSelectedItems = true;
        _this.exportMode = Codes.EXPORT_MODE_VISIBLE;
        _this._visibleColArray = [];
        _this.sortColArray = [];
        _this.pendingQuery = false;
        _this.pendingQueryFilter = undefined;
        _this.setStaticData = false;
        _this.avoidQueryColumns = [];
        _this.asyncLoadColumns = [];
        _this.asyncLoadSubscriptions = {};
        _this.finishQuerySubscription = false;
        _this.onClick = new EventEmitter();
        _this.onDoubleClick = new EventEmitter();
        _this.onRowSelected = new EventEmitter();
        _this.onRowDeselected = new EventEmitter();
        _this.onRowDeleted = new EventEmitter();
        _this.onDataLoaded = new EventEmitter();
        _this.onPaginatedDataLoaded = new EventEmitter();
        _this.onReinitialize = new EventEmitter();
        _this.onContentChange = new EventEmitter();
        _this.showFilterByColumnIcon = false;
        _this.showTotalsSubject = new BehaviorSubject(false);
        _this.showTotals = _this.showTotalsSubject.asObservable();
        _this.loadingSortingSubject = new BehaviorSubject(false);
        _this.loadingSorting = _this.loadingSortingSubject.asObservable();
        _this.loadingScrollSubject = new BehaviorSubject(false);
        _this.loadingScroll = _this.loadingScrollSubject.asObservable();
        _this.showFirstInsertableRow = false;
        _this.showLastInsertableRow = false;
        _this.clickDelay = 200;
        _this.clickPrevent = false;
        _this._currentPage = 0;
        _this.onUpdateScrolledState = new EventEmitter();
        _this.storePaginationState = false;
        _this.pageScrollVirtual = 1;
        try {
            _this.tabGroupContainer = _this.injector.get(MatTabGroup);
            _this.tabContainer = _this.injector.get(MatTab);
        }
        catch (error) {
        }
        _this.snackBarService = _this.injector.get(SnackBarService);
        _this.oTableStorage = new OTableStorage(_this);
        return _this;
    }
    Object.defineProperty(OTableComponent.prototype, "diameterSpinner", {
        get: function () {
            var minHeight = OTableComponent.DEFAULT_BASE_SIZE_SPINNER;
            var height = 0;
            if (this.spinnerContainer && this.spinnerContainer.nativeElement) {
                height = this.spinnerContainer.nativeElement.offsetHeight;
            }
            if (height > 0 && height <= 100) {
                return Math.floor(height - (height * 0.1));
            }
            else {
                return minHeight;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableComponent.prototype, "oTableOptions", {
        get: function () {
            return this._oTableOptions;
        },
        set: function (value) {
            this._oTableOptions = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableComponent.prototype, "quickFilter", {
        get: function () {
            return this._quickFilter;
        },
        set: function (value) {
            value = Util.parseBoolean(String(value));
            this._quickFilter = value;
            this._oTableOptions.filter = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableComponent.prototype, "filterCaseSensitive", {
        get: function () {
            return this.filterCaseSensitivePvt;
        },
        set: function (value) {
            this.filterCaseSensitivePvt = BooleanConverter(value);
            if (this._oTableOptions) {
                this._oTableOptions.filterCaseSensitive = this.filterCaseSensitivePvt;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableComponent.prototype, "enabled", {
        get: function () {
            return this._enabled;
        },
        set: function (val) {
            val = Util.parseBoolean(String(val));
            this._enabled = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableComponent.prototype, "selectAllCheckboxVisible", {
        get: function () {
            return this._selectAllCheckboxVisible;
        },
        set: function (value) {
            this._selectAllCheckboxVisible = BooleanConverter(this.state['select-column-visible']) || BooleanConverter(value);
            this.oTableOptions.selectColumn.visible = this._selectAllCheckboxVisible;
            this.initializeCheckboxColumn();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableComponent.prototype, "originalVisibleColumns", {
        get: function () {
            return this.visibleColumns;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableComponent.prototype, "originalSortColumns", {
        get: function () {
            return this.sortColumns;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableComponent.prototype, "visibleColArray", {
        get: function () {
            return this._visibleColArray;
        },
        set: function (arg) {
            var permissionsBlocked = this.permissions ? this.permissions.columns.filter(function (col) { return col.visible === false; }).map(function (col) { return col.attr; }) : [];
            var permissionsChecked = arg.filter(function (value) { return permissionsBlocked.indexOf(value) === -1; });
            this._visibleColArray = permissionsChecked;
            if (this._oTableOptions) {
                var containsSelectionCol = this._oTableOptions.visibleColumns.indexOf(OTableComponent.NAME_COLUMN_SELECT) !== -1;
                if (containsSelectionCol) {
                    this._visibleColArray.unshift(OTableComponent.NAME_COLUMN_SELECT);
                }
                this._oTableOptions.visibleColumns = this._visibleColArray;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableComponent.prototype, "currentPage", {
        get: function () {
            return this._currentPage;
        },
        set: function (val) {
            this._currentPage = val;
            if (this.paginator) {
                this.paginator.pageIndex = val;
            }
        },
        enumerable: true,
        configurable: true
    });
    OTableComponent.prototype.updateScrolledState = function () {
        if (this.horizontalScroll) {
            var self_1 = this;
            setTimeout(function () {
                var bodyWidth = self_1.tableBodyEl.nativeElement.clientWidth;
                var scrollWidth = self_1.tableBodyEl.nativeElement.scrollWidth;
                var previousState = self_1.horizontalScrolled;
                self_1.horizontalScrolled = scrollWidth > bodyWidth;
                if (previousState !== self_1.horizontalScrolled) {
                    self_1.onUpdateScrolledState.emit(self_1.horizontalScrolled);
                }
            }, 0);
        }
    };
    OTableComponent.prototype.ngOnInit = function () {
        this.initialize();
    };
    OTableComponent.prototype.ngAfterViewInit = function () {
        this.afterViewInit();
        this.initTableAfterViewInit();
        if (this.oTableMenu) {
            this.matMenu = this.oTableMenu.matMenu;
            this.oTableMenu.registerOptions(this.tableOptions.toArray());
        }
        if (this.oTableButtons) {
            this.oTableButtons.registerButtons(this.tableButtons.toArray());
        }
    };
    OTableComponent.prototype.ngOnDestroy = function () {
        this.destroy();
    };
    OTableComponent.prototype.getSuffixColumnInsertable = function () {
        return SUFFIX_COLUMN_INSERTABLE;
    };
    OTableComponent.prototype.getActionsPermissions = function () {
        return this.permissions ? (this.permissions.actions || []) : [];
    };
    OTableComponent.prototype.getMenuPermissions = function () {
        var result = this.permissions ? this.permissions.menu : undefined;
        return result ? result : {
            visible: true,
            enabled: true,
            items: []
        };
    };
    OTableComponent.prototype.getOColumnPermissions = function (attr) {
        var columns = this.permissions ? (this.permissions.columns || []) : [];
        return columns.find(function (comp) { return comp.attr === attr; }) || { attr: attr, enabled: true, visible: true };
    };
    OTableComponent.prototype.getActionPermissions = function (attr) {
        var actionsPerm = this.permissions ? (this.permissions.actions || []) : [];
        var permissions = actionsPerm.find(function (p) { return p.attr === attr; });
        return permissions || {
            attr: attr,
            visible: true,
            enabled: true
        };
    };
    OTableComponent.prototype.checkEnabledActionPermission = function (attr) {
        var actionsPerm = this.permissions ? (this.permissions.actions || []) : [];
        var permissions = actionsPerm.find(function (p) { return p.attr === attr; });
        var enabledPermision = PermissionsUtils.checkEnabledPermission(permissions);
        if (!enabledPermision) {
            this.snackBarService.open('MESSAGES.OPERATION_NOT_ALLOWED_PERMISSION');
        }
        return enabledPermision;
    };
    OTableComponent.prototype.initialize = function () {
        _super.prototype.initialize.call(this);
        if (this.tabGroupContainer && this.tabContainer) {
            this.registerTabListener();
        }
        this.initializeParams();
        this.initializeDao();
        this.permissions = this.permissionsService.getTablePermissions(this.oattr, this.actRoute);
    };
    OTableComponent.prototype.initializeDao = function () {
        var queryMethodName = this.pageable ? this.paginatedQueryMethod : this.queryMethod;
        var methods = {
            query: queryMethodName,
            update: this.updateMethod,
            delete: this.deleteMethod,
            insert: this.insertMethod
        };
        if (this.staticData) {
            this.queryOnBind = false;
            this.queryOnInit = false;
            this.daoTable = new OTableDao(undefined, this.entity, methods);
            this.setDataArray(this.staticData);
        }
        else {
            this.configureService();
            this.daoTable = new OTableDao(this.dataService, this.entity, methods);
        }
    };
    OTableComponent.prototype.reinitialize = function (options) {
        if (options) {
            var clonedOpts = Object.assign({}, options);
            if (clonedOpts.hasOwnProperty('entity')) {
                this.entity = clonedOpts.entity;
            }
            if (clonedOpts.hasOwnProperty('service')) {
                this.service = clonedOpts.service;
            }
            if (clonedOpts.hasOwnProperty('columns')) {
                this.columns = clonedOpts.columns;
            }
            if (clonedOpts.hasOwnProperty('visibleColumns')) {
                this.visibleColumns = clonedOpts.visibleColumns;
            }
            if (clonedOpts.hasOwnProperty('keys')) {
                this.keys = clonedOpts.keys;
            }
            if (clonedOpts.hasOwnProperty('sortColumns')) {
                this.sortColumns = clonedOpts.sortColumns;
            }
            if (clonedOpts.hasOwnProperty('parentKeys')) {
                this.parentKeys = clonedOpts.parentKeys;
            }
        }
        this.destroy();
        this.initialize();
        this.initTableAfterViewInit();
        this.onReinitialize.emit(null);
    };
    OTableComponent.prototype.initTableAfterViewInit = function () {
        this.parseVisibleColumns();
        this.setDatasource();
        this.registerDataSourceListeners();
        this.parseSortColumns();
        this.registerSortListener();
        this.setFiltersConfiguration(this.state);
        this.addDefaultRowButtons();
        if (this.queryOnInit) {
            this.queryData();
        }
    };
    OTableComponent.prototype.destroy = function () {
        var _this = this;
        _super.prototype.destroy.call(this);
        if (this.tabGroupChangeSubscription) {
            this.tabGroupChangeSubscription.unsubscribe();
        }
        if (this.selectionChangeSubscription) {
            this.selectionChangeSubscription.unsubscribe();
        }
        if (this.sortSubscription) {
            this.sortSubscription.unsubscribe();
        }
        if (this.onRenderedDataChange) {
            this.onRenderedDataChange.unsubscribe();
        }
        if (this.contextMenuSubscription) {
            this.contextMenuSubscription.unsubscribe();
        }
        Object.keys(this.asyncLoadSubscriptions).forEach(function (idx) {
            if (_this.asyncLoadSubscriptions[idx]) {
                _this.asyncLoadSubscriptions[idx].unsubscribe();
            }
        });
    };
    OTableComponent.prototype.getDataToStore = function () {
        return this.oTableStorage.getDataToStore();
    };
    OTableComponent.prototype.registerQuickFilter = function (arg) {
        var quickFilter = arg;
        this.quickFilterComponent = undefined;
        this.oTableQuickFilterComponent = quickFilter;
        this.oTableQuickFilterComponent.setValue(this.state['filter'], false);
    };
    OTableComponent.prototype.registerPagination = function (value) {
        this.paginationControls = true;
        this.paginator = value;
    };
    OTableComponent.prototype.registerContextMenu = function (value) {
        var _this = this;
        this.tableContextMenu = value;
        var self = this;
        this.contextMenuSubscription = this.tableContextMenu.onShow.subscribe(function (params) {
            params.class = 'o-table-context-menu ' + _this.rowHeight;
            if (params.data && !self.selection.isSelected(params.data.rowValue)) {
                self.clearSelection();
                self.selectedRow(params.data.rowValue);
            }
        });
    };
    OTableComponent.prototype.registerDefaultColumn = function (column) {
        if (Util.isDefined(this.getOColumn(column))) {
            return;
        }
        var colDef = new OColumn(column, this);
        this.pushOColumnDefinition(colDef);
    };
    OTableComponent.prototype.registerColumn = function (column) {
        var columnAttr = (typeof column === 'string') ? column : column.attr;
        var columnPermissions = this.getOColumnPermissions(columnAttr);
        if (!columnPermissions.visible) {
            return;
        }
        if (typeof column === 'string') {
            this.registerDefaultColumn(column);
            return;
        }
        var columnDef = this.getOColumn(column.attr);
        if (Util.isDefined(columnDef) && Util.isDefined(columnDef.definition)) {
            return;
        }
        var colDef = new OColumn(column.attr, this, column);
        var columnWidth = column.width;
        var storedCols = this.state['oColumns-display'];
        if (Util.isDefined(storedCols)) {
            var storedData_1 = storedCols.find(function (oCol) { return oCol.attr === colDef.attr; });
            if (Util.isDefined(storedData_1) && Util.isDefined(storedData_1.width)) {
                if (this.state.hasOwnProperty('initial-configuration')) {
                    if (this.state['initial-configuration'].hasOwnProperty('oColumns-display')) {
                        var initialStoredCols = this.state['initial-configuration']['oColumns-display'];
                        initialStoredCols.forEach(function (element) {
                            if (colDef.attr === element.attr && element.width === colDef.definition.originalWidth) {
                                columnWidth = storedData_1.width;
                            }
                        });
                    }
                    else {
                        columnWidth = storedData_1.width;
                    }
                }
            }
        }
        if (Util.isDefined(columnWidth)) {
            colDef.width = columnWidth;
        }
        if (column && (column.asyncLoad || column.type === 'action')) {
            this.avoidQueryColumns.push(column.attr);
            if (column.asyncLoad) {
                this.asyncLoadColumns.push(column.attr);
            }
        }
        this.pushOColumnDefinition(colDef);
    };
    OTableComponent.prototype.pushOColumnDefinition = function (colDef) {
        colDef.visible = (this._visibleColArray.indexOf(colDef.attr) !== -1);
        var alreadyExisting = this.getOColumn(colDef.attr);
        if (alreadyExisting !== undefined) {
            var replacingIndex = this._oTableOptions.columns.indexOf(alreadyExisting);
            this._oTableOptions.columns[replacingIndex] = colDef;
        }
        else {
            this._oTableOptions.columns.push(colDef);
        }
        this.refreshEditionModeWarn();
    };
    OTableComponent.prototype.refreshEditionModeWarn = function () {
        if (this.editionMode !== Codes.DETAIL_MODE_NONE) {
            return;
        }
        var editableColumns = this.oTableOptions.columns.filter(function (col) {
            return Util.isDefined(col.editor);
        });
        if (editableColumns.length > 0) {
            console.warn('Using a column with a editor but there is no edition-mode defined');
        }
    };
    OTableComponent.prototype.registerColumnAggregate = function (column) {
        this.showTotalsSubject.next(true);
        var alreadyExisting = this.getOColumn(column.attr);
        if (alreadyExisting !== undefined) {
            var replacingIndex = this._oTableOptions.columns.indexOf(alreadyExisting);
            this._oTableOptions.columns[replacingIndex].aggregate = column;
        }
    };
    OTableComponent.prototype.parseVisibleColumns = function () {
        var _this = this;
        if (this.state.hasOwnProperty('oColumns-display')) {
            var stateCols_1 = [];
            var self_2 = this;
            this.state['oColumns-display'].forEach(function (oCol, index) {
                var isVisibleColInColumns = self_2._oTableOptions.columns.find(function (col) { return col.attr === oCol.attr; }) !== undefined;
                if (isVisibleColInColumns) {
                    stateCols_1.push(oCol);
                }
                else {
                    console.warn('Unable to load the column ' + oCol.attr + ' from the localstorage');
                }
            });
            stateCols_1 = this.checkChangesVisibleColummnsInInitialConfiguration(stateCols_1);
            this.visibleColArray = stateCols_1.filter(function (item) { return item.visible; }).map(function (item) { return item.attr; });
        }
        else {
            this.visibleColArray = Util.parseArray(this.visibleColumns, true);
            this._oTableOptions.columns.sort(function (a, b) { return _this.visibleColArray.indexOf(a.attr) - _this.visibleColArray.indexOf(b.attr); });
        }
    };
    OTableComponent.prototype.checkChangesVisibleColummnsInInitialConfiguration = function (stateCols) {
        var self = this;
        if (this.state.hasOwnProperty('initial-configuration')) {
            if (this.state['initial-configuration'].hasOwnProperty('oColumns-display')) {
                var originalVisibleColArray = this.state['initial-configuration']['oColumns-display'].map(function (x) {
                    if (x.visible === true) {
                        return x.attr;
                    }
                });
                var visibleColArray = Util.parseArray(this.originalVisibleColumns, true);
                var colToAddInVisibleCol_1 = Util.differenceArrays(visibleColArray, originalVisibleColArray);
                if (colToAddInVisibleCol_1.length > 0) {
                    colToAddInVisibleCol_1.forEach(function (colAdd, index) {
                        if (stateCols.filter(function (col) { return col.attr === colAdd; }).length > 0) {
                            stateCols = stateCols.map(function (col) {
                                if (colToAddInVisibleCol_1.indexOf(col.attr) > -1) {
                                    col.visible = true;
                                }
                                return col;
                            });
                        }
                        else {
                            self.colArray.forEach(function (element, i) {
                                if (element === colAdd) {
                                    stateCols.splice(i + 1, 0, {
                                        attr: colAdd,
                                        visible: true,
                                        width: undefined
                                    });
                                }
                            });
                        }
                    });
                }
                var colToDeleteInVisibleCol_1 = Util.differenceArrays(originalVisibleColArray, visibleColArray);
                if (colToDeleteInVisibleCol_1.length > 0) {
                    stateCols = stateCols.map(function (col) {
                        if (colToDeleteInVisibleCol_1.indexOf(col.attr) > -1) {
                            col.visible = false;
                        }
                        return col;
                    });
                }
            }
        }
        return stateCols;
    };
    OTableComponent.prototype.parseSortColumns = function () {
        var sortColumnsParam = this.state['sort-columns'] || this.sortColumns;
        this.sortColArray = ServiceUtils.parseSortColumns(sortColumnsParam);
        if (this.state['sort-columns'] && this.state['initial-configuration']['sort-columns']) {
            var initialConfigSortColumnsArray = ServiceUtils.parseSortColumns(this.state['initial-configuration']['sort-columns']);
            var originalSortColumnsArray = ServiceUtils.parseSortColumns(this.originalSortColumns);
            var self_3 = this;
            var colToAddInVisibleCol = Util.differenceArrays(originalSortColumnsArray, initialConfigSortColumnsArray);
            if (colToAddInVisibleCol.length > 0) {
                colToAddInVisibleCol.forEach(function (colAdd) {
                    self_3.sortColArray.push(colAdd);
                });
            }
            var colToDelInVisibleCol = Util.differenceArrays(initialConfigSortColumnsArray, originalSortColumnsArray);
            if (colToDelInVisibleCol.length > 0) {
                colToDelInVisibleCol.forEach(function (colDel) {
                    self_3.sortColArray.forEach(function (col, i) {
                        if (col.columnName === colDel.columnName) {
                            self_3.sortColArray.splice(i, 1);
                        }
                    });
                });
            }
        }
        for (var i = this.sortColArray.length - 1; i >= 0; i--) {
            var colName = this.sortColArray[i].columnName;
            var oCol = this.getOColumn(colName);
            if (!Util.isDefined(oCol) || !oCol.orderable) {
                this.sortColArray.splice(i, 1);
            }
        }
    };
    OTableComponent.prototype.initializeParams = function () {
        var _this = this;
        if (!this.visibleColumns) {
            this.visibleColumns = this.columns;
        }
        if (this.colArray.length) {
            this.colArray.forEach(function (x) { return _this.registerColumn(x); });
            var columnsOrder_1 = [];
            if (this.state.hasOwnProperty('oColumns-display')) {
                columnsOrder_1 = this.state['oColumns-display'].map(function (item) { return item.attr; });
            }
            else {
                columnsOrder_1 = this.colArray.filter(function (attr) { return _this.visibleColArray.indexOf(attr) === -1; });
                columnsOrder_1.push.apply(columnsOrder_1, this.visibleColArray);
            }
            this._oTableOptions.columns.sort(function (a, b) {
                if (columnsOrder_1.indexOf(a.attr) === -1) {
                    return 0;
                }
                else {
                    return columnsOrder_1.indexOf(a.attr) - columnsOrder_1.indexOf(b.attr);
                }
            });
        }
        this._oTableOptions.filter = this.quickFilter;
        if (this.state.hasOwnProperty('currentPage')) {
            this.currentPage = this.state['currentPage'];
        }
        if (!this.paginator && this.paginationControls) {
            this.paginator = new OTablePaginatorComponent(this.injector, this);
        }
        if (!Util.isDefined(this.selectAllCheckboxVisible)) {
            this._oTableOptions.selectColumn.visible = !!this.state['select-column-visible'];
        }
        else {
            if (this.state.hasOwnProperty('initial-configuration') && this.state['initial-configuration'].hasOwnProperty('select-column-visible')
                && this.selectAllCheckboxVisible === this.state['initial-configuration']['select-column-visible']) {
                this._oTableOptions.selectColumn.visible = !!this.state['select-column-visible'];
            }
            else {
                this._oTableOptions.selectColumn.visible = this.selectAllCheckboxVisible;
            }
        }
        this.initializeCheckboxColumn();
    };
    OTableComponent.prototype.registerTabListener = function () {
        var self = this;
        this.tabGroupChangeSubscription = this.tabGroupContainer.selectedTabChange.subscribe(function (evt) {
            var interval;
            var timerCallback = function (tab) {
                if (tab && tab.content.isAttached) {
                    clearInterval(interval);
                    if (tab === self.tabContainer) {
                        self.insideTabBugWorkaround();
                        if (self.pendingQuery) {
                            self.queryData(self.pendingQueryFilter);
                        }
                    }
                }
            };
            interval = setInterval(function () { timerCallback(evt.tab); }, 100);
        });
    };
    OTableComponent.prototype.insideTabBugWorkaround = function () {
        this.sortHeaders.forEach(function (sortH) {
            sortH.refresh();
        });
    };
    OTableComponent.prototype.registerSortListener = function () {
        if (Util.isDefined(this.sort)) {
            this.sortSubscription = this.sort.oSortChange.subscribe(this.onSortChange.bind(this));
            this.sort.setMultipleSort(this.multipleSort);
            if (Util.isDefined(this._oTableOptions.columns) && (this.sortColArray.length > 0)) {
                this.sort.setTableInfo(this.sortColArray);
            }
        }
    };
    OTableComponent.prototype.onSortChange = function (sortArray) {
        var _this = this;
        this.sortColArray = [];
        sortArray.forEach(function (sort) {
            if (sort.direction !== '') {
                _this.sortColArray.push({
                    columnName: sort.id,
                    ascendent: sort.direction === Codes.ASC_SORT
                });
            }
        });
        if (this.pageable) {
            this.reloadData();
        }
        else {
            this.loadingSortingSubject.next(true);
        }
    };
    OTableComponent.prototype.setDatasource = function () {
        this.dataSource = new OTableDataSource(this);
        if (this.daoTable) {
            this.dataSource.resultsLength = this.daoTable.data.length;
        }
    };
    OTableComponent.prototype.registerDataSourceListeners = function () {
        if (!this.pageable) {
            var self_4 = this;
            this.onRenderedDataChange = this.dataSource.onRenderedDataChange.subscribe(function () {
                setTimeout(function () {
                    self_4.loadingSortingSubject.next(false);
                }, 500);
            });
        }
    };
    Object.defineProperty(OTableComponent.prototype, "showLoading", {
        get: function () {
            return combineLatest(this.loading, this.loadingSorting, this.loadingScroll, function (x, y, z) { return (x || y || z); });
        },
        enumerable: true,
        configurable: true
    });
    OTableComponent.prototype.queryData = function (filter, ovrrArgs) {
        if (filter === void 0) { filter = undefined; }
        if (this.isInsideInactiveTab()) {
            this.pendingQuery = true;
            this.pendingQueryFilter = filter;
            return;
        }
        this.pendingQuery = false;
        this.pendingQueryFilter = undefined;
        _super.prototype.queryData.call(this, filter, ovrrArgs);
    };
    OTableComponent.prototype.isInsideInactiveTab = function () {
        var result = false;
        if (this.tabContainer && this.tabGroupContainer) {
            result = !(this.tabContainer.isActive || (this.tabGroupContainer.selectedIndex === this.tabContainer.position));
        }
        return result;
    };
    OTableComponent.prototype.getComponentFilter = function (existingFilter) {
        if (existingFilter === void 0) { existingFilter = {}; }
        var filter = existingFilter;
        if (this.pageable) {
            if (Object.keys(filter).length > 0) {
                var parentItemExpr = FilterExpressionUtils.buildExpressionFromObject(filter);
                filter = {};
                filter[FilterExpressionUtils.FILTER_EXPRESSION_KEY] = parentItemExpr;
            }
            var beColFilter = this.getColumnFiltersExpression();
            if (beColFilter && !Util.isDefined(filter[FilterExpressionUtils.FILTER_EXPRESSION_KEY])) {
                filter[FilterExpressionUtils.FILTER_EXPRESSION_KEY] = beColFilter;
            }
            else if (beColFilter) {
                filter[FilterExpressionUtils.FILTER_EXPRESSION_KEY] =
                    FilterExpressionUtils.buildComplexExpression(filter[FilterExpressionUtils.FILTER_EXPRESSION_KEY], beColFilter, FilterExpressionUtils.OP_AND);
            }
        }
        return _super.prototype.getComponentFilter.call(this, filter);
    };
    OTableComponent.prototype.getQuickFilterExpression = function () {
        if (Util.isDefined(this.oTableQuickFilterComponent)) {
            return this.oTableQuickFilterComponent.filterExpression;
        }
        return undefined;
    };
    OTableComponent.prototype.getColumnFiltersExpression = function () {
        var columnFilters = this.dataSource.getColumnValueFilters();
        var beColumnFilters = [];
        columnFilters.forEach(function (colFilter) {
            switch (colFilter.operator) {
                case ColumnValueFilterOperator.IN:
                    if (Util.isArray(colFilter.values)) {
                        var besIn = colFilter.values.map(function (value) { return FilterExpressionUtils.buildExpressionEquals(colFilter.attr, value); });
                        var beIn_1 = besIn.pop();
                        besIn.forEach(function (be) {
                            beIn_1 = FilterExpressionUtils.buildComplexExpression(beIn_1, be, FilterExpressionUtils.OP_OR);
                        });
                        beColumnFilters.push(beIn_1);
                    }
                    break;
                case ColumnValueFilterOperator.BETWEEN:
                    if (Util.isArray(colFilter.values) && colFilter.values.length === 2) {
                        var beFrom = FilterExpressionUtils.buildExpressionLessEqual(colFilter.attr, colFilter.values[0]);
                        var beTo = FilterExpressionUtils.buildExpressionMoreEqual(colFilter.attr, colFilter.values[1]);
                        beColumnFilters.push(FilterExpressionUtils.buildComplexExpression(beFrom, beTo, FilterExpressionUtils.OP_AND));
                    }
                    break;
                case ColumnValueFilterOperator.EQUAL:
                    beColumnFilters.push(FilterExpressionUtils.buildExpressionLike(colFilter.attr, colFilter.values));
                    break;
                case ColumnValueFilterOperator.LESS_EQUAL:
                    beColumnFilters.push(FilterExpressionUtils.buildExpressionLessEqual(colFilter.attr, colFilter.values));
                    break;
                case ColumnValueFilterOperator.MORE_EQUAL:
                    beColumnFilters.push(FilterExpressionUtils.buildExpressionMoreEqual(colFilter.attr, colFilter.values));
                    break;
            }
        });
        var beColFilter = beColumnFilters.pop();
        beColumnFilters.forEach(function (be) {
            beColFilter = FilterExpressionUtils.buildComplexExpression(beColFilter, be, FilterExpressionUtils.OP_AND);
        });
        return beColFilter;
    };
    OTableComponent.prototype.updatePaginationInfo = function (queryRes) {
        _super.prototype.updatePaginationInfo.call(this, queryRes);
    };
    OTableComponent.prototype.setData = function (data, sqlTypes) {
        this.daoTable.sqlTypesChange.next(sqlTypes);
        this.daoTable.setDataArray(data);
        this.updateScrolledState();
        if (this.pageable) {
            ObservableWrapper.callEmit(this.onPaginatedDataLoaded, data);
        }
        ObservableWrapper.callEmit(this.onDataLoaded, this.daoTable.data);
    };
    OTableComponent.prototype.showDialogError = function (error, errorOptional) {
        if (Util.isDefined(error) && !Util.isObject(error)) {
            this.dialogService.alert('ERROR', error);
        }
        else {
            this.dialogService.alert('ERROR', errorOptional);
        }
    };
    OTableComponent.prototype.projectContentChanged = function () {
        var _this = this;
        var self = this;
        setTimeout(function () {
            self.loadingSortingSubject.next(false);
        }, 500);
        this.loadingScrollSubject.next(false);
        if (this.previousRendererData !== this.dataSource.renderedData) {
            ObservableWrapper.callEmit(this.onContentChange, this.dataSource.renderedData);
            this.previousRendererData = this.dataSource.renderedData;
        }
        this.getColumnsWidthFromDOM();
        if (this.state.hasOwnProperty('selection') && this.dataSource.renderedData.length > 0 && this.getSelectedItems().length === 0) {
            this.state.selection.forEach(function (selectedItem) {
                var foundItem = _this.dataSource.renderedData.find(function (data) {
                    var result = true;
                    Object.keys(selectedItem).forEach(function (key) {
                        result = result && (data[key] === selectedItem[key]);
                    });
                    return result;
                });
                if (foundItem) {
                    _this.selection.select(foundItem);
                }
            });
        }
    };
    OTableComponent.prototype.getAttributesValuesToQuery = function () {
        var columns = _super.prototype.getAttributesValuesToQuery.call(this);
        if (this.avoidQueryColumns.length > 0) {
            for (var i = columns.length - 1; i >= 0; i--) {
                var col = columns[i];
                if (this.avoidQueryColumns.indexOf(col) !== -1) {
                    columns.splice(i, 1);
                }
            }
        }
        return columns;
    };
    OTableComponent.prototype.getQueryArguments = function (filter, ovrrArgs) {
        var queryArguments = _super.prototype.getQueryArguments.call(this, filter, ovrrArgs);
        queryArguments[3] = this.getSqlTypesForFilter(queryArguments[1]);
        Object.assign(queryArguments[3], ovrrArgs ? ovrrArgs.sqltypes || {} : {});
        if (this.pageable) {
            queryArguments[5] = this.paginator.isShowingAllRows(queryArguments[5]) ? this.state.totalQueryRecordsNumber : queryArguments[5];
            queryArguments[6] = this.sortColArray;
        }
        return queryArguments;
    };
    OTableComponent.prototype.getSqlTypesForFilter = function (filter) {
        var allSqlTypes = {};
        this._oTableOptions.columns.forEach(function (col) {
            if (col.sqlType) {
                allSqlTypes[col.attr] = col.sqlType;
            }
        });
        Object.assign(allSqlTypes, this.getSqlTypes());
        var filterCols = Util.getValuesFromObject(filter);
        var sqlTypes = {};
        Object.keys(allSqlTypes).forEach(function (key) {
            if (filterCols.indexOf(key) !== -1 && allSqlTypes[key] !== SQLTypes.OTHER) {
                sqlTypes[key] = allSqlTypes[key];
            }
        });
        return sqlTypes;
    };
    OTableComponent.prototype.onExportButtonClicked = function () {
        if (this.oTableMenu) {
            this.oTableMenu.onExportButtonClicked();
        }
    };
    OTableComponent.prototype.onChangeColumnsVisibilityClicked = function () {
        if (this.oTableMenu) {
            this.oTableMenu.onChangeColumnsVisibilityClicked();
        }
    };
    OTableComponent.prototype.onMatTableContentChanged = function () {
    };
    OTableComponent.prototype.add = function () {
        if (!this.checkEnabledActionPermission(PermissionsUtils.ACTION_INSERT)) {
            return;
        }
        _super.prototype.insertDetail.call(this);
    };
    OTableComponent.prototype.remove = function (clearSelectedItems) {
        var _this = this;
        if (clearSelectedItems === void 0) { clearSelectedItems = false; }
        if (!this.checkEnabledActionPermission(PermissionsUtils.ACTION_DELETE)) {
            return;
        }
        var selectedItems = this.getSelectedItems();
        if (selectedItems.length > 0) {
            this.dialogService.confirm('CONFIRM', 'MESSAGES.CONFIRM_DELETE').then(function (res) {
                if (res === true) {
                    if (_this.dataService && (_this.deleteMethod in _this.dataService) && _this.entity && (_this.keysArray.length > 0)) {
                        var filters = ServiceUtils.getArrayProperties(selectedItems, _this.keysArray);
                        _this.daoTable.removeQuery(filters).subscribe(function (res) {
                            ObservableWrapper.callEmit(_this.onRowDeleted, selectedItems);
                        }, function (error) {
                            _this.showDialogError(error, 'MESSAGES.ERROR_DELETE');
                        }, function () {
                            _this.reloadData();
                        });
                    }
                    else {
                        _this.deleteLocalItems();
                    }
                }
                else if (clearSelectedItems) {
                    _this.clearSelection();
                }
            });
        }
    };
    OTableComponent.prototype.refresh = function () {
        this.reloadData();
    };
    OTableComponent.prototype.showAndSelectAllCheckbox = function () {
        if (this.isSelectionModeMultiple()) {
            if (this.selectAllCheckbox) {
                this._oTableOptions.selectColumn.visible = true;
            }
            this.initializeCheckboxColumn();
            this.selectAll();
        }
    };
    OTableComponent.prototype.reloadPaginatedDataFromStart = function () {
        if (this.pageable) {
            this.currentPage = 0;
            this.reloadData();
        }
    };
    OTableComponent.prototype.reloadData = function () {
        if (!this.checkEnabledActionPermission(PermissionsUtils.ACTION_REFRESH)) {
            return;
        }
        Object.assign(this.state, this.oTableStorage.getTablePropertyToStore('selection'));
        this.clearSelection();
        this.finishQuerySubscription = false;
        this.pendingQuery = true;
        var queryArgs;
        if (this.pageable) {
            queryArgs = {
                offset: this.currentPage * this.queryRows,
                length: this.queryRows
            };
        }
        this.queryData(void 0, queryArgs);
    };
    OTableComponent.prototype.handleClick = function (item, $event) {
        var self = this;
        this.clickTimer = setTimeout(function () {
            if (!self.clickPrevent) {
                self.doHandleClick(item, $event);
            }
            self.clickPrevent = false;
        }, this.clickDelay);
    };
    OTableComponent.prototype.doHandleClick = function (item, $event) {
        if (!this.oenabled) {
            return;
        }
        if ((this.detailMode === Codes.DETAIL_MODE_CLICK)) {
            ObservableWrapper.callEmit(this.onClick, item);
            this.saveDataNavigationInLocalStorage();
            this.selection.clear();
            this.selectedRow(item);
            this.viewDetail(item);
            return;
        }
        if (this.isSelectionModeMultiple() && ($event.ctrlKey || $event.metaKey)) {
            this.selectedRow(item);
            ObservableWrapper.callEmit(this.onClick, item);
        }
        else if (this.isSelectionModeMultiple() && $event.shiftKey) {
            this.handleMultipleSelection(item);
        }
        else if (!this.isSelectionModeNone()) {
            var selectedItems = this.getSelectedItems();
            if (this.selection.isSelected(item) && selectedItems.length === 1 && this.editionEnabled) {
                return;
            }
            else {
                this.clearSelectionAndEditing();
            }
            this.selectedRow(item);
            ObservableWrapper.callEmit(this.onClick, item);
        }
    };
    OTableComponent.prototype.handleMultipleSelection = function (item) {
        var _this = this;
        if (this.selection.selected.length > 0) {
            var first = this.dataSource.renderedData.indexOf(this.selection.selected[0]);
            var last = this.dataSource.renderedData.indexOf(item);
            var indexFrom = Math.min(first, last);
            var indexTo = Math.max(first, last);
            this.clearSelection();
            this.dataSource.renderedData.slice(indexFrom, indexTo + 1).forEach(function (e) { return _this.selectedRow(e); });
            ObservableWrapper.callEmit(this.onClick, this.selection.selected);
        }
    };
    OTableComponent.prototype.saveDataNavigationInLocalStorage = function () {
        _super.prototype.saveDataNavigationInLocalStorage.call(this);
        this.storePaginationState = true;
    };
    OTableComponent.prototype.handleDoubleClick = function (item, event) {
        clearTimeout(this.clickTimer);
        this.clickPrevent = true;
        ObservableWrapper.callEmit(this.onDoubleClick, item);
        if (this.oenabled && Codes.isDoubleClickMode(this.detailMode)) {
            this.saveDataNavigationInLocalStorage();
            this.viewDetail(item);
        }
    };
    Object.defineProperty(OTableComponent.prototype, "editionEnabled", {
        get: function () {
            return (this._oTableOptions.columns.find(function (item) { return item.editing; }) !== undefined);
        },
        enumerable: true,
        configurable: true
    });
    OTableComponent.prototype.handleDOMClick = function (event) {
        if (this._oTableOptions.selectColumn.visible) {
            return;
        }
        var activeEditingColumns = this._oTableOptions.columns.filter(function (item) { return item.editing; });
        if (activeEditingColumns && activeEditingColumns.length > 0) {
            return;
        }
        var overlayContainer = document.body.getElementsByClassName('cdk-overlay-container')[0];
        if (overlayContainer && overlayContainer.contains(event.target)) {
            return;
        }
        var tableContainer = this.elRef.nativeElement.querySelector('.o-table-container');
        var tableContent = this.elRef.nativeElement.querySelector('.o-table-container table.mat-table');
        if (tableContainer && tableContent && tableContainer.contains(event.target) && !tableContent.contains(event.target)) {
            this.clearSelection();
        }
    };
    OTableComponent.prototype.handleCellClick = function (column, row, event) {
        if (this.oenabled && column.editor
            && (this.detailMode !== Codes.DETAIL_MODE_CLICK)
            && (this.editionMode === Codes.DETAIL_MODE_CLICK)) {
            this.activateColumnEdition(column, row, event);
        }
    };
    OTableComponent.prototype.handleCellDoubleClick = function (column, row, event) {
        if (this.oenabled && column.editor
            && (!Codes.isDoubleClickMode(this.detailMode))
            && (Codes.isDoubleClickMode(this.editionMode))) {
            this.activateColumnEdition(column, row, event);
        }
    };
    OTableComponent.prototype.activateColumnEdition = function (column, row, event) {
        if (event) {
            event.stopPropagation();
            event.preventDefault();
        }
        if (event && column.editing && this.editingCell === event.currentTarget) {
            return;
        }
        var columnPermissions = this.getOColumnPermissions(column.attr);
        if (columnPermissions.enabled === false) {
            console.warn(column.attr + " edition not allowed due to permissions");
            return;
        }
        this.clearSelectionAndEditing();
        this.selectedRow(row);
        if (event) {
            this.editingCell = event.currentTarget;
        }
        var rowData = {};
        this.keysArray.forEach(function (key) {
            rowData[key] = row[key];
        });
        rowData[column.attr] = row[column.attr];
        this.editingRow = row;
        column.editing = true;
        column.editor.startEdition(rowData);
        this.cd.detectChanges();
    };
    OTableComponent.prototype.updateCellData = function (column, data, saveChanges) {
        if (!this.checkEnabledActionPermission(PermissionsUtils.ACTION_UPDATE)) {
            var res = new Observable(function (innerObserver) {
                innerObserver.error();
            });
            return res;
        }
        column.editing = false;
        this.editingCell = undefined;
        if (saveChanges && this.editingRow !== undefined) {
            Object.assign(this.editingRow, data);
        }
        this.editingRow = undefined;
        if (saveChanges && column.editor.updateRecordOnEdit) {
            var toUpdate = {};
            toUpdate[column.attr] = data[column.attr];
            var kv = this.extractKeysFromRecord(data);
            return this.updateRecord(kv, toUpdate);
        }
        return undefined;
    };
    OTableComponent.prototype.getKeysValues = function () {
        var data = this.getAllValues();
        var _self = this;
        return data.map(function (row) {
            var obj = {};
            _self.keysArray.forEach(function (key) {
                if (row[key] !== undefined) {
                    obj[key] = row[key];
                }
            });
            return obj;
        });
    };
    OTableComponent.prototype.onShowsSelects = function (event) {
        if (this.oTableMenu) {
            this.oTableMenu.onShowsSelects(event);
        }
    };
    OTableComponent.prototype.initializeCheckboxColumn = function () {
        var _this = this;
        if (!this.selectionChangeSubscription && this.oTableOptions.selectColumn.visible) {
            this.selectionChangeSubscription = this.selection.onChange.subscribe(function (selectionData) {
                if (selectionData && selectionData.added.length > 0) {
                    ObservableWrapper.callEmit(_this.onRowSelected, selectionData.added);
                }
                if (selectionData && selectionData.removed.length > 0) {
                    ObservableWrapper.callEmit(_this.onRowDeselected, selectionData.removed);
                }
            });
        }
        this.updateSelectionColumnState();
    };
    OTableComponent.prototype.updateSelectionColumnState = function () {
        if (!this._oTableOptions.selectColumn.visible) {
            this.clearSelection();
        }
        if (this._oTableOptions.visibleColumns && this._oTableOptions.selectColumn.visible && this._oTableOptions.visibleColumns[0] !== OTableComponent.NAME_COLUMN_SELECT) {
            this._oTableOptions.visibleColumns.unshift(OTableComponent.NAME_COLUMN_SELECT);
        }
        else if (this._oTableOptions.visibleColumns && !this._oTableOptions.selectColumn.visible && this._oTableOptions.visibleColumns[0] === OTableComponent.NAME_COLUMN_SELECT) {
            this._oTableOptions.visibleColumns.shift();
        }
    };
    OTableComponent.prototype.isAllSelected = function () {
        var numSelected = this.selection.selected.length;
        var numRows = this.dataSource ? this.dataSource.renderedData.length : undefined;
        return numSelected > 0 && numSelected === numRows;
    };
    OTableComponent.prototype.masterToggle = function (event) {
        event.checked ? this.selectAll() : this.clearSelection();
    };
    OTableComponent.prototype.selectAll = function () {
        var _this = this;
        this.dataSource.renderedData.forEach(function (row) { return _this.selection.select(row); });
    };
    OTableComponent.prototype.selectionCheckboxToggle = function (event, row) {
        if (this.isSelectionModeSingle()) {
            this.clearSelection();
        }
        this.selectedRow(row);
    };
    OTableComponent.prototype.selectedRow = function (row) {
        this.setSelected(row);
        this.cd.detectChanges();
    };
    Object.defineProperty(OTableComponent.prototype, "showDeleteButton", {
        get: function () {
            return this.deleteButton;
        },
        enumerable: true,
        configurable: true
    });
    OTableComponent.prototype.getTrackByFunction = function () {
        var self = this;
        return function (index, item) {
            if (self.hasScrollableContainer() && index < (self.pageScrollVirtual - 1) * OTableComponent.LIMIT_SCROLLVIRTUAL) {
                return null;
            }
            var itemId = '';
            var keysLenght = self.keysArray.length;
            self.keysArray.forEach(function (key, idx) {
                var suffix = idx < (keysLenght - 1) ? ';' : '';
                itemId += item[key] + suffix;
            });
            var asyncAndVisible = self.asyncLoadColumns.filter(function (c) { return self._oTableOptions.visibleColumns.indexOf(c) !== -1; });
            if (self.asyncLoadColumns.length && asyncAndVisible.length > 0 && !self.finishQuerySubscription) {
                self.queryRowAsyncData(index, item);
                if (self.paginator && index === (self.paginator.pageSize - 1)) {
                    self.finishQuerySubscription = true;
                }
                return itemId;
            }
            else {
                return itemId;
            }
        };
    };
    OTableComponent.prototype.queryRowAsyncData = function (rowIndex, rowData) {
        var _this = this;
        var kv = ServiceUtils.getObjectProperties(rowData, this.keysArray);
        var av = this.asyncLoadColumns.filter(function (c) { return _this._oTableOptions.visibleColumns.indexOf(c) !== -1; });
        if (av.length === 0) {
            return;
        }
        var columnQueryArgs = [kv, av, this.entity, undefined, undefined, undefined, undefined];
        var queryMethodName = this.pageable ? this.paginatedQueryMethod : this.queryMethod;
        if (this.dataService && (queryMethodName in this.dataService) && this.entity) {
            if (this.asyncLoadSubscriptions[rowIndex]) {
                this.asyncLoadSubscriptions[rowIndex].unsubscribe();
            }
            this.asyncLoadSubscriptions[rowIndex] = this.dataService[queryMethodName].apply(this.dataService, columnQueryArgs).subscribe(function (res) {
                if (res.code === Codes.ONTIMIZE_SUCCESSFUL_CODE) {
                    var data = undefined;
                    if (Util.isArray(res.data) && res.data.length === 1) {
                        data = res.data[0];
                    }
                    else if (Util.isObject(res.data)) {
                        data = res.data;
                    }
                    _this.daoTable.setAsynchronousColumn(data, rowData);
                }
            });
        }
    };
    OTableComponent.prototype.getValue = function () {
        return this.dataSource.getCurrentData();
    };
    OTableComponent.prototype.getAllValues = function () {
        return this.dataSource.getCurrentAllData();
    };
    OTableComponent.prototype.getAllRenderedValues = function () {
        return this.dataSource.getAllRendererData();
    };
    OTableComponent.prototype.getRenderedValue = function () {
        return this.dataSource.getCurrentRendererData();
    };
    OTableComponent.prototype.getSqlTypes = function () {
        return Util.isDefined(this.dataSource.sqlTypes) ? this.dataSource.sqlTypes : {};
    };
    OTableComponent.prototype.setOTableColumnsFilter = function (tableColumnsFilter) {
        this.oTableColumnsFilterComponent = tableColumnsFilter;
    };
    OTableComponent.prototype.getStoredColumnsFilters = function () {
        return this.oTableStorage.getStoredColumnsFilters();
    };
    OTableComponent.prototype.onFilterByColumnClicked = function () {
        if (this.oTableMenu) {
            this.oTableMenu.onFilterByColumnClicked();
        }
    };
    OTableComponent.prototype.onStoreFilterClicked = function () {
        if (this.oTableMenu) {
            this.oTableMenu.onStoreFilterClicked();
        }
    };
    OTableComponent.prototype.onLoadFilterClicked = function () {
        if (this.oTableMenu) {
            this.oTableMenu.onLoadFilterClicked();
        }
    };
    OTableComponent.prototype.onClearFilterClicked = function () {
        if (this.oTableMenu) {
            this.oTableMenu.onClearFilterClicked();
        }
    };
    OTableComponent.prototype.clearFilters = function (triggerDatasourceUpdate) {
        if (triggerDatasourceUpdate === void 0) { triggerDatasourceUpdate = true; }
        this.dataSource.clearColumnFilters(triggerDatasourceUpdate);
        if (this.oTableMenu && this.oTableMenu.columnFilterOption) {
            this.oTableMenu.columnFilterOption.setActive(this.showFilterByColumnIcon);
        }
        if (this.oTableQuickFilterComponent) {
            this.oTableQuickFilterComponent.setValue(void 0);
        }
    };
    OTableComponent.prototype.isColumnFilterable = function (column) {
        return (this.oTableColumnsFilterComponent && this.oTableColumnsFilterComponent.isColumnFilterable(column.attr));
    };
    OTableComponent.prototype.isModeColumnFilterable = function (column) {
        return this.showFilterByColumnIcon &&
            (this.oTableColumnsFilterComponent && this.oTableColumnsFilterComponent.isColumnFilterable(column.attr));
    };
    OTableComponent.prototype.isColumnFilterActive = function (column) {
        return this.showFilterByColumnIcon &&
            this.dataSource.getColumnValueFilterByAttr(column.attr) !== undefined;
    };
    OTableComponent.prototype.openColumnFilterDialog = function (column, event) {
        event.stopPropagation();
        event.preventDefault();
        var dialogRef = this.dialog.open(OTableFilterByColumnDataDialogComponent, {
            data: {
                previousFilter: this.dataSource.getColumnValueFilterByAttr(column.attr),
                column: column,
                tableData: this.dataSource.getTableData(),
                preloadValues: this.oTableColumnsFilterComponent.preloadValues,
                mode: this.oTableColumnsFilterComponent.mode
            },
            disableClose: true,
            panelClass: ['o-dialog-class', 'o-table-dialog']
        });
        var self = this;
        dialogRef.afterClosed().subscribe(function (result) {
            if (result) {
                var columnValueFilter = dialogRef.componentInstance.getColumnValuesFilter();
                self.dataSource.addColumnFilter(columnValueFilter);
                self.reloadPaginatedDataFromStart();
            }
        });
    };
    Object.defineProperty(OTableComponent.prototype, "disableTableMenuButton", {
        get: function () {
            return !!(this.permissions && this.permissions.menu && this.permissions.menu.enabled === false);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableComponent.prototype, "showTableMenuButton", {
        get: function () {
            var permissionHidden = !!(this.permissions && this.permissions.menu && this.permissions.menu.visible === false);
            if (permissionHidden) {
                return false;
            }
            var staticOpt = this.selectAllCheckbox || this.exportButton || this.columnsVisibilityButton || this.oTableColumnsFilterComponent !== undefined;
            return staticOpt || this.tableOptions.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    OTableComponent.prototype.setOTableInsertableRow = function (tableInsertableRow) {
        var insertPerm = this.getActionPermissions(PermissionsUtils.ACTION_INSERT);
        if (insertPerm.visible) {
            tableInsertableRow.enabled = insertPerm.enabled;
            this.oTableInsertableRowComponent = tableInsertableRow;
            this.showFirstInsertableRow = this.oTableInsertableRowComponent.isFirstRow();
            this.showLastInsertableRow = !this.showFirstInsertableRow;
            this.oTableInsertableRowComponent.initializeEditors();
        }
    };
    OTableComponent.prototype.clearSelectionAndEditing = function () {
        this.selection.clear();
        this._oTableOptions.columns.forEach(function (item) {
            item.editing = false;
        });
    };
    OTableComponent.prototype.useDetailButton = function (column) {
        return column.type === 'editButtonInRow' || column.type === 'detailButtonInRow';
    };
    OTableComponent.prototype.onDetailButtonClick = function (column, row, event) {
        event.preventDefault();
        event.stopPropagation();
        switch (column.type) {
            case 'editButtonInRow':
                this.editDetail(row);
                break;
            case 'detailButtonInRow':
                this.viewDetail(row);
                break;
        }
    };
    OTableComponent.prototype.getDetailButtonIcon = function (column) {
        var result = '';
        switch (column.type) {
            case 'editButtonInRow':
                result = this.editButtonInRowIcon;
                break;
            case 'detailButtonInRow':
                result = this.detailButtonInRowIcon;
                break;
        }
        return result;
    };
    OTableComponent.prototype.usePlainRender = function (column, row) {
        return !this.useDetailButton(column) && !column.renderer && (!column.editor || (!column.editing || !this.selection.isSelected(row)));
    };
    OTableComponent.prototype.useCellRenderer = function (column, row) {
        return column.renderer && (!column.editing || column.editing && !this.selection.isSelected(row));
    };
    OTableComponent.prototype.useCellEditor = function (column, row) {
        if (column.editor && column.editor instanceof OTableCellEditorBooleanComponent && column.editor.autoCommit) {
            return false;
        }
        return column.editor && column.editing && this.selection.isSelected(row);
    };
    OTableComponent.prototype.isSelectionModeMultiple = function () {
        return this.selectionMode === Codes.SELECTION_MODE_MULTIPLE;
    };
    OTableComponent.prototype.isSelectionModeSingle = function () {
        return this.selectionMode === Codes.SELECTION_MODE_SINGLE;
    };
    OTableComponent.prototype.isSelectionModeNone = function () {
        return this.selectionMode === Codes.SELECTION_MODE_NONE;
    };
    OTableComponent.prototype.onChangePage = function (evt) {
        this.finishQuerySubscription = false;
        if (!this.pageable) {
            this.currentPage = evt.pageIndex;
            return;
        }
        var tableState = this.state;
        var goingBack = evt.pageIndex < this.currentPage;
        this.currentPage = evt.pageIndex;
        var pageSize = this.paginator.isShowingAllRows(evt.pageSize) ? tableState.totalQueryRecordsNumber : evt.pageSize;
        var oldQueryRows = this.queryRows;
        var changingPageSize = (oldQueryRows !== pageSize);
        this.queryRows = pageSize;
        var newStartRecord;
        var queryLength;
        if (goingBack || changingPageSize) {
            newStartRecord = (this.currentPage * this.queryRows);
            queryLength = this.queryRows;
        }
        else {
            newStartRecord = Math.max(tableState.queryRecordOffset, (this.currentPage * this.queryRows));
            var newEndRecord = Math.min(newStartRecord + this.queryRows, tableState.totalQueryRecordsNumber);
            queryLength = Math.min(this.queryRows, newEndRecord - newStartRecord);
        }
        var queryArgs = {
            offset: newStartRecord,
            length: queryLength
        };
        this.finishQuerySubscription = false;
        this.queryData(void 0, queryArgs);
    };
    OTableComponent.prototype.getOColumn = function (attr) {
        return this._oTableOptions ? this._oTableOptions.columns.find(function (item) { return item.name === attr; }) : undefined;
    };
    OTableComponent.prototype.insertRecord = function (recordData, sqlTypes) {
        if (!this.checkEnabledActionPermission(PermissionsUtils.ACTION_INSERT)) {
            return undefined;
        }
        if (!Util.isDefined(sqlTypes)) {
            var allSqlTypes_1 = this.getSqlTypes();
            sqlTypes = {};
            Object.keys(recordData).forEach(function (key) {
                sqlTypes[key] = allSqlTypes_1[key];
            });
        }
        return this.daoTable.insertQuery(recordData, sqlTypes);
    };
    OTableComponent.prototype.updateRecord = function (filter, updateData, sqlTypes) {
        if (!this.checkEnabledActionPermission(PermissionsUtils.ACTION_UPDATE)) {
            return of(this.dataSource.data);
        }
        var sqlTypesArg = sqlTypes || {};
        if (!Util.isDefined(sqlTypes)) {
            var allSqlTypes_2 = this.getSqlTypes();
            Object.keys(filter).forEach(function (key) {
                sqlTypesArg[key] = allSqlTypes_2[key];
            });
            Object.keys(updateData).forEach(function (key) {
                sqlTypesArg[key] = allSqlTypes_2[key];
            });
        }
        return this.daoTable.updateQuery(filter, updateData, sqlTypesArg);
    };
    OTableComponent.prototype.getDataArray = function () {
        return this.daoTable.data;
    };
    OTableComponent.prototype.setDataArray = function (data) {
        if (this.daoTable) {
            this.pageable = false;
            this.staticData = data;
            this.daoTable.usingStaticData = true;
            this.daoTable.setDataArray(this.staticData);
        }
    };
    OTableComponent.prototype.deleteLocalItems = function () {
        var dataArray = this.getDataArray();
        var selectedItems = this.getSelectedItems();
        for (var i = 0; i < selectedItems.length; i++) {
            for (var j = dataArray.length - 1; j >= 0; --j) {
                if (Util.equals(selectedItems[i], dataArray[j])) {
                    dataArray.splice(j, 1);
                    break;
                }
            }
        }
        this.clearSelection();
        this.setDataArray(dataArray);
    };
    OTableComponent.prototype.isColumnSortActive = function (column) {
        var found = this.sortColArray.find(function (sortC) { return sortC.columnName === column.attr; });
        return found !== undefined;
    };
    OTableComponent.prototype.isColumnDescSortActive = function (column) {
        var found = this.sortColArray.find(function (sortC) { return sortC.columnName === column.attr && !sortC.ascendent; });
        return found !== undefined;
    };
    OTableComponent.prototype.hasTabGroupChangeSubscription = function () {
        return this.tabGroupChangeSubscription !== undefined;
    };
    OTableComponent.prototype.isEmpty = function (value) {
        return !Util.isDefined(value) || ((typeof value === 'string') && !value);
    };
    OTableComponent.prototype.setFiltersConfiguration = function (conf) {
        var _this = this;
        if (Util.isDefined(this.filterCaseSensitive) && this.state.hasOwnProperty('initial-configuration') &&
            this.state['initial-configuration'].hasOwnProperty('filter-case-sensitive') &&
            this.filterCaseSensitive === conf['initial-configuration']['filter-case-sensitive']) {
            this.filterCaseSensitive = conf.hasOwnProperty('filter-case-sensitive') ? conf['filter-case-sensitive'] : this.filterCaseSensitive;
        }
        var storedColumnFilters = this.oTableStorage.getStoredColumnsFilters(conf);
        this.showFilterByColumnIcon = storedColumnFilters.length > 0;
        if (this.oTableMenu && this.oTableMenu.columnFilterOption) {
            this.oTableMenu.columnFilterOption.setActive(this.showFilterByColumnIcon);
        }
        if (this.oTableColumnsFilterComponent) {
            this.dataSource.initializeColumnsFilters(storedColumnFilters);
        }
        if (this.oTableQuickFilterComponent) {
            this.oTableQuickFilterComponent.setValue(conf['filter']);
            var storedColumnsData = conf['oColumns'] || [];
            storedColumnsData.forEach(function (oColData) {
                var oCol = _this.getOColumn(oColData.attr);
                if (oCol) {
                    if (oColData.hasOwnProperty('searching')) {
                        oCol.searching = oColData.searching;
                    }
                }
            });
        }
    };
    OTableComponent.prototype.onStoreConfigurationClicked = function () {
        if (this.oTableMenu) {
            this.oTableMenu.onStoreConfigurationClicked();
        }
    };
    OTableComponent.prototype.onApplyConfigurationClicked = function () {
        if (this.oTableMenu) {
            this.oTableMenu.onApplyConfigurationClicked();
        }
    };
    OTableComponent.prototype.applyDefaultConfiguration = function () {
        var _this = this;
        this.oTableStorage.reset();
        this.initializeParams();
        this.parseVisibleColumns();
        this._oTableOptions.columns.sort(function (a, b) { return _this.visibleColArray.indexOf(a.attr) - _this.visibleColArray.indexOf(b.attr); });
        this.insideTabBugWorkaround();
        this.onReinitialize.emit(null);
        this.clearFilters(false);
        this.reloadData();
    };
    OTableComponent.prototype.applyConfiguration = function (configurationName) {
        var _this = this;
        var storedConfiguration = this.oTableStorage.getStoredConfiguration(configurationName);
        if (storedConfiguration) {
            var properties = storedConfiguration[OTableStorage.STORED_PROPERTIES_KEY] || [];
            var conf_1 = storedConfiguration[OTableStorage.STORED_CONFIGURATION_KEY];
            properties.forEach(function (property) {
                switch (property) {
                    case 'sort':
                        _this.state['sort-columns'] = conf_1['sort-columns'];
                        _this.parseSortColumns();
                        break;
                    case 'columns-display':
                        _this.state['oColumns-display'] = conf_1['oColumns-display'];
                        _this.parseVisibleColumns();
                        _this.state['select-column-visible'] = conf_1['select-column-visible'];
                        _this.initializeCheckboxColumn();
                        break;
                    case 'quick-filter':
                    case 'columns-filter':
                        _this.setFiltersConfiguration(conf_1);
                        break;
                    case 'page':
                        _this.state['currentPage'] = conf_1['currentPage'];
                        _this.currentPage = conf_1['currentPage'];
                        if (_this.pageable) {
                            _this.state['totalQueryRecordsNumber'] = conf_1['totalQueryRecordsNumber'];
                            _this.state['queryRecordOffset'] = conf_1['queryRecordOffset'];
                        }
                        _this.queryRows = conf_1['query-rows'];
                        break;
                }
            });
            this.reloadData();
        }
    };
    OTableComponent.prototype.getTitleAlignClass = function (oCol) {
        var align;
        var hasTitleAlign = Util.isDefined(oCol.definition) && Util.isDefined(oCol.definition.titleAlign);
        var autoAlign = (this.autoAlignTitles && !hasTitleAlign) || (hasTitleAlign && oCol.definition.titleAlign === Codes.COLUMN_TITLE_ALIGN_AUTO);
        if (!autoAlign) {
            return oCol.getTitleAlignClass();
        }
        switch (oCol.type) {
            case 'image':
            case 'date':
            case 'action':
            case 'boolean':
                align = Codes.COLUMN_TITLE_ALIGN_CENTER;
                break;
            case 'currency':
            case 'integer':
            case 'real':
            case 'percentage':
                align = Codes.COLUMN_TITLE_ALIGN_END;
                break;
            case 'service':
            default:
                align = Codes.COLUMN_TITLE_ALIGN_START;
                break;
        }
        return align;
    };
    OTableComponent.prototype.getCellAlignClass = function (column) {
        return Util.isDefined(column.definition) && Util.isDefined(column.definition.contentAlign) ? 'o-' + column.definition.contentAlign : '';
    };
    OTableComponent.prototype.onTableScroll = function (e) {
        if (this.hasScrollableContainer()) {
            var tableViewHeight = e.target.offsetHeight;
            var tableScrollHeight = e.target.scrollHeight;
            var scrollLocation = e.target.scrollTop;
            var buffer = 100;
            var limit_SCROLLVIRTUAL = tableScrollHeight - tableViewHeight - buffer;
            if (scrollLocation > limit_SCROLLVIRTUAL) {
                this.getDataScrollable();
            }
        }
    };
    OTableComponent.prototype.getDataScrollable = function () {
        var pageVirtualBefore = this.pageScrollVirtual;
        var pageVirtualEnd = Math.ceil(this.dataSource.resultsLength / OTableComponent.LIMIT_SCROLLVIRTUAL);
        if (pageVirtualEnd !== this.pageScrollVirtual) {
            this.pageScrollVirtual++;
        }
        if (pageVirtualBefore !== this.pageScrollVirtual) {
            this.loadingScrollSubject.next(true);
            this.dataSource.loadDataScrollable = this.pageScrollVirtual;
        }
    };
    OTableComponent.prototype.hasScrollableContainer = function () {
        return this.dataSource && !this.paginationControls && !this.pageable;
    };
    OTableComponent.prototype.addDefaultRowButtons = function () {
        if (this.editButtonInRow) {
            this.addButtonInRow('editButtonInRow');
        }
        if (this.detailButtonInRow) {
            this.addButtonInRow('detailButtonInRow');
        }
    };
    OTableComponent.prototype.addButtonInRow = function (name) {
        var colDef = new OColumn(name, this);
        colDef.type = name;
        colDef.visible = true;
        colDef.searchable = false;
        colDef.orderable = false;
        colDef.resizable = false;
        colDef.title = undefined;
        colDef.width = '48px';
        this.pushOColumnDefinition(colDef);
        this._oTableOptions.visibleColumns.push(name);
    };
    Object.defineProperty(OTableComponent.prototype, "headerHeight", {
        get: function () {
            var height = 0;
            if (this.tableHeaderEl && this.tableHeaderEl.nativeElement) {
                height += this.tableHeaderEl.nativeElement.offsetHeight;
            }
            if (this.tableToolbarEl && this.tableToolbarEl.nativeElement) {
                height += this.tableToolbarEl.nativeElement.offsetHeight;
            }
            return height;
        },
        enumerable: true,
        configurable: true
    });
    OTableComponent.prototype.isDetailMode = function () {
        return this.detailMode !== Codes.DETAIL_MODE_NONE;
    };
    OTableComponent.prototype.copyAll = function () {
        Util.copyToClipboard(JSON.stringify(this.getRenderedValue()));
    };
    OTableComponent.prototype.copySelection = function () {
        var selectedItems = this.dataSource.getRenderedData(this.getSelectedItems());
        Util.copyToClipboard(JSON.stringify(selectedItems));
    };
    OTableComponent.prototype.viewDetail = function (item) {
        if (!this.checkEnabledActionPermission('detail')) {
            return;
        }
        _super.prototype.viewDetail.call(this, item);
    };
    OTableComponent.prototype.editDetail = function (item) {
        if (!this.checkEnabledActionPermission('edit')) {
            return;
        }
        _super.prototype.editDetail.call(this, item);
    };
    OTableComponent.prototype.getOColumnFromTh = function (th) {
        var result;
        var classList = [].slice.call(th.classList);
        var columnClass = classList.find(function (className) { return (className.startsWith('mat-column-')); });
        if (Util.isDefined(columnClass)) {
            result = this.getOColumn(columnClass.substr('mat-column-'.length));
        }
        return result;
    };
    OTableComponent.prototype.getColumnInsertable = function (name) {
        return name + this.getSuffixColumnInsertable();
    };
    OTableComponent.prototype.isRowSelected = function (row) {
        return !this.isSelectionModeNone() && this.selection.isSelected(row);
    };
    OTableComponent.prototype.getColumnsWidthFromDOM = function () {
        var _this = this;
        if (Util.isDefined(this.tableHeaderEl)) {
            [].slice.call(this.tableHeaderEl.nativeElement.children).forEach(function (thEl) {
                var oCol = _this.getOColumnFromTh(thEl);
                if (Util.isDefined(oCol) && thEl.clientWidth > 0 && oCol.DOMWidth !== thEl.clientWidth) {
                    oCol.DOMWidth = thEl.clientWidth;
                }
            });
        }
    };
    OTableComponent.prototype.refreshColumnsWidth = function () {
        var _this = this;
        this.oTableOptions.columns.filter(function (c) { return c.visible; }).forEach(function (c) {
            c.DOMWidth = undefined;
        });
        this.cd.detectChanges();
        setTimeout(function () {
            _this.getColumnsWidthFromDOM();
            _this.oTableOptions.columns.filter(function (c) { return c.visible; }).forEach(function (c) {
                if (Util.isDefined(c.definition) && Util.isDefined(c.definition.width)) {
                    c.width = c.definition.width;
                }
                c.getRenderWidth();
            });
            _this.cd.detectChanges();
        }, 0);
    };
    OTableComponent.DEFAULT_INPUTS_O_TABLE = DEFAULT_INPUTS_O_TABLE;
    OTableComponent.DEFAULT_OUTPUTS_O_TABLE = DEFAULT_OUTPUTS_O_TABLE;
    OTableComponent.DEFAULT_BASE_SIZE_SPINNER = 100;
    OTableComponent.FIRST_LAST_CELL_PADDING = 24;
    OTableComponent.DEFAULT_COLUMN_MIN_WIDTH = 80;
    OTableComponent.NAME_COLUMN_SELECT = NAME_COLUMN_SELECT;
    OTableComponent.LIMIT_SCROLLVIRTUAL = 50;
    OTableComponent.decorators = [
        { type: Component, args: [{
                    moduleId: module.id,
                    selector: 'o-table',
                    template: "\n    <div class=\"o-table-container\" fxLayout=\"column\" fxLayoutAlign=\"start stretch\"\n      [style.display]=\"isVisible()? '' : 'none'\" (scroll)=\"onTableScroll($event)\" [class.block-events]=\"showLoading | async\"\n      [class.o-scrollable-container]=\"hasScrollableContainer()\">\n      <div #tableToolbar *ngIf=\"hasControls()\" class=\"toolbar\">\n        <div fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n          <o-table-buttons #tableButtons [insert-button]=\"insertButton\" [refresh-button]=\"refreshButton\"\n            [delete-button]=\"showDeleteButton\">\n            <ng-content select=\"o-table-button\"></ng-content>\n          </o-table-buttons>\n          <div fxLayout fxFlex>\n            <span *ngIf=\"showTitle\" class=\"table-title\" fxFlex>{{ title | oTranslate }}</span>\n          </div>\n          <o-table-quickfilter *ngIf=\"quickFilter\" (onChange)=\"reloadPaginatedDataFromStart()\"></o-table-quickfilter>\n          <button type=\"button\" *ngIf=\"showTableMenuButton\" mat-icon-button class=\"o-table-menu-button\"\n            [matMenuTriggerFor]=\"tableMenu.matMenu\" (click)=\"$event.stopPropagation()\">\n            <mat-icon svgIcon=\"ontimize:more_vert\"></mat-icon>\n          </button>\n          <o-table-menu #tableMenu [select-all-checkbox]=\"selectAllCheckbox\" [export-button]=\"exportButton\"\n            [columns-visibility-button]=\"columnsVisibilityButton\">\n            <ng-content select=\"o-table-option\"></ng-content>\n          </o-table-menu>\n        </div>\n      </div>\n\n      <div #tableBody class=\"o-table-body o-scroll\" [class.horizontal-scroll]=\"horizontalScroll\"\n        [class.scrolled]=\"horizontalScrolled\">\n        <div class=\"o-table-overflow o-scroll\">\n          <table mat-table #table [trackBy]=\"getTrackByFunction()\" [dataSource]=\"dataSource\" oMatSort\n            [ngClass]=\"rowHeightObservable | async\" (scroll)=\"onTableScroll($event)\"\n            (cdkObserveContent)=\"projectContentChanged()\" oTableExpandedFooter>\n\n            <!--Checkbox Column -->\n            <ng-container [matColumnDef]=\"oTableOptions.selectColumn.name\" *ngIf=\"oTableOptions.selectColumn.visible\">\n              <th mat-header-cell *matHeaderCellDef>\n                <mat-checkbox (click)=\"$event.stopPropagation()\" (change)=\"masterToggle($event)\" [checked]=\"isAllSelected()\"\n                  [indeterminate]=\"selection.hasValue() && !isAllSelected()\"></mat-checkbox>\n              </th>\n              <td mat-cell *matCellDef=\"let row\">\n                <mat-checkbox name=\"id[]\" (click)=\"$event.stopPropagation()\" (change)=\"selectionCheckboxToggle($event, row)\"\n                  [checked]=\"selection.isSelected(row)\"> </mat-checkbox>\n              </td>\n            </ng-container>\n\n            <!-- Generic column definition -->\n            <ng-container *ngFor=\"let column of oTableOptions.columns\" [matColumnDef]=\"column.name\">\n              <!--Define header-cell-->\n\n              <th mat-header-cell *matHeaderCellDef [ngClass]=\"getTitleAlignClass(column)\"\n                [style.width]=\"column.getRenderWidth()\" [class.resizable]=\"resizable\">\n\n                <mat-icon *ngIf=\"isModeColumnFilterable(column)\" class=\"column-filter-icon\"\n                  [class.active]=\"isColumnFilterActive(column)\" (click)=\"openColumnFilterDialog(column, $event)\"\n                  svgIcon=\"ontimize:filter_list\">\n                </mat-icon>\n\n                <ng-container *ngIf=\"column.orderable\">\n                  <span o-mat-sort-header>{{ column.title | oTranslate }}</span>\n                </ng-container>\n                <ng-container *ngIf=\"!column.orderable\">\n                  <span class=\"header-title-container\">{{ column.title | oTranslate }}</span>\n                </ng-container>\n\n                <o-table-column-resizer *ngIf=\"resizable\" [column]=\"column\"></o-table-column-resizer>\n\n              </th>\n\n              <!--Define mat-cell-->\n              <td mat-cell *matCellDef=\"let row\" [ngClass]=\"[column.className, getCellAlignClass(column)]\"\n                (click)=\"handleCellClick(column, row, $event)\" (dblclick)=\"handleCellDoubleClick(column, row, $event)\"\n                [class.empty-cell]=\"isEmpty(row[column.name])\" [matTooltipDisabled]=\"!column.hasTooltip()\"\n                [matTooltip]=\"column.getTooltip(row)\" matTooltipPosition=\"below\" matTooltipShowDelay=\"750\"\n                matTooltipClass=\"o-table-cell-tooltip\" [class.o-mat-cell-multiline]=\"(column.isMultiline | async)\"\n                [oContextMenu]=\"tableContextMenu\" [oContextMenuData]=\"{ cellName:column.name, rowValue:row}\">\n\n                <ng-container *ngIf=\"usePlainRender(column, row); else cellRender\">\n                  {{ row[column.name] }}\n                </ng-container>\n\n                <ng-template #cellRender *ngIf=\"useCellRenderer(column, row); else cellEditor\"\n                  [ngTemplateOutlet]=\"column.renderer.templateref\"\n                  [ngTemplateOutletContext]=\"{ cellvalue: row[column.name], rowvalue:row }\">\n                </ng-template>\n\n                <ng-template #cellEditor *ngIf=\"useCellEditor(column, row)\" [ngTemplateOutlet]=\"column.editor.templateref\"\n                  [ngTemplateOutletContext]=\"{ cellvalue: row[column.name], rowvalue:row }\">\n                </ng-template>\n\n                <ng-container *ngIf=\"useDetailButton(column)\">\n                  <div fxLayoutAlign=\"center center\" class=\"o-action-cell-renderer\"\n                    (click)=\"onDetailButtonClick(column, row, $event)\">\n                    <mat-icon>{{ getDetailButtonIcon(column) }}</mat-icon>\n                  </div>\n                </ng-container>\n              </td>\n              <!--Define mat-footer-cell-->\n              <ng-container *ngIf=\"showTotals | async\">\n                <td mat-footer-cell *matFooterCellDef [ngClass]=\"column.className\">\n                  <div class=\"title\" *ngIf=\"column.aggregate && column.aggregate.title\">\n                    {{ column.aggregate.title | oTranslate }}\n                  </div>\n                  <ng-container *ngIf=\"!column.renderer\">\n                    {{ dataSource.getAggregateData(column) }}\n                  </ng-container>\n                  <ng-template *ngIf=\"column.renderer && column.aggregate\" [ngTemplateOutlet]=\"column.renderer.templateref\"\n                    [ngTemplateOutletContext]=\"{cellvalue: dataSource.getAggregateData(column)}\"></ng-template>\n                </td>\n              </ng-container>\n\n            </ng-container>\n\n            <!--FOOTER-INSERTABLE-->\n            <ng-container *ngIf=\"showLastInsertableRow && oTableInsertableRowComponent\">\n              <ng-container [matColumnDef]=\"oTableOptions.selectColumn.name + getSuffixColumnInsertable()\"\n                *ngIf=\"oTableOptions.selectColumn.visible\">\n                <td mat-footer-cell *matFooterCellDef>\n                </td>\n              </ng-container>\n              <ng-container *ngFor=\"let column of oTableOptions.columns\"\n                [matColumnDef]=\"column.name+ getSuffixColumnInsertable()\">\n\n                <td mat-footer-cell *matFooterCellDef [ngClass]=\"column.className\">\n                  <ng-container\n                    *ngIf=\"oTableInsertableRowComponent.isColumnInsertable(column) && !oTableInsertableRowComponent.useCellEditor(column)\">\n                    <mat-form-field class=\"insertable-form-field\" [hideRequiredMarker]=\"false\" floatLabel=\"never\">\n                      <input matInput type=\"text\" [placeholder]=\"oTableInsertableRowComponent.getPlaceholder(column)\"\n                        [id]=\"column.attr\" [formControl]=\"oTableInsertableRowComponent.getControl(column)\"\n                        [required]=\"oTableInsertableRowComponent.isColumnRequired(column)\">\n                      <mat-error *ngIf=\"oTableInsertableRowComponent.columnHasError(column, 'required')\">\n                        {{ 'FORM_VALIDATION.REQUIRED' | oTranslate }}\n                      </mat-error>\n                    </mat-form-field>\n                  </ng-container>\n\n                  <ng-container\n                    *ngIf=\"oTableInsertableRowComponent.isColumnInsertable(column) && oTableInsertableRowComponent.useCellEditor(column)\">\n                    <ng-template [ngTemplateOutlet]=\"oTableInsertableRowComponent.columnEditors[column.attr].templateref\"\n                      [ngTemplateOutletContext]=\"{ rowvalue: oTableInsertableRowComponent.rowData }\">\n                    </ng-template>\n                  </ng-container>\n                </td>\n              </ng-container>\n\n            </ng-container>\n\n            <ng-container *ngIf=\"showFirstInsertableRow && oTableInsertableRowComponent\">\n              <ng-container [matColumnDef]=\"getColumnInsertable(oTableOptions.selectColumn.name)\"\n                *ngIf=\"oTableOptions.selectColumn.visible\">\n                <td mat-header-cell *matHeaderCellDef>\n                </td>\n              </ng-container>\n              <ng-container *ngFor=\"let column of oTableOptions.columns\" [matColumnDef]=\"getColumnInsertable(column.name)\">\n\n                <td mat-header-cell *matHeaderCellDef [ngClass]=\"column.className\">\n                  <ng-container\n                    *ngIf=\"oTableInsertableRowComponent.isColumnInsertable(column) && !oTableInsertableRowComponent.useCellEditor(column)\">\n                    <mat-form-field class=\"insertable-form-field\" [hideRequiredMarker]=\"false\" floatLabel=\"never\">\n                      <input matInput type=\"text\" [placeholder]=\"oTableInsertableRowComponent.getPlaceholder(column)\"\n                        [id]=\"column.attr\" [formControl]=\"oTableInsertableRowComponent.getControl(column)\"\n                        [required]=\"oTableInsertableRowComponent.isColumnRequired(column)\">\n                      <mat-error *ngIf=\"oTableInsertableRowComponent.columnHasError(column, 'required')\">\n                        {{ 'FORM_VALIDATION.REQUIRED' | oTranslate }}\n                      </mat-error>\n                    </mat-form-field>\n                  </ng-container>\n\n                  <ng-container\n                    *ngIf=\"oTableInsertableRowComponent.isColumnInsertable(column) && oTableInsertableRowComponent.useCellEditor(column)\">\n                    <ng-template [ngTemplateOutlet]=\"oTableInsertableRowComponent.columnEditors[column.attr].templateref\"\n                      [ngTemplateOutletContext]=\"{ rowvalue: oTableInsertableRowComponent.rowData }\">\n                    </ng-template>\n                  </ng-container>\n                </td>\n              </ng-container>\n\n            </ng-container>\n\n\n            <tr #tableHeader mat-header-row *matHeaderRowDef=\"oTableOptions.visibleColumns; sticky: fixedHeader\"></tr>\n\n            <tr mat-row oTableRow *matRowDef=\"let row; columns: oTableOptions.visibleColumns;\"\n              (click)=\"handleClick(row, $event)\" (dblclick)=\"handleDoubleClick(row, $event)\"\n              [class.selected]=\"isRowSelected(row)\">\n            </tr>\n            <ng-container *ngIf=\"showLastInsertableRow\">\n              <tr mat-footer-row *matFooterRowDef=\"oTableOptions.columnsInsertables; sticky: true\"\n                (keyup)=\"oTableInsertableRowComponent.handleKeyboardEvent($event)\" class=\"o-table-insertable\"></tr>\n            </ng-container>\n            <ng-container *ngIf=\"showFirstInsertableRow\">\n              <tr mat-header-row *matHeaderRowDef=\"oTableOptions.columnsInsertables; sticky: true\"\n                (keyup)=\"oTableInsertableRowComponent.handleKeyboardEvent($event)\" class=\"o-table-insertable\"> </tr>\n            </ng-container>\n            <ng-container *ngIf=\"showTotals | async\">\n              <tr mat-footer-row *matFooterRowDef=\"oTableOptions.visibleColumns; sticky: true\" class=\"o-table-aggregate\">\n              </tr>\n            </ng-container>\n          </table>\n        </div>\n      </div>\n\n      <!--TABLE PAGINATOR-->\n      <mat-paginator *ngIf=\"paginator\" #matpaginator [length]=\"dataSource?.resultsLength\" [pageIndex]=\"paginator.pageIndex\"\n        [pageSize]=\"queryRows\" [pageSizeOptions]=\"paginator.pageSizeOptions\" (page)=\"onChangePage($event)\"\n        [showFirstLastButtons]=\"paginator.showFirstLastButtons\">\n      </mat-paginator>\n\n      <!--LOADING-->\n      <div #spinnerContainer *ngIf=\"showLoading | async\" fxLayout=\"column\" fxLayoutAlign=\"center center\"\n        [ngStyle]=\"{'top.px': headerHeight}\" class=\"spinner-container\"\n        [class.spinner-container-scrollable]=\"loadingScroll | async\">\n        <mat-progress-spinner mode=\"indeterminate\" strokeWidth=\"3\" [diameter]=\"diameterSpinner\"></mat-progress-spinner>\n      </div>\n\n      <!-- Disable blocker -->\n      <div *ngIf=\"!enabled\" class=\"o-table-disabled-blocker\"></div>\n    </div>\n  ",
                    styles: ["\n    .o-table{height:100%;max-height:100%}.o-table.o-table-disabled{opacity:.4}.o-table .o-table-container{height:100%;display:flex;flex-direction:column;flex-wrap:nowrap;justify-content:flex-start;align-items:flex-start;align-content:stretch;position:relative;margin:0 .5%}.o-table .o-table-container .o-table-body{display:flex;flex:1 1 auto}.o-table .o-table-container .o-table-body .o-table-overflow{overflow-y:auto}.o-table .o-table-container .o-table-body thead .mat-header-row th:last-child .o-table-column-resizer{display:none}.o-table .o-table-container.block-events{pointer-events:none}.o-table .o-table-container.block-events>.toolbar,.o-table .o-table-container.block-events>.o-table-body .mat-header-row{opacity:.75}.o-table .o-table-container .toolbar{height:40px}.o-table .o-table-container .toolbar .buttons{margin:0 10px 0 4px}.o-table .o-table-container .toolbar .table-title{font-size:18px;font-weight:400;text-align:center}.o-table .o-table-container .o-table-body{max-width:100%;height:100%;overflow:hidden;position:relative}.o-table .o-table-container .o-table-body:not(.horizontal-scroll){overflow-x:hidden}.o-table .o-table-container .o-table-body .table-title{font-size:18px;font-weight:400;text-align:center}.o-table .o-table-container .o-table-body .spinner-container{position:absolute;top:0;left:0;right:0;bottom:0;z-index:500;visibility:visible;opacity:1;-moz-transition:opacity .25s linear;-webkit-transition:opacity .25s linear;transition:opacity .25s linear}.o-table .o-table-container .o-table-body.horizontal-scroll{overflow-x:auto;padding-bottom:16px}.o-table .o-table-container .o-table-body.horizontal-scroll .mat-header-cell{width:150px}.o-table .o-table-container .o-table-body .o-table-no-results{cursor:default;text-align:center}.o-table .o-table-container .o-table-body .o-table-no-results td{text-align:center}.o-table .o-table-container .mat-table{table-layout:fixed;width:100%}.o-table .o-table-container .mat-table.small .column-filter-icon,.o-table .o-table-container .mat-table.small .mat-sort-header-arrow{margin-top:2px}.o-table .o-table-container .mat-table.small .mat-header-row .mat-checkbox-inner-container,.o-table .o-table-container .mat-table.small .mat-row .mat-checkbox-inner-container{height:16px;width:16px}.o-table .o-table-container .mat-table.small .mat-header-row .mat-checkbox-inner-container .mat-checkbox-checkmark-path,.o-table .o-table-container .mat-table.small .mat-row .mat-checkbox-inner-container .mat-checkbox-checkmark-path{width:2.13333px}.o-table .o-table-container .mat-table.small .mat-header-row .mat-checkbox-inner-container .mat-checkbox-mixedmark,.o-table .o-table-container .mat-table.small .mat-row .mat-checkbox-inner-container .mat-checkbox-mixedmark{height:2px}.o-table .o-table-container .mat-table.small .mat-header-row .mat-cell .image-avatar,.o-table .o-table-container .mat-table.small .mat-header-row .mat-header-cell .image-avatar,.o-table .o-table-container .mat-table.small .mat-row .mat-cell .image-avatar,.o-table .o-table-container .mat-table.small .mat-row .mat-header-cell .image-avatar{width:22px;height:22px}.o-table .o-table-container .mat-table.medium .column-filter-icon{margin-top:4px}.o-table .o-table-container .mat-table.medium .mat-sort-header-arrow{margin-top:6px}.o-table .o-table-container .mat-table.medium .mat-header-row .mat-cell .image-avatar,.o-table .o-table-container .mat-table.medium .mat-header-row .mat-header-cell .image-avatar,.o-table .o-table-container .mat-table.medium .mat-row .mat-cell .image-avatar,.o-table .o-table-container .mat-table.medium .mat-row .mat-header-cell .image-avatar{width:28px;height:28px}.o-table .o-table-container .mat-table.medium .mat-header-row .mat-checkbox-inner-container,.o-table .o-table-container .mat-table.medium .mat-row .mat-checkbox-inner-container{height:18px;width:18px}.o-table .o-table-container .mat-table.medium .mat-header-row .mat-checkbox-inner-container .mat-checkbox-checkmark-path,.o-table .o-table-container .mat-table.medium .mat-row .mat-checkbox-inner-container .mat-checkbox-checkmark-path{width:2.4px}.o-table .o-table-container .mat-table.medium .mat-header-row .mat-checkbox-inner-container .mat-checkbox-mixedmark,.o-table .o-table-container .mat-table.medium .mat-row .mat-checkbox-inner-container .mat-checkbox-mixedmark{height:2px}.o-table .o-table-container .mat-table.large .column-filter-icon,.o-table .o-table-container .mat-table.large .mat-sort-header-arrow{margin-top:8px}.o-table .o-table-container .mat-table .mat-row{box-sizing:border-box;transition:background-color .2s;-webkit-touch-callout:none;-webkit-user-select:none;-khtml-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.o-table .o-table-container .mat-table .mat-row .mat-cell{padding:0 12px;overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.o-table .o-table-container .mat-table .mat-row .mat-cell:not(.o-column-image):first-of-type{padding-left:24px}.o-table .o-table-container .mat-table .mat-row .mat-cell:last-of-type{padding-right:24px}.o-table .o-table-container .mat-table .mat-row .mat-cell.empty-cell{min-height:16px}.o-table .o-table-container .mat-table .mat-row .mat-cell .action-cell-renderer{cursor:pointer}.o-table .o-table-container .mat-table .mat-row .mat-cell.o-start{text-align:start}.o-table .o-table-container .mat-table .mat-row .mat-cell.o-center{text-align:center}.o-table .o-table-container .mat-table .mat-row .mat-cell.o-end{text-align:end}.o-table .o-table-container .mat-table .mat-row .mat-cell *{vertical-align:middle}.o-table .o-table-container .mat-table .mat-row .mat-cell.o-mat-cell-multiline{overflow:initial;white-space:normal;text-overflow:unset}.o-table .o-table-container .mat-table .mat-row .mat-cell.o-mat-cell-multiline:not(.mat-header-cell){padding:6px 12px}.o-table .o-table-container .mat-table .mat-row .mat-cell .image-avatar{width:34px;height:34px;margin:1px auto;overflow:hidden;border-radius:50%;position:relative;z-index:1}.o-table .o-table-container .mat-table .mat-row .mat-cell .image-avatar img{position:absolute;top:50%;left:50%;-webkit-transform:translate(-50%, -50%);-moz-transform:translate(-50%, -50%);-ms-transform:translate(-50%, -50%);-o-transform:translate(-50%, -50%);transform:translate(-50%, -50%);width:100%;max-width:inherit;max-height:inherit}.o-table .o-table-container .mat-table .o-action-cell-renderer{display:inline-block;cursor:pointer}.o-table .o-table-container .mat-table .mat-header-cell{overflow:hidden;position:relative;box-sizing:border-box;padding:0 12px;vertical-align:middle}.o-table .o-table-container .mat-table .mat-header-cell.resizable{padding-right:24px}.o-table .o-table-container .mat-table .mat-header-cell:first-of-type,.o-table .o-table-container .mat-table .mat-header-cell:last-of-type{padding-left:0;padding-right:0}.o-table .o-table-container .mat-table .mat-header-cell:not(.o-column-image){overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.o-table .o-table-container .mat-table .mat-header-cell.o-mat-cell-multiline{overflow:initial;white-space:normal;text-overflow:unset}.o-table .o-table-container .mat-table .mat-header-cell.o-mat-cell-multiline:not(.mat-header-cell){padding:6px 12px}.o-table .o-table-container .mat-table .mat-header-cell .column-filter-icon{cursor:pointer;float:left;font-size:20px;width:20px;height:20px;margin-right:2px;line-height:1}.o-table .o-table-container .mat-table .mat-header-cell .mat-sort-header-button{flex:1;display:block;place-content:center}.o-table .o-table-container .mat-table .mat-header-cell .mat-sort-header-arrow{position:absolute;right:0}.o-table .o-table-container .mat-table .mat-header-cell .header-title-container{cursor:default}.o-table .o-table-container .mat-table .mat-header-cell.resizable .mat-sort-header-arrow{margin-right:12px}.o-table .o-table-container .mat-table .mat-header-cell .header-title-container,.o-table .o-table-container .mat-table .mat-header-cell .mat-sort-header-button{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.o-table .o-table-container .mat-table .mat-header-cell.start,.o-table .o-table-container .mat-table .mat-header-cell.start .mat-sort-header-button{text-align:left}.o-table .o-table-container .mat-table .mat-header-cell.center,.o-table .o-table-container .mat-table .mat-header-cell.center .mat-sort-header-button{text-align:center}.o-table .o-table-container .mat-table .mat-header-cell.center [o-mat-sort-header] .mat-sort-header-button{padding-left:12px}.o-table .o-table-container .mat-table .mat-header-cell.end,.o-table .o-table-container .mat-table .mat-header-cell.end .mat-sort-header-button{text-align:right}.o-table .o-table-container .mat-table .mat-header-cell .mat-sort-header-container{padding-top:4px}.o-table .o-table-container .mat-table .mat-cell.mat-column-select,.o-table .o-table-container .mat-table .mat-header-cell.mat-column-select{width:18px;box-sizing:content-box;padding:0 0 0 24px;overflow:initial}.o-table .o-table-container .o-table-disabled-blocker{bottom:0;left:0;position:absolute;right:0;top:0;z-index:100}.o-table .spinner-container{position:absolute;top:0;left:0;right:0;bottom:0;z-index:500;visibility:visible;opacity:1;-moz-transition:opacity .25s linear;-webkit-transition:opacity .25s linear;transition:opacity .25s linear}.o-table .spinner-container-scrollable{position:relative}.o-table.o-table-fixed{display:flex}.o-table.o-table-fixed .o-table-container{display:flex;flex-direction:column}.o-table.o-table-fixed .o-table-body{display:flex;flex:1}.o-table.o-table-fixed .o-table-body .o-table-overflow{flex:1;overflow:auto}.mat-tooltip.o-table-cell-tooltip{word-wrap:break-word;max-height:64px;overflow:hidden;min-width:140px}\n  "],
                    providers: [
                        { provide: OntimizeService, useFactory: ɵ0, deps: [Injector] }
                    ],
                    inputs: DEFAULT_INPUTS_O_TABLE,
                    outputs: DEFAULT_OUTPUTS_O_TABLE,
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: {
                        '[class.o-table]': 'true',
                        '[class.ontimize-table]': 'true',
                        '[class.o-table-fixed]': 'fixedHeader',
                        '[class.o-table-disabled]': '!enabled',
                        '(document:click)': 'handleDOMClick($event)'
                    }
                },] },
    ];
    OTableComponent.ctorParameters = function () { return [
        { type: Injector },
        { type: ElementRef },
        { type: MatDialog },
        { type: OFormComponent, decorators: [{ type: Optional }, { type: Inject, args: [forwardRef(function () { return OFormComponent; }),] }] }
    ]; };
    OTableComponent.propDecorators = {
        matpaginator: [{ type: ViewChild, args: [MatPaginator,] }],
        sort: [{ type: ViewChild, args: [OMatSort,] }],
        sortHeaders: [{ type: ViewChildren, args: [OMatSortHeader,] }],
        spinnerContainer: [{ type: ViewChild, args: ['spinnerContainer', { read: ElementRef },] }],
        tableBodyEl: [{ type: ViewChild, args: ['tableBody',] }],
        tableHeaderEl: [{ type: ViewChild, args: ['tableHeader', { read: ElementRef },] }],
        tableToolbarEl: [{ type: ViewChild, args: ['tableToolbar', { read: ElementRef },] }],
        updateScrolledState: [{ type: HostListener, args: ['window:resize', ['$event'],] }],
        oTableMenu: [{ type: ViewChild, args: ['tableMenu',] }],
        tableOptions: [{ type: ContentChildren, args: [OTableOptionComponent,] }],
        oTableButtons: [{ type: ViewChild, args: ['tableButtons',] }],
        tableButtons: [{ type: ContentChildren, args: [OTableButtonComponent,] }],
        oTableExpandedFooter: [{ type: ViewChild, args: [OTableExpandedFooter,] }]
    };
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OTableComponent.prototype, "selectAllCheckbox", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OTableComponent.prototype, "exportButton", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OTableComponent.prototype, "columnsVisibilityButton", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OTableComponent.prototype, "showButtonsText", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], OTableComponent.prototype, "filterCaseSensitive", null);
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OTableComponent.prototype, "insertButton", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OTableComponent.prototype, "refreshButton", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OTableComponent.prototype, "deleteButton", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OTableComponent.prototype, "paginationControls", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OTableComponent.prototype, "fixedHeader", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OTableComponent.prototype, "showTitle", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OTableComponent.prototype, "horizontalScroll", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OTableComponent.prototype, "showPaginatorFirstLastButtons", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OTableComponent.prototype, "autoAlignTitles", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OTableComponent.prototype, "multipleSort", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OTableComponent.prototype, "orderable", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OTableComponent.prototype, "resizable", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OTableComponent.prototype, "keepSelectedItems", void 0);
    return OTableComponent;
}(OServiceComponent));
export { OTableComponent };
var OTableModule = (function () {
    function OTableModule() {
    }
    OTableModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        OTableComponent,
                        OTableColumnComponent,
                        OTableColumnCalculatedComponent,
                        OTableContextMenuComponent,
                        OTableRowDirective,
                        OTableExpandedFooter
                    ].concat(O_TABLE_CELL_RENDERERS, O_TABLE_CELL_EDITORS, O_TABLE_DIALOGS, O_TABLE_HEADER_COMPONENTS, O_TABLE_FOOTER_COMPONENTS),
                    imports: [
                        CommonModule,
                        OSharedModule,
                        CdkTableModule,
                        DndModule,
                        OContextMenuModule,
                        ObserversModule,
                        OMatSortModule,
                        NgxMaterialTimepickerModule
                    ],
                    exports: [
                        OTableComponent,
                        OTableColumnComponent,
                        CdkTableModule,
                        OTableColumnCalculatedComponent,
                        OTableContextMenuComponent,
                        OTableRowDirective,
                        OTableExpandedFooter,
                        OMatSortModule
                    ].concat(O_TABLE_HEADER_COMPONENTS, O_TABLE_CELL_RENDERERS, O_TABLE_CELL_EDITORS, O_TABLE_FOOTER_COMPONENTS),
                    entryComponents: [
                        OTableColumnAggregateComponent,
                        OTableContextMenuComponent
                    ].concat(O_TABLE_CELL_RENDERERS, O_TABLE_CELL_EDITORS, O_TABLE_DIALOGS),
                    providers: [{
                            provide: MatPaginatorIntl,
                            useClass: OTableMatPaginatorIntl
                        }]
                },] },
    ];
    return OTableModule;
}());
export { OTableModule };
export { ɵ0 };
//# sourceMappingURL=o-table.component.js.map