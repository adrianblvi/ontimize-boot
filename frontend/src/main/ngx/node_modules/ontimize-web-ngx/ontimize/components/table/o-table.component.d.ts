import { ElementRef, EventEmitter, Injector, OnDestroy, OnInit, QueryList } from '@angular/core';
import { MatCheckboxChange, MatDialog, MatMenu, MatPaginator, MatTab, MatTabGroup, PageEvent } from '@angular/material';
import { Observable, Subscription } from 'rxjs';
import { OPermissions, OTableMenuPermissions, OTablePermissions, SnackBarService } from '../../services';
import { OContextMenuComponent } from '../contextmenu/o-context-menu-components';
import { IExpression } from '../filter-expression.utils';
import { OFormComponent } from '../form/o-form.component';
import { OServiceComponent } from '../o-service-component.class';
import { ISQLOrder, OQueryDataArgs } from '../service.utils';
import { OperatorFunction, OTableColumnCalculatedComponent } from './column/calculated/o-table-column-calculated.component';
import { OBaseTableCellRenderer } from './column/cell-renderer/cell-renderer';
import { OColumnTooltip, OTableColumnComponent } from './column/o-table-column.component';
import { OTableFilterByColumnDataDialogComponent } from './extensions/dialog/o-table-dialog-components';
import { OColumnAggregate, OTablePaginatorComponent } from './extensions/footer/o-table-footer-components';
import { OTableButtonComponent, OTableButtonsComponent, OTableColumnsFilterComponent, OTableInsertableRowComponent, OTableMenuComponent, OTableOptionComponent, OTableQuickfilterComponent } from './extensions/header/o-table-header-components';
import { OTableStorage } from './extensions/o-table-storage.class';
import { OMatSort } from './extensions/sort/o-mat-sort';
import { OMatSortHeader } from './extensions/sort/o-mat-sort-header';
import { OTableExpandedFooter } from './o-table-expanded-footer.directive';
import { OTableDao } from './o-table.dao';
import { OTableDataSource } from './o-table.datasource';
export declare const NAME_COLUMN_SELECT = "select";
export declare const DEFAULT_INPUTS_O_TABLE: string[];
export declare const DEFAULT_OUTPUTS_O_TABLE: string[];
export declare class OColumn {
    attr: string;
    name: string;
    title: string;
    type: string;
    sqlType: number;
    className: string;
    orderable: boolean;
    _searchable: boolean;
    searching: boolean;
    visible: boolean;
    renderer: OBaseTableCellRenderer;
    editor: any;
    editing: boolean;
    _width: string;
    minWidth: string;
    maxWidth: string;
    aggregate: OColumnAggregate;
    calculate: string | OperatorFunction;
    definition: OTableColumnComponent;
    tooltip: OColumnTooltip;
    resizable: boolean;
    DOMWidth: number;
    private multilineSubject;
    isMultiline: Observable<boolean>;
    private _multiline;
    constructor(attr?: string, table?: OTableComponent, column?: OTableColumnComponent | OTableColumnCalculatedComponent);
    setDefaultProperties(table: OTableComponent): void;
    setColumnProperties(column: OTableColumnComponent | OTableColumnCalculatedComponent | any): void;
    searchable: boolean;
    multiline: boolean;
    hasTooltip(): boolean;
    getTooltip(rowData: any): any;
    getMinWidth(): string;
    getMinWidthValue(): number;
    getMaxWidthValue(): number;
    getRenderWidth(): string;
    width: string;
    getWidthToStore(): any;
    setWidth(val: number): void;
    getTitleAlignClass(): string;
}
export declare class OTableOptions {
    selectColumn: OColumn;
    columns: Array<OColumn>;
    _visibleColumns: Array<any>;
    filter: boolean;
    filterCaseSensitive: boolean;
    constructor();
    visibleColumns: Array<any>;
    readonly columnsInsertables: Array<string>;
}
export declare type QuickFilterFunction = (filter: string) => IExpression | Object;
export interface OTableInitializationOptions {
    entity?: string;
    service?: string;
    columns?: string;
    visibleColumns?: string;
    keys?: string;
    sortColumns?: string;
    parentKeys?: string;
}
export declare class OTableComponent extends OServiceComponent implements OnInit, OnDestroy {
    protected dialog: MatDialog;
    static DEFAULT_INPUTS_O_TABLE: string[];
    static DEFAULT_OUTPUTS_O_TABLE: string[];
    static DEFAULT_BASE_SIZE_SPINNER: number;
    static FIRST_LAST_CELL_PADDING: number;
    static DEFAULT_COLUMN_MIN_WIDTH: number;
    static NAME_COLUMN_SELECT: string;
    protected snackBarService: SnackBarService;
    paginator: OTablePaginatorComponent;
    matpaginator: MatPaginator;
    sort: OMatSort;
    protected sortHeaders: QueryList<OMatSortHeader>;
    spinnerContainer: ElementRef;
    readonly diameterSpinner: number;
    tableContextMenu: OContextMenuComponent;
    selectAllCheckbox: boolean;
    exportButton: boolean;
    columnsVisibilityButton: boolean;
    showButtonsText: boolean;
    protected _oTableOptions: OTableOptions;
    oTableOptions: OTableOptions;
    quickFilter: boolean;
    protected filterCaseSensitivePvt: boolean;
    filterCaseSensitive: boolean;
    insertButton: boolean;
    refreshButton: boolean;
    deleteButton: boolean;
    paginationControls: boolean;
    fixedHeader: boolean;
    showTitle: boolean;
    protected editionMode: string;
    protected selectionMode: string;
    horizontalScroll: boolean;
    showPaginatorFirstLastButtons: boolean;
    autoAlignTitles: boolean;
    multipleSort: boolean;
    orderable: boolean;
    resizable: boolean;
    protected _enabled: boolean;
    enabled: boolean;
    protected _selectAllCheckboxVisible: boolean;
    selectAllCheckboxVisible: boolean;
    keepSelectedItems: boolean;
    exportMode: string;
    daoTable: OTableDao | null;
    dataSource: OTableDataSource | null;
    protected visibleColumns: string;
    protected sortColumns: string;
    protected _visibleColArray: Array<string>;
    readonly originalVisibleColumns: string;
    readonly originalSortColumns: string;
    visibleColArray: Array<any>;
    sortColArray: Array<ISQLOrder>;
    protected tabGroupContainer: MatTabGroup;
    protected tabContainer: MatTab;
    tabGroupChangeSubscription: Subscription;
    protected pendingQuery: boolean;
    protected pendingQueryFilter: any;
    protected setStaticData: boolean;
    protected avoidQueryColumns: Array<any>;
    protected asyncLoadColumns: Array<any>;
    protected asyncLoadSubscriptions: Object;
    protected querySubscription: Subscription;
    protected contextMenuSubscription: Subscription;
    protected finishQuerySubscription: boolean;
    onClick: EventEmitter<any>;
    onDoubleClick: EventEmitter<any>;
    onRowSelected: EventEmitter<any>;
    onRowDeselected: EventEmitter<any>;
    onRowDeleted: EventEmitter<any>;
    onDataLoaded: EventEmitter<any>;
    onPaginatedDataLoaded: EventEmitter<any>;
    onReinitialize: EventEmitter<any>;
    onContentChange: EventEmitter<any>;
    protected selectionChangeSubscription: Subscription;
    oTableFilterByColumnDataDialogComponent: OTableFilterByColumnDataDialogComponent;
    oTableColumnsFilterComponent: OTableColumnsFilterComponent;
    showFilterByColumnIcon: boolean;
    private showTotalsSubject;
    showTotals: Observable<boolean>;
    private loadingSortingSubject;
    protected loadingSorting: Observable<boolean>;
    private loadingScrollSubject;
    loadingScroll: Observable<boolean>;
    oTableInsertableRowComponent: OTableInsertableRowComponent;
    showFirstInsertableRow: boolean;
    showLastInsertableRow: boolean;
    protected clickTimer: any;
    protected clickDelay: number;
    protected clickPrevent: boolean;
    protected editingCell: any;
    protected editingRow: any;
    protected _currentPage: number;
    currentPage: number;
    oTableQuickFilterComponent: OTableQuickfilterComponent;
    protected sortSubscription: Subscription;
    protected onRenderedDataChange: Subscription;
    protected previousRendererData: any;
    quickFilterCallback: QuickFilterFunction;
    protected tableBodyEl: ElementRef;
    tableHeaderEl: ElementRef;
    tableToolbarEl: ElementRef;
    horizontalScrolled: boolean;
    onUpdateScrolledState: EventEmitter<any>;
    rowWidth: any;
    oTableStorage: OTableStorage;
    storePaginationState: boolean;
    pageScrollVirtual: number;
    static LIMIT_SCROLLVIRTUAL: number;
    updateScrolledState(): void;
    protected permissions: OTablePermissions;
    matMenu: MatMenu;
    oTableMenu: OTableMenuComponent;
    tableOptions: QueryList<OTableOptionComponent>;
    oTableButtons: OTableButtonsComponent;
    tableButtons: QueryList<OTableButtonComponent>;
    oTableExpandedFooter: OTableExpandedFooter;
    constructor(injector: Injector, elRef: ElementRef, dialog: MatDialog, form: OFormComponent);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    getSuffixColumnInsertable(): string;
    getActionsPermissions(): OPermissions[];
    getMenuPermissions(): OTableMenuPermissions;
    getOColumnPermissions(attr: string): OPermissions;
    protected getActionPermissions(attr: string): OPermissions;
    protected checkEnabledActionPermission(attr: string): boolean;
    initialize(): any;
    protected initializeDao(): void;
    reinitialize(options: OTableInitializationOptions): void;
    protected initTableAfterViewInit(): void;
    destroy(): void;
    getDataToStore(): {
        'filter': string;
    };
    registerQuickFilter(arg: any): void;
    registerPagination(value: OTablePaginatorComponent): void;
    registerContextMenu(value: OContextMenuComponent): void;
    registerDefaultColumn(column: string): void;
    registerColumn(column: OTableColumnComponent | OTableColumnCalculatedComponent | any): void;
    protected pushOColumnDefinition(colDef: OColumn): void;
    protected refreshEditionModeWarn(): void;
    registerColumnAggregate(column: OColumnAggregate): void;
    parseVisibleColumns(): void;
    checkChangesVisibleColummnsInInitialConfiguration(stateCols: any): any;
    parseSortColumns(): void;
    initializeParams(): void;
    registerTabListener(): void;
    protected insideTabBugWorkaround(): void;
    registerSortListener(): void;
    protected onSortChange(sortArray: any[]): void;
    setDatasource(): void;
    protected registerDataSourceListeners(): void;
    readonly showLoading: Observable<boolean>;
    queryData(filter?: any, ovrrArgs?: OQueryDataArgs): void;
    protected isInsideInactiveTab(): boolean;
    getComponentFilter(existingFilter?: any): any;
    protected getQuickFilterExpression(): IExpression;
    protected getColumnFiltersExpression(): IExpression;
    updatePaginationInfo(queryRes: any): void;
    protected setData(data: any, sqlTypes: any): void;
    showDialogError(error: string, errorOptional?: string): void;
    projectContentChanged(): void;
    getAttributesValuesToQuery(): Array<string>;
    getQueryArguments(filter: Object, ovrrArgs?: OQueryDataArgs): Array<any>;
    getSqlTypesForFilter(filter: any): Object;
    onExportButtonClicked(): void;
    onChangeColumnsVisibilityClicked(): void;
    onMatTableContentChanged(): void;
    add(): void;
    remove(clearSelectedItems?: boolean): void;
    refresh(): void;
    showAndSelectAllCheckbox(): void;
    reloadPaginatedDataFromStart(): void;
    reloadData(): void;
    handleClick(item: any, $event?: any): void;
    doHandleClick(item: any, $event?: any): void;
    handleMultipleSelection(item: any): void;
    protected saveDataNavigationInLocalStorage(): void;
    handleDoubleClick(item: any, event?: any): void;
    readonly editionEnabled: boolean;
    handleDOMClick(event: any): void;
    handleCellClick(column: OColumn, row: any, event?: any): void;
    handleCellDoubleClick(column: OColumn, row: any, event?: any): void;
    protected activateColumnEdition(column: OColumn, row: any, event?: any): void;
    updateCellData(column: OColumn, data: any, saveChanges: boolean): Observable<any>;
    protected getKeysValues(): any[];
    onShowsSelects(event?: any): void;
    initializeCheckboxColumn(): void;
    protected updateSelectionColumnState(): void;
    isAllSelected(): boolean;
    masterToggle(event: MatCheckboxChange): void;
    selectAll(): void;
    selectionCheckboxToggle(event: MatCheckboxChange, row: any): void;
    selectedRow(row: any): void;
    readonly showDeleteButton: boolean;
    getTrackByFunction(): Function;
    queryRowAsyncData(rowIndex: number, rowData: any): void;
    getValue(): any[];
    getAllValues(): any[];
    getAllRenderedValues(): any[];
    getRenderedValue(): any[];
    getSqlTypes(): any;
    setOTableColumnsFilter(tableColumnsFilter: OTableColumnsFilterComponent): void;
    getStoredColumnsFilters(): any;
    onFilterByColumnClicked(): void;
    onStoreFilterClicked(): void;
    onLoadFilterClicked(): void;
    onClearFilterClicked(): void;
    clearFilters(triggerDatasourceUpdate?: boolean): void;
    isColumnFilterable(column: OColumn): boolean;
    isModeColumnFilterable(column: OColumn): boolean;
    isColumnFilterActive(column: OColumn): boolean;
    openColumnFilterDialog(column: OColumn, event: Event): void;
    readonly disableTableMenuButton: boolean;
    readonly showTableMenuButton: boolean;
    setOTableInsertableRow(tableInsertableRow: OTableInsertableRowComponent): void;
    clearSelectionAndEditing(): void;
    useDetailButton(column: OColumn): boolean;
    onDetailButtonClick(column: OColumn, row: any, event: any): void;
    getDetailButtonIcon(column: OColumn): string;
    usePlainRender(column: OColumn, row: any): boolean;
    useCellRenderer(column: OColumn, row: any): boolean;
    useCellEditor(column: OColumn, row: any): boolean;
    isSelectionModeMultiple(): boolean;
    isSelectionModeSingle(): boolean;
    isSelectionModeNone(): boolean;
    onChangePage(evt: PageEvent): void;
    getOColumn(attr: string): OColumn;
    insertRecord(recordData: any, sqlTypes?: Object): Observable<any>;
    updateRecord(filter: any, updateData: any, sqlTypes?: Object): Observable<any>;
    getDataArray(): any[];
    setDataArray(data: Array<any>): void;
    protected deleteLocalItems(): void;
    isColumnSortActive(column: OColumn): boolean;
    isColumnDescSortActive(column: OColumn): boolean;
    hasTabGroupChangeSubscription(): boolean;
    isEmpty(value: any): boolean;
    setFiltersConfiguration(conf: any): void;
    onStoreConfigurationClicked(): void;
    onApplyConfigurationClicked(): void;
    applyDefaultConfiguration(): void;
    applyConfiguration(configurationName: string): void;
    getTitleAlignClass(oCol: OColumn): any;
    getCellAlignClass(column: OColumn): string;
    onTableScroll(e: any): void;
    getDataScrollable(): any;
    hasScrollableContainer(): boolean;
    protected addDefaultRowButtons(): void;
    protected addButtonInRow(name: string): void;
    readonly headerHeight: number;
    isDetailMode(): boolean;
    copyAll(): void;
    copySelection(): void;
    viewDetail(item: any): void;
    editDetail(item: any): void;
    getOColumnFromTh(th: any): OColumn;
    getColumnInsertable(name: any): string;
    isRowSelected(row: any): boolean;
    protected getColumnsWidthFromDOM(): void;
    refreshColumnsWidth(): void;
}
export declare class OTableModule {
}
