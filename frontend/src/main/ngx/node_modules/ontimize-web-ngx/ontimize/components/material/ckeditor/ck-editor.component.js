import { Component, ElementRef, EventEmitter, forwardRef, Input, NgModule, NgZone, Output, ViewChild } from '@angular/core';
import { FormsModule, NG_VALUE_ACCESSOR } from '@angular/forms';
import { Util } from '../../../util/util';
var defaults = {
    contentsCss: [''],
    customConfig: ''
};
var CKEditorComponent = (function () {
    function CKEditorComponent(ngZone) {
        this.ngZone = ngZone;
        this.innerValue = '';
        this._readonly = false;
        this.config = {};
        this.skin = 'moono-lisa';
        this.language = 'en';
        this.fullPage = false;
        this.inline = false;
        this.change = new EventEmitter();
        this.ready = new EventEmitter();
        this.blur = new EventEmitter();
        this.focus = new EventEmitter();
    }
    Object.defineProperty(CKEditorComponent.prototype, "instance", {
        get: function () {
            return this.ckIns;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CKEditorComponent.prototype, "readonly", {
        get: function () {
            return this._readonly;
        },
        set: function (value) {
            var _this = this;
            this._readonly = value;
            setTimeout(function () {
                if (Util.isDefined(_this.ckIns) && Util.isDefined(_this.ckIns.editable())) {
                    _this.ckIns.setReadOnly(_this.readonly);
                }
            });
        },
        enumerable: true,
        configurable: true
    });
    CKEditorComponent.getRandomIdentifier = function (id) {
        if (id === void 0) { id = ''; }
        return 'editor-' + (id !== '' ? id : Math.round(Math.random() * 100000000));
    };
    CKEditorComponent.prototype.ngOnDestroy = function () {
        this.destroyCKEditor();
    };
    CKEditorComponent.prototype.ngAfterViewInit = function () {
        this.destroyCKEditor();
        this.initCKEditor(CKEditorComponent.getRandomIdentifier(this.id));
    };
    CKEditorComponent.prototype.initCKEditor = function (identifier) {
        var _this = this;
        if (typeof CKEDITOR === 'undefined') {
            return console.warn('CKEditor 4.x is missing (http://ckeditor.com/)');
        }
        this.identifier = identifier;
        this.ck.nativeElement.setAttribute('name', this.identifier);
        var opt = Object.assign({}, defaults, this.config, {
            readOnly: this.readonly,
            skin: this.skin,
            language: this.language,
            fullPage: this.fullPage,
            inline: this.inline,
            width: '100%'
        });
        this.ckIns = this.inline
            ? CKEDITOR.inline(this.ck.nativeElement, opt)
            : CKEDITOR.replace(this.ck.nativeElement, opt);
        this.ckIns.setData(this.innerValue);
        this.ckIns.on('change', function () {
            var val = _this.ckIns.getData();
            _this.updateValue(val);
        });
        this.ckIns.on('instanceReady', function (evt) {
            _this.ngZone.run(function () {
                _this.ready.emit(evt);
            });
        });
        this.ckIns.on('blur', function (evt) {
            _this.ngZone.run(function () {
                _this.blur.emit(evt);
                _this.propagateTouch();
            });
        });
        this.ckIns.on('focus', function (evt) {
            _this.ngZone.run(function () {
                _this.focus.emit(evt);
            });
        });
    };
    CKEditorComponent.prototype.destroyCKEditor = function () {
        if (this.ckIns) {
            this.ckIns.removeAllListeners();
            if (CKEDITOR.instances.hasOwnProperty(this.ckIns.name)) {
                CKEDITOR.remove(CKEDITOR.instances[this.ckIns.name]);
            }
            this.ckIns.destroy();
            this.ckIns = null;
            var editorEl = document.querySelector('#cke_' + this.identifier);
            if (Util.isDefined(editorEl) && Util.isDefined(editorEl.parentElement)) {
                editorEl.parentElement.removeChild(editorEl);
            }
        }
    };
    CKEditorComponent.prototype.updateValue = function (value) {
        var _this = this;
        this.ngZone.run(function () {
            _this.innerValue = value;
            _this.propagateChange(value);
            _this.propagateTouch();
            _this.change.emit(value);
        });
    };
    CKEditorComponent.prototype.writeValue = function (value) {
        this.innerValue = value || '';
        if (this.ckIns) {
            this.ckIns.setData(this.innerValue);
            var val = this.ckIns.getData();
            this.ckIns.setData(val);
        }
    };
    CKEditorComponent.prototype.propagateChange = function (_) {
    };
    CKEditorComponent.prototype.propagateTouch = function () {
    };
    CKEditorComponent.prototype.registerOnChange = function (fn) {
        this.propagateChange = fn;
    };
    CKEditorComponent.prototype.registerOnTouched = function (fn) {
        this.propagateTouch = fn;
    };
    CKEditorComponent.decorators = [
        { type: Component, args: [{
                    moduleId: module.id,
                    selector: 'ck-editor',
                    template: "<textarea #ck></textarea>",
                    providers: [{
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return CKEditorComponent; }),
                            multi: true
                        }],
                    exportAs: 'ckEditor'
                },] },
    ];
    CKEditorComponent.ctorParameters = function () { return [
        { type: NgZone }
    ]; };
    CKEditorComponent.propDecorators = {
        readonly: [{ type: Input }],
        config: [{ type: Input }],
        skin: [{ type: Input }],
        language: [{ type: Input }],
        fullPage: [{ type: Input }],
        inline: [{ type: Input }],
        id: [{ type: Input }],
        change: [{ type: Output }],
        ready: [{ type: Output }],
        blur: [{ type: Output }],
        focus: [{ type: Output }],
        ck: [{ type: ViewChild, args: ['ck',] }]
    };
    return CKEditorComponent;
}());
export { CKEditorComponent };
var CKEditorModule = (function () {
    function CKEditorModule() {
    }
    CKEditorModule.decorators = [
        { type: NgModule, args: [{
                    exports: [
                        FormsModule,
                        CKEditorComponent
                    ],
                    declarations: [CKEditorComponent]
                },] },
    ];
    return CKEditorModule;
}());
export { CKEditorModule };
//# sourceMappingURL=ck-editor.component.js.map