import { ElementRef, Injector, OnInit, TemplateRef } from '@angular/core';
import { FormControl } from '@angular/forms';
import { DateAdapter, MatDatepicker, MatDatepickerInput, MatDatepickerInputEvent } from '@angular/material';
import { IFormValueOptions } from '../../../../form/form-components';
import { OBaseTableCellEditor } from '../o-base-table-cell-editor.class';
export declare const DEFAULT_INPUTS_O_TABLE_CELL_EDITOR_TIME: string[];
export declare const DEFAULT_OUTPUTS_O_TABLE_CELL_EDITOR_TIME: string[];
export declare class OTableCellEditorTimeComponent extends OBaseTableCellEditor implements OnInit {
    protected injector: Injector;
    private adapter;
    static DEFAULT_INPUTS_O_TABLE_CELL_EDITOR_TIME: string[];
    static DEFAULT_OUTPUTS_O_TABLE_CELL_EDITOR_TIME: string[];
    templateref: TemplateRef<any>;
    protected dateInput: ElementRef;
    protected hourInput: ElementRef;
    private picker;
    oStartView: 'month' | 'year';
    datepickerInput: MatDatepickerInput<Date>;
    formControlHour: FormControl;
    formControlDate: FormControl;
    oDateFormat: string;
    oHourMax: string;
    oHourMin: string;
    private _oDateLocale;
    protected oHourPlaceholder: string;
    protected oDatePlaceholder: string;
    protected oHourFormat: number;
    protected onKeyboardInputDone: boolean;
    protected oMinDate: string;
    protected oMaxDate: string;
    protected _minDateString: string;
    protected _maxDateString: string;
    protected datepicker: MatDatepicker<Date>;
    private momentSrv;
    enabledCommitOnTabPress: boolean;
    protected activeKeys: Object;
    onDocumentKeydown(event: KeyboardEvent): void;
    constructor(injector: Injector, adapter: DateAdapter<any>);
    ngOnInit(): void;
    createInternalFormControl(): void;
    ngAfterViewChecked(): void;
    setTime(event: any): void;
    onDateChange(event: MatDatepickerInputEvent<any>): void;
    protected updateValeOnInputChange(blurEvent: any): void;
    protected parseHour(value: string): string;
    onHourChange(event: any): void;
    setTimestampValue(value: any, options?: IFormValueOptions): void;
    protected convertToFormatString(value: any): string;
    openDatepicker(d: MatDatepicker<Date>): void;
    getPlaceholderHour(): string;
    getPlaceholderDate(): string;
    open(e?: Event): void;
    protected handleKeydown(e: KeyboardEvent): void;
    protected handleKeyup(e: KeyboardEvent): void;
    protected updateComponentValue(): void;
    protected modifyPickerMethods(): void;
    hasErrorDate(error: string): boolean;
    hasErrorExclusive(error: string): boolean;
    hasErrorHour(error: string): boolean;
    getCellDataDate(): any;
    getCellDataHour(): any;
    startEdition(data: any): void;
    readonly formatString: string;
    minDateString: string;
    maxDateString: string;
    oDateLocale: string;
    readonly minDate: Date;
    readonly maxDate: Date;
    onDatepickerClosed(): void;
    onTimepickerClosed(): void;
    commitEdition(): void;
    onKeyDown(e: KeyboardEvent): void;
}
