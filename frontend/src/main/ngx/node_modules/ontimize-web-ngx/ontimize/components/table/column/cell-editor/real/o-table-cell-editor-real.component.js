var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, Injector, ViewChild, TemplateRef, ChangeDetectionStrategy } from '@angular/core';
import { InputConverter } from '../../../../../decorators';
import { OTableCellEditorIntegerComponent } from '../integer/o-table-cell-editor-integer.component';
import { OBaseTableCellEditor } from '../o-base-table-cell-editor.class';
export var DEFAULT_INPUTS_O_TABLE_CELL_EDITOR_REAL = OTableCellEditorIntegerComponent.DEFAULT_INPUTS_O_TABLE_CELL_EDITOR_INTEGER.slice();
export var DEFAULT_OUTPUTS_O_TABLE_CELL_EDITOR_REAL = OTableCellEditorIntegerComponent.DEFAULT_OUTPUTS_O_TABLE_CELL_EDITOR_INTEGER.slice();
var OTableCellEditorRealComponent = (function (_super) {
    __extends(OTableCellEditorRealComponent, _super);
    function OTableCellEditorRealComponent(injector) {
        var _this = _super.call(this, injector) || this;
        _this.injector = injector;
        _this.step = 0.01;
        return _this;
    }
    OTableCellEditorRealComponent.prototype.getCellData = function () {
        var cellData = _super.prototype.getCellData.call(this);
        var floatValue = parseFloat(cellData);
        return isNaN(floatValue) ? undefined : floatValue;
    };
    OTableCellEditorRealComponent.prototype.resolveValidators = function () {
        var validators = _super.prototype.resolveValidators.call(this);
        if (typeof (this.min) !== 'undefined') {
            validators.push(this.minValidator.bind(this));
        }
        if (typeof (this.max) !== 'undefined') {
            validators.push(this.maxValidator.bind(this));
        }
        return validators;
    };
    OTableCellEditorRealComponent.prototype.minValidator = function (control) {
        if ((typeof (control.value) === 'number') && (control.value < this.min)) {
            return {
                'min': {
                    'requiredMin': this.min
                }
            };
        }
        return {};
    };
    OTableCellEditorRealComponent.prototype.maxValidator = function (control) {
        if ((typeof (control.value) === 'number') && (this.max < control.value)) {
            return {
                'max': {
                    'requiredMax': this.max
                }
            };
        }
        return {};
    };
    OTableCellEditorRealComponent.DEFAULT_INPUTS_O_TABLE_CELL_EDITOR_REAL = DEFAULT_INPUTS_O_TABLE_CELL_EDITOR_REAL;
    OTableCellEditorRealComponent.DEFAULT_OUTPUTS_O_TABLE_CELL_EDITOR_REAL = DEFAULT_OUTPUTS_O_TABLE_CELL_EDITOR_REAL;
    OTableCellEditorRealComponent.decorators = [
        { type: Component, args: [{
                    moduleId: module.id,
                    selector: 'o-table-cell-editor-real',
                    template: "\n    <ng-template #templateref let-cellvalue=\"cellvalue\" let-rowvalue=\"rowvalue\">\n      <div [formGroup]=\"formGroup\">\n        <mat-form-field floatLabel=\"never\">\n\n          <input #input matInput type=\"number\" [placeholder]=\"getPlaceholder()\" [formControl]=\"formControl\"\n            [required]=\"orequired\" [min]=\"min\" [max]=\"max\" [step]=\"step\">\n\n          <mat-error *ngIf=\"hasError('required')\">{{ 'FORM_VALIDATION.REQUIRED' | oTranslate }}</mat-error>\n          <mat-error *ngIf=\"hasError('min')\">{{ 'FORM_VALIDATION.MIN_VALUE' | oTranslate }}:\n            {{ getErrorValue('min', 'requiredMin') }}</mat-error>\n          <mat-error *ngIf=\"hasError('max')\">{{ 'FORM_VALIDATION.MAX_VALUE' | oTranslate }}:\n            {{ getErrorValue('max', 'requiredMax') }}</mat-error>\n\n        </mat-form-field>\n      </div>\n    </ng-template>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    inputs: DEFAULT_INPUTS_O_TABLE_CELL_EDITOR_REAL,
                    outputs: DEFAULT_OUTPUTS_O_TABLE_CELL_EDITOR_REAL
                },] },
    ];
    OTableCellEditorRealComponent.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    OTableCellEditorRealComponent.propDecorators = {
        templateref: [{ type: ViewChild, args: ['templateref', { read: TemplateRef },] }]
    };
    __decorate([
        InputConverter(),
        __metadata("design:type", Number)
    ], OTableCellEditorRealComponent.prototype, "min", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Number)
    ], OTableCellEditorRealComponent.prototype, "max", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Number)
    ], OTableCellEditorRealComponent.prototype, "step", void 0);
    return OTableCellEditorRealComponent;
}(OBaseTableCellEditor));
export { OTableCellEditorRealComponent };
//# sourceMappingURL=o-table-cell-editor-real.component.js.map