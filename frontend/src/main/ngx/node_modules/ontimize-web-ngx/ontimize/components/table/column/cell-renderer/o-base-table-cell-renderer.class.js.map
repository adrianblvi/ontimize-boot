{"version":3,"file":"o-base-table-cell-renderer.class.js","sourceRoot":"","sources":["../../../../../../tmp/ontimize/components/table/column/cell-renderer/o-base-table-cell-renderer.class.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,IAAI,EAAE,MAAM,mBAAmB,CAAC;AAEzC,OAAO,EAAE,qBAAqB,EAAE,MAAM,6BAA6B,CAAC;AAEpE;IASE,gCAAsB,QAAkB;QAAlB,aAAQ,GAAR,QAAQ,CAAU;QACtC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;IAC9D,CAAC;IAEM,mDAAkB,GAAzB;QACE,IAAI,CAAC,gBAAgB,EAAE,CAAC;IAC1B,CAAC;IAED,sBAAI,yCAAK;aAAT;YACE,OAAO,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;QAChC,CAAC;;;OAAA;IAED,sBAAI,0CAAM;aAAV;YACE,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC;QAC/B,CAAC;;;OAAA;IAEM,iDAAgB,GAAvB;QACE,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;QACxC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE;YACvE,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC;SACnC;IACH,CAAC;IAOM,4CAAW,GAAlB,UAAmB,SAAc,EAAE,QAAc;QAC/C,IAAI,WAAmB,CAAC;QACxB,IAAI,IAAI,CAAC,aAAa,IAAI,OAAO,IAAI,CAAC,aAAa,KAAK,WAAW,IAAI,SAAS,KAAK,SAAS,EAAE;YAC9F,WAAW,GAAG,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,SAAS,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;SAC3E;aAAM;YACL,WAAW,GAAG,SAAS,CAAC;SACzB;QACD,OAAO,WAAW,CAAC;IACrB,CAAC;IAEM,2CAAU,GAAjB,UAAkB,SAAc,EAAE,QAAa;QAC7C,OAAO,IAAI,CAAC,WAAW,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;IAC/C,CAAC;IAEH,6BAAC;AAAD,CAAC,AAnDD,IAmDC","sourcesContent":["import { AfterContentInit, Injector, PipeTransform, TemplateRef } from '@angular/core';\n\nimport { Util } from '../../../../utils';\nimport { OTableComponent } from '../../o-table.component';\nimport { OTableColumnComponent } from '../o-table-column.component';\n\nexport class OBaseTableCellRenderer implements AfterContentInit {\n\n  public templateref: TemplateRef<any>;\n  public tableColumn: OTableColumnComponent;\n\n  protected type: string;\n  protected pipeArguments: any;\n  protected componentPipe: PipeTransform;\n\n  constructor(protected injector: Injector) {\n    this.tableColumn = this.injector.get(OTableColumnComponent);\n  }\n\n  public ngAfterContentInit(): void {\n    this.registerRenderer();\n  }\n\n  get table(): OTableComponent {\n    return this.tableColumn.table;\n  }\n\n  get column(): string {\n    return this.tableColumn.attr;\n  }\n\n  public registerRenderer(): void {\n    this.tableColumn.registerRenderer(this);\n    if (!Util.isDefined(this.type) && Util.isDefined(this.tableColumn.type)) {\n      this.type = this.tableColumn.type;\n    }\n  }\n\n  /**\n   * Returns the displayed table cell value\n   * @param cellvalue the internal table cell value\n   * @param rowvalue the table row value\n   */\n  public getCellData(cellvalue: any, rowvalue?: any): string {\n    let parsedValue: string;\n    if (this.componentPipe && typeof this.pipeArguments !== 'undefined' && cellvalue !== undefined) {\n      parsedValue = this.componentPipe.transform(cellvalue, this.pipeArguments);\n    } else {\n      parsedValue = cellvalue;\n    }\n    return parsedValue;\n  }\n\n  public getTooltip(cellValue: any, rowValue: any): string {\n    return this.getCellData(cellValue, rowValue);\n  }\n\n}\n"]}