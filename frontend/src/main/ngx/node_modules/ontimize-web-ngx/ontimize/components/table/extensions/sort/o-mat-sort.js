var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Directive, Output, EventEmitter } from '@angular/core';
import { MatSort } from '@angular/material';
import { Util, Codes } from '../../../../utils';
var OMatSort = (function (_super) {
    __extends(OMatSort, _super);
    function OMatSort() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.activeArray = [];
        _this.directionById = {};
        _this.oSortChange = new EventEmitter();
        return _this;
    }
    OMatSort.prototype.setMultipleSort = function (val) {
        this.multipleSort = val;
    };
    OMatSort.prototype.getSortColumns = function () {
        var _this = this;
        var activeData = [];
        this.activeArray.forEach(function (s) {
            activeData.push({
                id: s.id,
                direction: _this.directionById[s.id]
            });
        });
        return activeData;
    };
    OMatSort.prototype.setTableInfo = function (sortColArray) {
        var _this = this;
        sortColArray.forEach(function (colData) {
            var sortDirection = colData.ascendent ? Codes.ASC_SORT : Codes.DESC_SORT;
            _this.activeArray.push({
                id: colData.columnName,
                start: sortDirection,
                disableClear: false
            });
            _this.directionById[colData.columnName] = sortDirection;
        });
    };
    OMatSort.prototype.addSortColumn = function (sortable) {
        if (this.isActive(sortable)) {
            this.direction = this.directionById[sortable.id];
            this.directionById[sortable.id] = this.getNextSortDirection(sortable);
            this.direction = '';
            if (this.directionById[sortable.id] === '') {
                this.deleteSortColumn(sortable.id);
            }
        }
        else {
            if (!this.multipleSort) {
                this.activeArray = [];
                this.directionById = {};
            }
            this.activeArray.push(sortable);
            this.directionById[sortable.id] = sortable.start ? sortable.start : this.start;
        }
        var activeData = this.getSortColumns();
        this._stateChanges.next();
        this.oSortChange.emit(activeData);
    };
    OMatSort.prototype.deleteSortColumn = function (id) {
        delete this.directionById[id];
        for (var i = 0, len = this.activeArray.length; i < len; i++) {
            if (this.activeArray[i].id === id) {
                this.activeArray.splice(i, 1);
                break;
            }
        }
    };
    OMatSort.prototype.isActive = function (sortable) {
        return Util.isDefined(this.activeArray.find(function (s) { return sortable.id === s.id; }));
    };
    OMatSort.prototype.hasDirection = function (id) {
        var direction;
        if (Util.isDefined(this.directionById[id])) {
            direction = this.directionById[id];
        }
        return (direction === 'asc' || direction === 'desc');
    };
    OMatSort.prototype.getSortedData = function (data) {
        var _this = this;
        var sortColumns = this.getSortColumns();
        if (sortColumns.length === 0 || data.length === 0) {
            return data;
        }
        this.sortables.forEach(function (value, key) {
            _this.deregister(value);
        });
        return this.sortByColumns(data, sortColumns);
    };
    OMatSort.prototype.sortByColumns = function (data, sortColumns) {
        var sortFunctionBind = this.sortFunction.bind(this);
        for (var i = 0, len = sortColumns.length; i < len; i++) {
            var sortC = sortColumns[i];
            this.activeSortColumn = sortC.id;
            this.activeSortDirection = sortC.direction;
            if (i === 0) {
                data = data.sort(sortFunctionBind);
            }
            else {
                var groupedData = this.getDataGrouped(data, sortColumns, i);
                if (groupedData.length >= data.length) {
                    break;
                }
                data = this.sortGroupedData(groupedData);
            }
        }
        return data;
    };
    OMatSort.prototype.getDataGrouped = function (data, sortColumns, index) {
        var propArr = [];
        sortColumns.forEach(function (item, i) {
            if (i < index) {
                propArr.push(item.id);
            }
        });
        if (propArr.length === 0) {
            return data;
        }
        var result = [];
        data.forEach(function (item) {
            var value = '';
            propArr.forEach(function (prop) {
                value += item[prop];
            });
            var filtered = result.filter(function (resItem) { return resItem.key === value; });
            if (filtered.length === 0) {
                result.push({
                    key: value,
                    values: [item]
                });
            }
            else if (filtered.length === 1) {
                filtered[0].values.push(item);
            }
        });
        return result;
    };
    OMatSort.prototype.sortGroupedData = function (groupedData) {
        var self = this;
        return groupedData.reduce(function (obj, item) {
            var arr = item.values;
            var sorted = arr.length <= 1 ? arr : arr.sort(self.sortFunction.bind(self));
            obj.push.apply(obj, sorted);
            return obj;
        }, []);
    };
    OMatSort.prototype.sortFunction = function (a, b) {
        var _a;
        var propertyA = '';
        var propertyB = '';
        _a = [a[this.activeSortColumn], b[this.activeSortColumn]], propertyA = _a[0], propertyB = _a[1];
        var valueA = typeof propertyA === 'undefined' ? '' : propertyA === '' ? propertyA : isNaN(+propertyA) ? propertyA.toString().trim().toLowerCase() : +propertyA;
        var valueB = typeof propertyB === 'undefined' ? '' : propertyB === '' ? propertyB : isNaN(+propertyB) ? propertyB.toString().trim().toLowerCase() : +propertyB;
        return (valueA <= valueB ? -1 : 1) * (this.activeSortDirection === 'asc' ? 1 : -1);
    };
    OMatSort.decorators = [
        { type: Directive, args: [{
                    selector: '[oMatSort]',
                    exportAs: 'oMatSort',
                    inputs: ['disabled: oMatSortDisabled']
                },] },
    ];
    OMatSort.propDecorators = {
        oSortChange: [{ type: Output, args: ['matSortChange',] }]
    };
    return OMatSort;
}(MatSort));
export { OMatSort };
//# sourceMappingURL=o-mat-sort.js.map