import { AfterViewInit, ComponentFactoryResolver, EventEmitter, Injector, OnDestroy, OnInit, ViewContainerRef } from '@angular/core';
import { DateFilterFunction, ODateValueType } from '../../../components/input/date-input/o-date-input.component';
import { OTableComponent } from '../o-table.component';
import { OTableCellEditorBooleanComponent, OTableCellEditorDateComponent, OTableCellEditorIntegerComponent, OTableCellEditorRealComponent, OTableCellEditorTextComponent, OTableCellEditorTimeComponent } from './cell-editor/cell-editor';
import { OTableCellRendererActionComponent, OTableCellRendererBooleanComponent, OTableCellRendererCurrencyComponent, OTableCellRendererDateComponent, OTableCellRendererImageComponent, OTableCellRendererIntegerComponent, OTableCellRendererPercentageComponent, OTableCellRendererRealComponent, OTableCellRendererServiceComponent, OTableCellRendererTimeComponent } from './cell-renderer/cell-renderer';
import { OTableCellRendererTranslateComponent } from './cell-renderer/translate/o-table-cell-renderer-translate.component';
export interface OColumnTooltip {
    value?: string;
    function?: Function;
}
export declare const DEFAULT_INPUTS_O_TABLE_COLUMN: string[];
export declare const DEFAULT_OUTPUTS_O_TABLE_COLUMN: string[];
export declare class OTableColumnComponent implements OnDestroy, OnInit, AfterViewInit {
    table: OTableComponent;
    protected resolver: ComponentFactoryResolver;
    protected injector: Injector;
    static DEFAULT_INPUTS_O_TABLE_COLUMN: string[];
    static DEFAULT_OUTPUTS_O_TABLE_COLUMN: string[];
    protected static renderersMapping: {
        action: typeof OTableCellRendererActionComponent;
        boolean: typeof OTableCellRendererBooleanComponent;
        currency: typeof OTableCellRendererCurrencyComponent;
        date: typeof OTableCellRendererDateComponent;
        image: typeof OTableCellRendererImageComponent;
        integer: typeof OTableCellRendererIntegerComponent;
        percentage: typeof OTableCellRendererPercentageComponent;
        real: typeof OTableCellRendererRealComponent;
        service: typeof OTableCellRendererServiceComponent;
        translate: typeof OTableCellRendererTranslateComponent;
        time: typeof OTableCellRendererTimeComponent;
    };
    protected static editorsMapping: {
        boolean: typeof OTableCellEditorBooleanComponent;
        date: typeof OTableCellEditorDateComponent;
        integer: typeof OTableCellEditorIntegerComponent;
        real: typeof OTableCellEditorRealComponent;
        percentage: typeof OTableCellEditorRealComponent;
        currency: typeof OTableCellEditorRealComponent;
        text: typeof OTableCellEditorTextComponent;
        time: typeof OTableCellEditorTimeComponent;
    };
    renderer: any;
    editor: any;
    type: string;
    attr: string;
    title: string;
    titleAlign: string;
    contentAlign: 'start' | 'center' | 'end';
    sqlType: string;
    protected _SQLType: number;
    protected _defaultSQLTypeKey: string;
    protected _orderable: boolean;
    protected _resizable: boolean;
    protected _searchable: boolean;
    editable: boolean;
    width: string;
    minWidth: string;
    maxWidth: string;
    tooltip: boolean;
    tooltipValue: string;
    tooltipFunction: Function;
    multiline: boolean;
    protected _multiline: boolean;
    protected format: string;
    protected grouping: any;
    protected thousandSeparator: string;
    protected decimalSeparator: string;
    protected currencySymbol: string;
    protected currencySymbolPosition: string;
    protected trueValue: any;
    protected falseValue: any;
    protected renderTrueValue: any;
    protected renderFalseValue: any;
    protected renderType: string;
    protected booleanType: string;
    protected imageType: string;
    protected avatar: string;
    protected emptyImage: string;
    protected icon: string;
    protected action: string;
    protected text: string;
    protected iconPosition: string;
    protected entity: string;
    protected service: string;
    protected columns: string;
    protected valueColumn: string;
    protected parentKeys: string;
    protected queryMethod: string;
    protected serviceType: string;
    protected translateArgsFn: (rowData: any) => any[];
    oDateFormat: string;
    oHourFormat: number;
    protected orequired: boolean;
    showPlaceHolder: boolean;
    olabel: string;
    updateRecordOnEdit: boolean;
    showToastOnEdit: boolean;
    protected locale: string;
    protected oStartView: 'month' | 'year';
    protected oMinDate: string;
    protected oMaxDate: string;
    protected oTouchUi: boolean;
    protected oStartAt: string;
    protected filterDate: DateFilterFunction;
    protected dateValueType: ODateValueType;
    min: number;
    max: number;
    step: number;
    minDecimalDigits: number;
    maxDecimalDigits: number;
    indeterminateOnNull: boolean;
    autoCommit: boolean;
    onClick: EventEmitter<Object>;
    editionStarted: EventEmitter<Object>;
    editionCancelled: EventEmitter<Object>;
    editionCommitted: EventEmitter<Object>;
    onPostUpdateRecord: EventEmitter<Object>;
    asyncLoad: boolean;
    container: ViewContainerRef;
    private subscriptions;
    constructor(table: OTableComponent, resolver: ComponentFactoryResolver, injector: Injector);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    parseTitleAlign(): string;
    readonly originalWidth: string;
    protected createRenderer(): void;
    buildCellEditor(type: string, resolver: ComponentFactoryResolver, container: ViewContainerRef, propsOrigin: any): any;
    protected createEditor(): void;
    registerRenderer(renderer: any): void;
    registerEditor(editor: any): void;
    static addEditor(type: string, editorClassReference: any): void;
    orderable: any;
    resizable: any;
    searchable: any;
    getSQLType(): number;
}
