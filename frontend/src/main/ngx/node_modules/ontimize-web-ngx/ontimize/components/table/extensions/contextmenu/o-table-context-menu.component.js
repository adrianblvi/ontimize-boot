var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { ChangeDetectionStrategy, Component, forwardRef, Inject, Injector, ViewChild } from '@angular/core';
import { BehaviorSubject, Subscription } from 'rxjs';
import { InputConverter } from '../../../../decorators/input-converter';
import { OTranslateService } from '../../../../services';
import { Util } from '../../../../utils';
import { OContextMenuComponent } from '../../../contextmenu/o-context-menu-components';
import { ColumnValueFilterOperator, OTableComponent } from '../../table-components';
export var DEFAULT_TABLE_CONTEXT_MENU_INPUTS = [
    'contextMenu: context-menu',
    'showInsert: insert',
    'showEdit: edit',
    'showViewDetail: view-detail',
    'showCopy: copy',
    'showSelectAll: select-all',
    'showRefresh: refresh',
    'showDelete: delete',
    'showFilter: filter'
];
var OTableContextMenuComponent = (function () {
    function OTableContextMenuComponent(injector, table) {
        this.injector = injector;
        this.table = table;
        this.isVisibleInsert = new BehaviorSubject(true);
        this.isVisibleEdit = new BehaviorSubject(true);
        this.isVisibleDetail = new BehaviorSubject(true);
        this.isVisibleCopy = new BehaviorSubject(true);
        this.isVisibleSelectAll = new BehaviorSubject(true);
        this.isVisibleRefresh = new BehaviorSubject(true);
        this.isVisibleDelete = new BehaviorSubject(true);
        this.isVisibleFilter = new BehaviorSubject(true);
        this.contextMenuSubscription = new Subscription();
        this.translateService = this.injector.get(OTranslateService);
    }
    Object.defineProperty(OTableContextMenuComponent.prototype, "showInsert", {
        get: function () {
            return this.isVisibleInsert.getValue();
        },
        set: function (value) {
            if (typeof value !== 'boolean') {
                value = Util.parseBoolean(value);
            }
            this.isVisibleInsert.next(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableContextMenuComponent.prototype, "showEdit", {
        get: function () {
            return this.isVisibleEdit.getValue();
        },
        set: function (value) {
            if (typeof value !== 'boolean') {
                value = Util.parseBoolean(value);
            }
            this.isVisibleEdit.next(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableContextMenuComponent.prototype, "showViewDetail", {
        get: function () {
            return this.isVisibleDetail.getValue();
        },
        set: function (value) {
            if (typeof value !== 'boolean') {
                value = Util.parseBoolean(value);
            }
            this.isVisibleDetail.next(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableContextMenuComponent.prototype, "showCopy", {
        get: function () {
            return this.isVisibleCopy.getValue();
        },
        set: function (value) {
            if (typeof value !== 'boolean') {
                value = Util.parseBoolean(value);
            }
            this.isVisibleCopy.next(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableContextMenuComponent.prototype, "showSelectAll", {
        get: function () {
            return this.isVisibleSelectAll.getValue();
        },
        set: function (value) {
            if (typeof value !== 'boolean') {
                value = Util.parseBoolean(value);
            }
            this.table.isSelectionModeNone() ? this.isVisibleSelectAll.next(false) : this.isVisibleSelectAll.next(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableContextMenuComponent.prototype, "showRefresh", {
        get: function () {
            return this.isVisibleRefresh.getValue();
        },
        set: function (value) {
            if (typeof value !== 'boolean') {
                value = Util.parseBoolean(value);
            }
            this.isVisibleRefresh.next(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableContextMenuComponent.prototype, "showDelete", {
        get: function () {
            return this.isVisibleDelete.getValue();
        },
        set: function (value) {
            if (typeof value !== 'boolean') {
                value = Util.parseBoolean(value);
            }
            this.isVisibleDelete.next(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableContextMenuComponent.prototype, "showFilter", {
        get: function () {
            return this.isVisibleFilter.getValue();
        },
        set: function (value) {
            if (typeof value !== 'boolean') {
                value = Util.parseBoolean(value);
            }
            this.isVisibleFilter.next(value);
        },
        enumerable: true,
        configurable: true
    });
    OTableContextMenuComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.contextMenuSubscription.add(this.defaultContextMenu.onClose.subscribe(function (param) {
            if (!_this.table.isSelectionModeMultiple()) {
                _this.table.clearSelection();
            }
        }));
        this.contextMenuSubscription.add(this.defaultContextMenu.onShow.subscribe(function (param) {
            _this.initProperties(param);
        }));
    };
    OTableContextMenuComponent.prototype.ngAfterViewInit = function () {
        var itemsParsed = this.defaultContextMenu.oContextMenuItems.toArray();
        if (this.contextMenu) {
            var items = itemsParsed.concat(this.contextMenu.oContextMenuItems.toArray());
            this.defaultContextMenu.oContextMenuItems.reset(items);
        }
        else {
            this.defaultContextMenu.oContextMenuItems.reset(itemsParsed);
        }
        if (!Util.isDefined(this.showSelectAll)) {
            this.isVisibleSelectAll.next(this.table.selectAllCheckbox);
        }
        this.table.registerContextMenu(this.defaultContextMenu);
    };
    OTableContextMenuComponent.prototype.gotoDetails = function (event) {
        var data = event.data.rowValue;
        this.table.viewDetail(data);
    };
    OTableContextMenuComponent.prototype.edit = function (event) {
        var data = event.data.rowValue;
        this.table.doHandleClick(data);
    };
    OTableContextMenuComponent.prototype.add = function () {
        this.table.add();
    };
    OTableContextMenuComponent.prototype.selectAll = function () {
        this.table.showAndSelectAllCheckbox();
    };
    OTableContextMenuComponent.prototype.unSelectAll = function () {
        this.table.selection.clear();
    };
    OTableContextMenuComponent.prototype.copyAll = function () {
        this.table.copyAll();
    };
    OTableContextMenuComponent.prototype.copyCell = function (event) {
        var cell_data = this.defaultContextMenu.origin.innerText;
        Util.copyToClipboard(cell_data);
    };
    OTableContextMenuComponent.prototype.copySelection = function () {
        this.table.copySelection();
    };
    OTableContextMenuComponent.prototype.copyRow = function (event) {
        var data = JSON.stringify(this.table.dataSource.getRenderedData([event.data.rowValue]));
        Util.copyToClipboard(data);
    };
    OTableContextMenuComponent.prototype.delete = function (event) {
        this.table.remove();
    };
    OTableContextMenuComponent.prototype.refresh = function () {
        this.table.refresh();
    };
    OTableContextMenuComponent.prototype.filterByValue = function (event) {
        this.table.showFilterByColumnIcon = true;
        var columValueFilter = {
            attr: this.column.attr,
            operator: ColumnValueFilterOperator.IN,
            values: [this.row[this.column.attr]]
        };
        this.table.dataSource.addColumnFilter(columValueFilter);
        this.table.reloadPaginatedDataFromStart();
    };
    Object.defineProperty(OTableContextMenuComponent.prototype, "labelFilterByColumn", {
        get: function () {
            return (this.column && this.column.attr) ? this.translateService.get('TABLE_CONTEXT_MENU.FILTER_BY') + ' ' + this.translateService.get(this.column.attr) : '';
        },
        enumerable: true,
        configurable: true
    });
    OTableContextMenuComponent.prototype.filterByColumn = function (event) {
        if (this.table.oTableMenu) {
            this.table.showFilterByColumnIcon = true;
            this.table.oTableMenu.columnFilterOption.active = true;
            this.table.openColumnFilterDialog(this.column, event.event);
        }
    };
    OTableContextMenuComponent.prototype.checkVisibleFilter = function () {
        var isVisible = false;
        if (this.column) {
            isVisible = this.showFilter && this.table.isColumnFilterable(this.column);
        }
        this.isVisibleFilter.next(isVisible);
    };
    OTableContextMenuComponent.prototype.initProperties = function (param) {
        var data = param.data;
        if (data) {
            var columnName = data.cellName;
            this.column = this.table.getOColumn(columnName);
            this.row = data.rowValue;
            this.checkVisibleFilter();
        }
    };
    OTableContextMenuComponent.decorators = [
        { type: Component, args: [{
                    moduleId: module.id,
                    selector: 'o-table-context-menu',
                    template: "\n    <o-context-menu #defaultContextMenu>\n      <o-context-menu-item attr=\"refresh\" label=\"TABLE_CONTEXT_MENU.REFRESH\" svg-icon=\"ontimize:autorenew\" (execute)=\"refresh()\"\n        [visible]=\"isVisibleRefresh | async\"></o-context-menu-item>\n      <o-context-menu-item attr=\"detail\" icon=\"chevron_right\" label=\"TABLE_CONTEXT_MENU.VIEW_DETAIL\" (execute)=\"gotoDetails($event)\"\n        [visible]=\"isVisibleDetail | async\"></o-context-menu-item>\n      <o-context-menu-item attr=\"edit\" icon=\"edit\" label=\"TABLE_CONTEXT_MENU.EDIT\" (execute)=\"edit($event)\" [visible]=\"isVisibleEdit | async\">\n      </o-context-menu-item>\n      <o-context-menu-item attr=\"insert\" label=\"TABLE_CONTEXT_MENU.INSERT\" icon=\"add\" (execute)=\"add()\" [visible]=\"isVisibleInsert | async\">\n      </o-context-menu-item>\n      <o-context-menu-item attr=\"delete\" label=\"TABLE_CONTEXT_MENU.DELETE\" icon=\"delete\" (execute)=\"delete($event)\" [visible]=\"isVisibleDelete | async\">\n      </o-context-menu-item>\n      <!-- FILTER GROUP -->\n      <o-context-menu-group label=\"TABLE_CONTEXT_MENU.FILTER\" icon=\"filter_list\" type=\"group\" [visible]=\"isVisibleFilter | async\">\n        <o-context-menu-item icon=\"filter_list\" [label]=\"labelFilterByColumn\" (execute)=\"filterByColumn($event)\"></o-context-menu-item>\n        <o-context-menu-item icon=\"filter_list\" label=\"TABLE_CONTEXT_MENU.FILTER_BY_VALUE\" (execute)=\"filterByValue($event)\"></o-context-menu-item>\n      </o-context-menu-group>\n      <!-- COPY GROUP -->\n      <o-context-menu-separator [visible]=\"isVisibleCopy | async\"></o-context-menu-separator>\n      <o-context-menu-group label=\"TABLE_CONTEXT_MENU.COPY\" icon=\"file_copy\" type=\"group\" [visible]=\"isVisibleCopy | async\">\n        <o-context-menu-item icon=\"file_copy\" label=\"TABLE_CONTEXT_MENU.COPY_CELL\" (execute)=\"copyCell($event)\"></o-context-menu-item>\n        <o-context-menu-item icon=\"file_copy\" label=\"TABLE_CONTEXT_MENU.COPY_ROW\" (execute)=\"copyRow($event)\"></o-context-menu-item>\n        <o-context-menu-item label=\"TABLE_CONTEXT_MENU.COPY_ALL\" icon=\"file_copy\" (execute)=\"copyAll()\"></o-context-menu-item>\n        <o-context-menu-item label=\"TABLE_CONTEXT_MENU.COPY_SELECTION\" icon=\"file_copy\" (execute)=\"copySelection()\"></o-context-menu-item>\n      </o-context-menu-group>\n      <o-context-menu-separator [visible]=\"isVisibleSelectAll | async\"></o-context-menu-separator>\n      <o-context-menu-item attr=\"select-all\" [label]=\"table.isAllSelected() ? 'TABLE_CONTEXT_MENU.DESELECT_ALL': 'TABLE_CONTEXT_MENU.SELECT_ALL'\"\n        icon=\"select_all\" (execute)=\"table.isAllSelected() ? unSelectAll() : selectAll()\" [visible]=\"isVisibleSelectAll | async\"></o-context-menu-item>\n    </o-context-menu>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    inputs: DEFAULT_TABLE_CONTEXT_MENU_INPUTS
                },] },
    ];
    OTableContextMenuComponent.ctorParameters = function () { return [
        { type: Injector },
        { type: OTableComponent, decorators: [{ type: Inject, args: [forwardRef(function () { return OTableComponent; }),] }] }
    ]; };
    OTableContextMenuComponent.propDecorators = {
        defaultContextMenu: [{ type: ViewChild, args: ['defaultContextMenu',] }]
    };
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], OTableContextMenuComponent.prototype, "showSelectAll", null);
    return OTableContextMenuComponent;
}());
export { OTableContextMenuComponent };
//# sourceMappingURL=o-table-context-menu.component.js.map