import { EventEmitter } from '@angular/core';
import { combineLatest, Observable } from 'rxjs';
import { OFormLayoutDialogComponent } from '../../../layouts/form-layout/dialog/o-form-layout-dialog.component';
import { OFormLayoutManagerComponent } from '../../../layouts/form-layout/o-form-layout-manager.component';
import { DialogService, NavigationService } from '../../../services';
import { Codes, SQLTypes, Util } from '../../../utils';
var OFormNavigationClass = (function () {
    function OFormNavigationClass(injector, form, router, actRoute) {
        this.injector = injector;
        this.form = form;
        this.router = router;
        this.actRoute = actRoute;
        this.urlSegments = [];
        this.onUrlParamChangedStream = new EventEmitter();
        this.navigationStream = new EventEmitter();
        this.dialogService = injector.get(DialogService);
        this.navigationService = injector.get(NavigationService);
        try {
            this.formLayoutManager = this.injector.get(OFormLayoutManagerComponent);
        }
        catch (e) {
        }
        try {
            this.formLayoutDialog = this.injector.get(OFormLayoutDialogComponent);
        }
        catch (e) {
        }
        if (this.formLayoutDialog && !this.formLayoutManager) {
            this.formLayoutManager = this.formLayoutDialog.formLayoutManager;
        }
        var self = this;
        this.combinedNavigationStream = combineLatest(self.onUrlParamChangedStream.asObservable());
        this.combinedNavigationStream.subscribe(function (valArr) {
            if (Util.isArray(valArr) && valArr.length === 1 && valArr[0]) {
                self.navigationStream.emit(true);
            }
        });
    }
    OFormNavigationClass.prototype.initialize = function () {
        if (this.formLayoutManager && this.formLayoutManager.isTabMode()) {
            this.id = this.formLayoutManager.getLastTabId();
        }
    };
    OFormNavigationClass.prototype.destroy = function () {
        if (this.qParamSub) {
            this.qParamSub.unsubscribe();
        }
        if (this.urlParamSub) {
            this.urlParamSub.unsubscribe();
        }
        if (this.urlSub) {
            this.urlSub.unsubscribe();
        }
        if (this.combinedNavigationStreamSubscription) {
            this.combinedNavigationStreamSubscription.unsubscribe();
        }
    };
    OFormNavigationClass.prototype.subscribeToQueryParams = function () {
        if (this.formLayoutManager) {
            var cacheData = this.formLayoutManager.getFormCacheData(this.id);
            if (Util.isDefined(cacheData)) {
                this.queryParams = cacheData.queryParams || {};
                this.parseQueryParams();
            }
        }
        else {
            var self_1 = this;
            this.qParamSub = this.actRoute.queryParams.subscribe(function (params) {
                if (params) {
                    self_1.queryParams = params;
                    self_1.parseQueryParams();
                }
            });
        }
    };
    OFormNavigationClass.prototype.parseQueryParams = function () {
        var isDetail = this.queryParams[Codes.IS_DETAIL];
        this.form.isDetailForm = this.formLayoutManager ? false : (isDetail === 'true');
    };
    OFormNavigationClass.prototype.subscribeToUrlParams = function () {
        var _this = this;
        if (this.formLayoutManager) {
            var cacheData = this.formLayoutManager.getFormCacheData(this.id);
            if (Util.isDefined(cacheData)) {
                this.urlParams = cacheData.params;
                this.parseUrlParams();
            }
        }
        else {
            var self_2 = this;
            this.urlParamSub = this.actRoute.params.subscribe(function (params) {
                self_2.urlParams = params;
                _this.parseUrlParams();
            });
        }
    };
    OFormNavigationClass.prototype.parseUrlParams = function () {
        if (Util.isDefined(this.urlParams) && Util.isDefined(this.urlParams[Codes.PARENT_KEYS_KEY])) {
            this.form.formParentKeysValues = Util.decodeParentKeys(this.urlParams[Codes.PARENT_KEYS_KEY]);
        }
        if (this.urlParams) {
            this.onUrlParamChangedStream.emit(true);
        }
    };
    OFormNavigationClass.prototype.subscribeToUrl = function () {
        if (this.formLayoutManager) {
            var cacheData = this.formLayoutManager.getFormCacheData(this.id);
            if (Util.isDefined(cacheData)) {
                this.urlSegments = cacheData.urlSegments;
            }
        }
        else {
            var self_3 = this;
            this.urlSub = this.actRoute.url.subscribe(function (urlSegments) {
                self_3.urlSegments = urlSegments;
            });
        }
    };
    OFormNavigationClass.prototype.subscribeToCacheChanges = function (onCacheEmptyStateChanges) {
        var _this = this;
        this.cacheStateSubscription = onCacheEmptyStateChanges.asObservable().subscribe(function (res) {
            _this.setModifiedState(!res);
        });
    };
    OFormNavigationClass.prototype.getCurrentKeysValues = function () {
        var filter = {};
        if (this.urlParams) {
            filter = this.getFilterFromObject(this.urlParams);
        }
        return filter;
    };
    OFormNavigationClass.prototype.getFilterFromObject = function (objectParam) {
        var _this = this;
        var filter = {};
        if (!objectParam || Object.keys(objectParam).length === 0) {
            return filter;
        }
        if (this.form.keysArray) {
            this.form.keysArray.forEach(function (key, index) {
                if (objectParam[key]) {
                    filter[key] = SQLTypes.parseUsingSQLType(objectParam[key], _this.form.keysSqlTypesArray[index]);
                }
            });
        }
        Object.keys(this.form._pKeysEquiv).forEach(function (item, index) {
            var urlVal = objectParam[_this.form._pKeysEquiv[item]];
            if (urlVal) {
                filter[item] = SQLTypes.parseUsingSQLType(urlVal, _this.form.keysSqlTypesArray[index]);
            }
        });
        return filter;
    };
    OFormNavigationClass.prototype.getFilterFromUrlParams = function () {
        var _this = this;
        var filter = Object.assign({}, this.getUrlParams() || {});
        var urlParamsKeys = Object.keys(filter || {});
        if (urlParamsKeys.length > 0) {
            urlParamsKeys.forEach(function (key) {
                if (key === Codes.PARENT_KEYS_KEY) {
                    delete filter[key];
                    Object.assign(filter, _this.form.formParentKeysValues);
                }
            });
        }
        return filter;
    };
    OFormNavigationClass.prototype.getUrlSegments = function () {
        return this.urlSegments;
    };
    OFormNavigationClass.prototype.getQueryParams = function () {
        return this.queryParams;
    };
    OFormNavigationClass.prototype.setUrlParams = function (val) {
        this.urlParams = val;
    };
    OFormNavigationClass.prototype.getUrlParams = function () {
        return this.urlParams;
    };
    OFormNavigationClass.prototype.setModifiedState = function (modified) {
        if (this.formLayoutManager) {
            this.formLayoutManager.setModifiedState(modified, this.id);
        }
    };
    OFormNavigationClass.prototype.updateNavigation = function () {
        if (this.formLayoutManager) {
            var isInInsertMode = this.form.isInInsertMode();
            var formData_1;
            if (isInInsertMode) {
                formData_1 = {};
                formData_1['new_tab_title'] = 'LAYOUT_MANANGER.INSERTION_MODE_TITLE';
            }
            else if (this.formLayoutManager.allowToUpdateNavigation(this.form.oattr)) {
                formData_1 = {};
                var self_4 = this;
                Object.keys(this.form.formData).forEach(function (key) {
                    formData_1[key] = self_4.form.formData[key].value;
                });
            }
            if (formData_1) {
                this.formLayoutManager.updateNavigation(formData_1, this.id, isInInsertMode);
            }
        }
    };
    OFormNavigationClass.prototype.navigateBack = function () {
        if (!this.formLayoutManager && this.navigationService) {
            var navData = this.navigationService.getPreviousRouteData();
            if (navData) {
                var extras = {};
                extras[Codes.QUERY_PARAMS] = navData.queryParams;
                this.router.navigate([navData.url], extras);
            }
        }
    };
    OFormNavigationClass.prototype.closeDetailAction = function (options) {
        var _this = this;
        if (this.formLayoutManager) {
            this.formLayoutManager.closeDetail(this.id);
        }
        else if (this.navigationService) {
            this.form.beforeCloseDetail.emit();
            var navData = this.navigationService.getPreviousRouteData();
            if (navData) {
                var extras = {};
                extras[Codes.QUERY_PARAMS] = navData.queryParams;
                this.router.navigate([navData.url], extras).then(function (val) {
                    if (val && options && options.changeToolbarMode) {
                        _this.form.getFormToolbar().setInitialMode();
                    }
                });
            }
        }
    };
    OFormNavigationClass.prototype.stayInRecordAfterInsert = function (insertedKeys) {
        if (this.formLayoutManager) {
            this.form.setInitialMode();
            var self_5 = this;
            var subscription_1 = this.form.onDataLoaded.subscribe(function () {
                var keys = self_5.form.getKeysValues();
                self_5.formLayoutManager.updateActiveData({ params: keys });
                var cacheData = self_5.formLayoutManager.getFormCacheData(self_5.id);
                if (Util.isDefined(cacheData)) {
                    self_5.urlParams = cacheData.params;
                }
                subscription_1.unsubscribe();
            });
            this.form.queryData(insertedKeys);
        }
        else if (this.navigationService && this.form.keysArray && insertedKeys) {
            var params_1 = [];
            this.form.keysArray.forEach(function (current, index) {
                if (insertedKeys[current]) {
                    params_1.push(insertedKeys[current]);
                }
            });
            var extras = {};
            var qParams = Object.assign({}, this.getQueryParams(), Codes.getIsDetailObject());
            extras[Codes.QUERY_PARAMS] = qParams;
            var route = [];
            var navData = this.navigationService.getPreviousRouteData();
            if (navData) {
                route.push(navData.url);
                var detailRoute = navData.getDetailFormRoute();
                if (Util.isDefined(detailRoute)) {
                    route.push(detailRoute);
                }
                route.push.apply(route, params_1);
                this.navigationService.deleteActiveFormMode(navData);
            }
            else {
                extras.relativeTo = this.actRoute;
                route = ['../'].concat(params_1);
            }
            this.router.navigate(route, extras);
        }
    };
    OFormNavigationClass.prototype.goInsertMode = function (options) {
        var _this = this;
        if (this.formLayoutManager && this.formLayoutManager.isDialogMode()) {
            this.form.setInsertMode();
        }
        else if (this.navigationService) {
            var route = [];
            var extras = {};
            var navData = this.navigationService.getPreviousRouteData();
            if (!this.formLayoutManager && navData) {
                route.push(navData.url);
                var detailRoute = navData.getDetailFormRoute();
                if (Util.isDefined(detailRoute)) {
                    route.push(detailRoute);
                }
                route.push(navData.getInsertFormRoute());
            }
            else {
                extras.relativeTo = this.actRoute;
                route = ['../' + Codes.DEFAULT_INSERT_ROUTE];
            }
            this.storeNavigationFormRoutes('insertFormRoute');
            this.router.navigate(route, extras).then(function (val) {
                if (val && options && options.changeToolbarMode) {
                    _this.form.getFormToolbar().setInsertMode();
                }
            });
        }
    };
    OFormNavigationClass.prototype.goEditMode = function (options) {
        var _this = this;
        if (this.formLayoutManager && this.formLayoutManager.isDialogMode()) {
            this.form.setUpdateMode();
        }
        else if (this.navigationService) {
            var route = [];
            var extras = {};
            if (this.form.isDetailForm) {
                extras[Codes.QUERY_PARAMS] = Codes.getIsDetailObject();
            }
            extras[Codes.QUERY_PARAMS] = Object.assign({}, this.getQueryParams(), extras[Codes.QUERY_PARAMS] || {});
            var params_2 = [];
            var urlParams_1 = this.getUrlParams();
            this.form.keysArray.map(function (key) {
                if (urlParams_1[key]) {
                    params_2.push(urlParams_1[key]);
                }
            });
            var navData = this.navigationService.getPreviousRouteData();
            if (Util.isDefined(navData)) {
                route.push(navData.url);
                var detailRoute = navData.getDetailFormRoute();
                if (Util.isDefined(detailRoute)) {
                    route.push(detailRoute);
                }
                route.push.apply(route, params_2);
                route.push(navData.getEditFormRoute());
            }
            else {
                extras.relativeTo = this.actRoute;
                route = ['../'].concat(params_2, [Codes.DEFAULT_EDIT_ROUTE]);
            }
            this.storeNavigationFormRoutes('editFormRoute');
            this.form.beforeGoEditMode.emit();
            this.router.navigate(route, extras).then(function (val) {
                if (val && options && options.changeToolbarMode) {
                    _this.form.getFormToolbar().setEditMode();
                }
            });
        }
    };
    OFormNavigationClass.prototype.getNestedLevelsNumber = function () {
        var actRoute = this.actRoute;
        var i = 0;
        while (actRoute.parent) {
            actRoute = actRoute.parent;
            actRoute.url.subscribe(function (x) {
                if (x && x.length) {
                    i++;
                }
            });
        }
        return i;
    };
    OFormNavigationClass.prototype.getFullUrlSegments = function () {
        var fullUrlSegments = [];
        var router = this.router;
        if (router && router.url && router.url.length) {
            var root = router.parseUrl(router.url).root;
            if (root && root.hasChildren() && root.children.primary) {
                fullUrlSegments = root.children.primary.segments;
            }
        }
        return fullUrlSegments;
    };
    OFormNavigationClass.prototype.showConfirmDiscardChanges = function () {
        var subscription = undefined;
        if (this.form.isInitialStateChanged() && !this.form.isInInsertMode()) {
            subscription = this.dialogService.confirm('CONFIRM', 'MESSAGES.FORM_CHANGES_WILL_BE_LOST');
        }
        if (subscription === undefined) {
            var observable = Observable.create(function (observer) {
                observer.next(true);
                observer.complete();
            });
            subscription = observable.toPromise();
        }
        return subscription;
    };
    OFormNavigationClass.prototype.storeNavigationFormRoutes = function (activeMode) {
        this.navigationService.storeFormRoutes({
            detailFormRoute: Codes.DEFAULT_DETAIL_ROUTE,
            editFormRoute: Codes.DEFAULT_EDIT_ROUTE,
            insertFormRoute: Codes.DEFAULT_INSERT_ROUTE
        }, activeMode);
    };
    return OFormNavigationClass;
}());
export { OFormNavigationClass };
//# sourceMappingURL=o-form.navigation.class.js.map