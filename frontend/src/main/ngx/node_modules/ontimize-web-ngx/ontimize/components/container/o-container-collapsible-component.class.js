var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { ElementRef, forwardRef, Inject, Injector, Optional, ViewChild } from '@angular/core';
import { MatExpansionPanel, MAT_FORM_FIELD_DEFAULT_OPTIONS } from '@angular/material';
import { InputConverter } from '../../decorators/input-converter';
import { OFormComponent } from '../form/form-components';
import { OContainerComponent } from './o-container-component.class';
export var DEFAULT_INPUTS_O_CONTAINER_COLLAPSIBLE = OContainerComponent.DEFAULT_INPUTS_O_CONTAINER.concat([
    'expanded',
    'description',
    'collapsedHeight:collapsed-height',
    'expandedHeight:expanded-height'
]);
var OContainerCollapsibleComponent = (function (_super) {
    __extends(OContainerCollapsibleComponent, _super);
    function OContainerCollapsibleComponent(form, elRef, injector, matFormDefaultOption) {
        var _this = _super.call(this, form, elRef, injector, matFormDefaultOption) || this;
        _this.form = form;
        _this.elRef = elRef;
        _this.injector = injector;
        _this.matFormDefaultOption = matFormDefaultOption;
        _this.expanded = true;
        _this.collapsedHeight = '37px';
        _this.expandedHeight = '37px';
        _this.contentObserver = new MutationObserver(function () { return _this.updateHeightExpansionPanelContent(); });
        return _this;
    }
    OContainerCollapsibleComponent.prototype.ngAfterViewInit = function () {
        if (this.expPanel) {
            this._containerCollapsibleRef = this.expPanel._body;
            this.registerContentObserver();
        }
        else {
            this.unregisterContentObserver();
        }
    };
    OContainerCollapsibleComponent.prototype.updateOutlineGap = function () {
        if (this.isAppearanceOutline()) {
            var exPanelHeader = this._titleEl ? this._titleEl._element.nativeElement : null;
            if (!this._containerRef) {
                return;
            }
            var containerOutline = this._containerRef.nativeElement;
            var containerOutlineRect = containerOutline.getBoundingClientRect();
            if (containerOutlineRect.width === 0 && containerOutlineRect.height === 0) {
                return;
            }
            var titleEl = exPanelHeader.querySelector('.o-container-title.mat-expansion-panel-header-title');
            var descrEl = exPanelHeader.querySelector('.mat-expansion-panel-header-description');
            var containerStart = containerOutlineRect.left;
            var descrStart = descrEl.getBoundingClientRect().left;
            var titleWidth = 0;
            if (this.hasHeader()) {
                titleWidth += this.icon ? titleEl.querySelector('mat-icon').offsetWidth : 0;
                titleWidth += this.title ? titleEl.querySelector('span').offsetWidth : 0;
                titleWidth = titleWidth === 0 ? 0 : titleWidth + 4;
            }
            var descrWidth = this.description ? descrEl.querySelector('span').offsetWidth + 8 : 0;
            var empty1Width = descrStart - containerStart - 14 - titleWidth - 4;
            var gapTitleEls = containerOutline.querySelectorAll('.o-container-outline-gap-title');
            var gapEmpty1Els = containerOutline.querySelectorAll('.o-container-outline-gap-empty1');
            var gapDescrEls = containerOutline.querySelectorAll('.o-container-outline-gap-description');
            gapTitleEls[0].style.width = titleWidth + "px";
            gapEmpty1Els[0].style.width = empty1Width + "px";
            gapDescrEls[0].style.width = descrWidth + "px";
        }
    };
    OContainerCollapsibleComponent.prototype.registerObserver = function () {
        if (this._titleEl) {
            this.titleObserver.observe(this._titleEl._element.nativeElement, {
                childList: true,
                characterData: true,
                subtree: true
            });
        }
    };
    OContainerCollapsibleComponent.prototype.updateHeightExpansionPanelContent = function () {
        var exPanelHeader = this._titleEl ? this._titleEl._element.nativeElement : null;
        var exPanelContent = this._containerCollapsibleRef ? this._containerCollapsibleRef.nativeElement.querySelector('.o-container-scroll') : null;
        var parentHeight = exPanelHeader.parentNode ? exPanelHeader.parentNode.offsetHeight : null;
        var height = (OContainerComponent.APPEARANCE_OUTLINE === this.appearance) ? parentHeight : (parentHeight - exPanelHeader.offsetHeight);
        if (height > 0) {
            exPanelContent.style.height = height + 'px';
        }
    };
    OContainerCollapsibleComponent.prototype.unregisterContentObserver = function () {
        if (this.contentObserver) {
            this.contentObserver.disconnect();
        }
    };
    OContainerCollapsibleComponent.prototype.registerContentObserver = function () {
        if (this._containerCollapsibleRef) {
            this.contentObserver.observe(this._containerCollapsibleRef.nativeElement, {
                childList: true,
                attributes: true,
                attributeFilter: ['style']
            });
        }
    };
    OContainerCollapsibleComponent.DEFAULT_INPUTS_O_CONTAINER_COLLAPSIBLE = DEFAULT_INPUTS_O_CONTAINER_COLLAPSIBLE;
    OContainerCollapsibleComponent.ctorParameters = function () { return [
        { type: OFormComponent, decorators: [{ type: Optional }, { type: Inject, args: [forwardRef(function () { return OFormComponent; }),] }] },
        { type: ElementRef },
        { type: Injector },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_FORM_FIELD_DEFAULT_OPTIONS,] }] }
    ]; };
    OContainerCollapsibleComponent.propDecorators = {
        expPanel: [{ type: ViewChild, args: ['expPanel',] }]
    };
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OContainerCollapsibleComponent.prototype, "expanded", void 0);
    return OContainerCollapsibleComponent;
}(OContainerComponent));
export { OContainerCollapsibleComponent };
//# sourceMappingURL=o-container-collapsible-component.class.js.map