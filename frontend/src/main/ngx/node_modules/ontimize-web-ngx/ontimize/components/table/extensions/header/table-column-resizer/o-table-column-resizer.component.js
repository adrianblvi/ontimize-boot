var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { ChangeDetectionStrategy, Component, ElementRef, HostListener, Inject, NgZone, Renderer2, ViewEncapsulation, forwardRef } from '@angular/core';
import { OTableComponent } from '../../../o-table.component';
import { InputConverter } from '../../../../../decorators';
import { Util } from '../../../../../util/util';
export var DEFAULT_INPUTS_O_TABLE_COLUMN_RESIZER = [
    'column'
];
export var DEFAULT_OUTPUTS_O_TABLE_COLUMN_RESIZER = [];
var OTableColumnResizerComponent = (function () {
    function OTableColumnResizerComponent(table, elRef, ngZone, renderer) {
        this.table = table;
        this.elRef = elRef;
        this.ngZone = ngZone;
        this.renderer = renderer;
        this.disabled = false;
        this.dragListeners = [];
        this.isResizing = false;
        this.blockedMinCols = [];
        this.blockedMaxCols = [];
        this.columnsStartWidth = {};
    }
    OTableColumnResizerComponent.prototype.ngOnInit = function () {
        if (!this.isDisabled) {
            this.headerEl = this.getHeaderEL();
            if (this.headerEl) {
                this.nextOColumns = this.getFollowingOColumns();
            }
        }
    };
    OTableColumnResizerComponent.prototype.ngOnDestroy = function () {
        this.stopDragging();
    };
    OTableColumnResizerComponent.prototype.onClick = function (event) {
        event.stopPropagation();
        event.preventDefault();
    };
    Object.defineProperty(OTableColumnResizerComponent.prototype, "isDisabled", {
        get: function () {
            return this.column && !this.column.resizable;
        },
        enumerable: true,
        configurable: true
    });
    OTableColumnResizerComponent.prototype.onMousedown = function (e) {
        if (!this.isDisabled) {
            this.startResize(e);
        }
    };
    OTableColumnResizerComponent.prototype.onMouseup = function () {
        this.isResizing = false;
        this.stopDragging();
    };
    OTableColumnResizerComponent.prototype.stopDragging = function () {
        this.isResizing = false;
        this.columnsStartWidth = {};
        while (this.dragListeners.length > 0) {
            var fct = this.dragListeners.pop();
            if (fct) {
                fct();
            }
        }
    };
    OTableColumnResizerComponent.prototype.startResize = function (startEvent) {
        var _this = this;
        startEvent.preventDefault();
        startEvent.stopPropagation();
        if (!Util.isDefined(this.headerEl)) {
            return;
        }
        this.startX = startEvent.screenX;
        this.startWidth = this.column.DOMWidth;
        this.minWidth = this.column.getMinWidthValue();
        this.initializeWidthData();
        this.ngZone.runOutsideAngular(function () {
            _this.dragListeners.push(_this.renderer.listen('document', 'mouseup', function (e) { return _this.stopDragging(); }));
        });
        if (!(startEvent instanceof MouseEvent)) {
            return;
        }
        this.ngZone.runOutsideAngular(function () {
            _this.dragListeners.push(_this.renderer.listen('document', 'mousemove', function (e) { return _this.resizeEvent(e); }));
        });
        this.isResizing = true;
    };
    OTableColumnResizerComponent.prototype.resizeEvent = function (event) {
        if (!this.isResizing || !(event instanceof MouseEvent)) {
            return;
        }
        var movementX = (event.screenX - this.startX);
        if (movementX === 0) {
            return;
        }
        var newColumnWidth = this.startWidth + movementX;
        var lessThanMin = newColumnWidth < this.minWidth;
        var moreThanMax = newColumnWidth > this.maxWidth;
        if (lessThanMin || moreThanMax) {
            return;
        }
        if (!this.table.horizontalScroll) {
            this.calculateNewColumnsWidth(movementX, newColumnWidth);
            this.updateBlockedCols();
        }
        else {
            this.column.setWidth(newColumnWidth);
        }
        this.table.cd.detectChanges();
    };
    OTableColumnResizerComponent.prototype.getHeaderEL = function () {
        var element;
        var currentEl = this.elRef.nativeElement.parentElement;
        while (!element && currentEl) {
            if (currentEl.nodeName === 'TH') {
                element = currentEl;
            }
            else {
                currentEl = currentEl.parentElement;
            }
        }
        return currentEl;
    };
    OTableColumnResizerComponent.prototype.getFollowingOColumns = function () {
        var result = [];
        var nextTh = this.headerEl.nextSibling;
        var self = this;
        while (nextTh) {
            var oCol = self.table.getOColumnFromTh(nextTh);
            if (Util.isDefined(oCol)) {
                result.push(oCol);
            }
            nextTh = nextTh.nextSibling;
        }
        return result;
    };
    OTableColumnResizerComponent.prototype.updateBlockedCols = function () {
        var self = this;
        this.blockedMinCols = [];
        this.blockedMaxCols = [];
        var columns = [this.column].concat(this.nextOColumns);
        columns.forEach(function (oCol) {
            if (oCol.DOMWidth <= oCol.getMinWidthValue()) {
                self.blockedMinCols.push(oCol.attr);
            }
            var maxW = oCol.getMaxWidthValue();
            if (Util.isDefined(maxW) && oCol.DOMWidth >= maxW) {
                self.blockedMaxCols.push(oCol.attr);
            }
        });
    };
    OTableColumnResizerComponent.prototype.calculateNewColumnsWidth = function (movementX, newColumnWidth) {
        var positive = (movementX > 0);
        if (positive) {
            this.calculateUsingNextColumnsRestrictions(movementX, newColumnWidth);
        }
        else {
            this.calculateUsingOwnColumnRestriction(movementX, newColumnWidth);
        }
    };
    OTableColumnResizerComponent.prototype.calculateUsingNextColumnsRestrictions = function (movementX, newColumnWidth) {
        var _this = this;
        var availableCols = this.nextOColumns.length - this.blockedMinCols.length;
        if (availableCols <= 0) {
            return;
        }
        var widthRatio = movementX / availableCols;
        var cols = this.nextOColumns.filter(function (oCol) { return _this.blockedMinCols.indexOf(oCol.attr) === -1; });
        cols.forEach(function (oCol) {
            var newWidth = (_this.columnsStartWidth[oCol.attr] - widthRatio);
            var minWidth = oCol.getMinWidthValue();
            if (newWidth <= minWidth) {
                newWidth = minWidth;
                _this.blockedMinCols.push(oCol.attr);
            }
            oCol.setWidth(newWidth);
        });
        this.column.setWidth(newColumnWidth);
    };
    OTableColumnResizerComponent.prototype.calculateUsingOwnColumnRestriction = function (movementX, newColumnWidth) {
        var _this = this;
        var widthRatio = Math.abs(movementX) / this.nextOColumns.length;
        var widthDifference = 0;
        if (widthRatio > 0 && this.blockedMaxCols.length < this.nextOColumns.length) {
            var cols = this.nextOColumns.filter(function (oCol) { return _this.blockedMaxCols.indexOf(oCol.attr) === -1; });
            cols.forEach(function (oCol) {
                var newWidth = (_this.columnsStartWidth[oCol.attr] + widthRatio);
                var maxWidth = oCol.getMaxWidthValue();
                if (maxWidth && newWidth > maxWidth) {
                    var diff = newWidth - maxWidth;
                    newWidth = maxWidth;
                    _this.blockedMaxCols.push(oCol.attr);
                    var notBlocked = _this.nextOColumns.length - _this.blockedMaxCols.length;
                    widthRatio += notBlocked > 0 ? Math.floor(diff / notBlocked) : 0;
                }
                widthDifference += newWidth - oCol.DOMWidth;
                oCol.setWidth(newWidth);
            });
        }
        var newWidth = Math.min(this.startWidth - widthDifference, newColumnWidth);
        this.column.setWidth(newWidth);
    };
    OTableColumnResizerComponent.prototype.initializeWidthData = function () {
        var _this = this;
        var maxWidth = this.column.getMaxWidthValue();
        var nextColMinWidthAcum = 0;
        var nextColWidthAcum = 0;
        this.nextOColumns.forEach(function (col) {
            nextColMinWidthAcum += col.getMinWidthValue();
            nextColWidthAcum += col.DOMWidth;
            _this.columnsStartWidth[col.attr] = col.DOMWidth;
        });
        var calcMaxWidth = this.headerEl.clientWidth + (nextColWidthAcum - nextColMinWidthAcum);
        if (Util.isDefined(maxWidth)) {
            maxWidth = Math.min(maxWidth, calcMaxWidth);
        }
        else {
            maxWidth = calcMaxWidth;
        }
        this.maxWidth = maxWidth;
    };
    OTableColumnResizerComponent.DEFAULT_INPUTS_O_TABLE_COLUMN_RESIZER = DEFAULT_INPUTS_O_TABLE_COLUMN_RESIZER;
    OTableColumnResizerComponent.DEFAULT_OUTPUTS_O_TABLE_COLUMN_RESIZER = DEFAULT_OUTPUTS_O_TABLE_COLUMN_RESIZER;
    OTableColumnResizerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'o-table-column-resizer',
                    inputs: DEFAULT_INPUTS_O_TABLE_COLUMN_RESIZER,
                    outputs: DEFAULT_OUTPUTS_O_TABLE_COLUMN_RESIZER,
                    template: "\n    <span class=\"resizer\" (click)=\"onClick($event)\"></span>\n  ",
                    styles: ["\n    .o-table-column-resizer{display:inline-block;width:13px;position:absolute;right:0;top:6px;bottom:6px}.o-table-column-resizer:not(.disabled){cursor:col-resize}.o-table-column-resizer span{height:100%;width:1px;display:block;margin-left:auto;margin-right:auto}.o-table-column-resizer.disabled{cursor:default}\n  "],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    encapsulation: ViewEncapsulation.None,
                    host: {
                        '[class.o-table-column-resizer]': 'true',
                        '[class.disabled]': 'isDisabled',
                    }
                },] },
    ];
    OTableColumnResizerComponent.ctorParameters = function () { return [
        { type: OTableComponent, decorators: [{ type: Inject, args: [forwardRef(function () { return OTableComponent; }),] }] },
        { type: ElementRef },
        { type: NgZone },
        { type: Renderer2 }
    ]; };
    OTableColumnResizerComponent.propDecorators = {
        onMousedown: [{ type: HostListener, args: ['mousedown', ['$event'],] }]
    };
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OTableColumnResizerComponent.prototype, "disabled", void 0);
    return OTableColumnResizerComponent;
}());
export { OTableColumnResizerComponent };
//# sourceMappingURL=o-table-column-resizer.component.js.map