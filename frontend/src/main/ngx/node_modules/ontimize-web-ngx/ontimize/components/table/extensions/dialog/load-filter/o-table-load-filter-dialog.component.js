import { Component, EventEmitter, Inject, Injector, ViewChild, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialogRef, MatSelectionList } from '@angular/material';
import { SelectionModel } from '@angular/cdk/collections';
import { DialogService } from '../../../../../services/dialog.service';
var OTableLoadFilterDialogComponent = (function () {
    function OTableLoadFilterDialogComponent(dialogRef, data, injector) {
        this.dialogRef = dialogRef;
        this.injector = injector;
        this.filters = [];
        this.onDelete = new EventEmitter();
        this.loadFilters(data);
        this.dialogService = this.injector.get(DialogService);
        try {
            this.cd = this.injector.get(ChangeDetectorRef);
        }
        catch (e) {
        }
    }
    OTableLoadFilterDialogComponent.prototype.ngOnInit = function () {
        this.filterList.selectedOptions = new SelectionModel(false);
    };
    OTableLoadFilterDialogComponent.prototype.loadFilters = function (filters) {
        this.filters = filters;
    };
    OTableLoadFilterDialogComponent.prototype.getSelectedFilterName = function () {
        var selected = this.filterList.selectedOptions.selected;
        return selected.length ? selected[0].value : void 0;
    };
    OTableLoadFilterDialogComponent.prototype.removeFilter = function (filterName) {
        var _this = this;
        this.dialogService.confirm('CONFIRM', 'TABLE.DIALOG.CONFIRM_REMOVE_FILTER').then(function (result) {
            if (result) {
                _this.onDelete.emit(filterName);
                _this.cd.detectChanges();
            }
        });
    };
    OTableLoadFilterDialogComponent.decorators = [
        { type: Component, args: [{
                    moduleId: module.id,
                    selector: 'o-table-load-filter-dialog',
                    template: "\n    <span mat-dialog-title>{{ 'TABLE.BUTTONS.FILTER_LOAD' | oTranslate }}</span>\n    <mat-dialog-content fxLayout=\"column\">\n      <div mat-subheader>{{ 'TABLE.DIALOG.LOAD_FILTER' | oTranslate }}</div>\n      <mat-selection-list #filterList dense class=\"o-table-load-filter-dialog-list\">\n        <mat-list-option *ngFor=\"let filter of filters \" [value]=\"filter.name\" checkboxPosition=\"before\">\n          <span matLine class=\"o-table-load-filter-dialog-list-title\">{{ filter.name }}</span>\n          <span matLine>{{ filter.description }}</span>\n        </mat-list-option>\n        <mat-list-item *ngIf=\"filters.length === 0\">\n          <span class=\"empty-filter-list\">{{ 'TABLE.DIALOG.EMPTY_FILTER_LIST' | oTranslate }}</span>\n        </mat-list-item>\n      </mat-selection-list>\n    </mat-dialog-content>\n\n    <mat-dialog-actions align=\"end\">\n      <button type=\"button\" mat-stroked-button [disabled]=\"filterList.selectedOptions.selected.length!==1\"\n        (click)=\"removeFilter(filterList.selectedOptions.selected[0].value)\">{{ 'DELETE' | oTranslate | uppercase }}</button>\n      <span fxFlex></span>\n      <button type=\"button\" mat-stroked-button class=\"mat-primary\" [mat-dialog-close]=\"false\">{{ 'CANCEL' | oTranslate | uppercase }}</button>\n      <button type=\"button\" mat-stroked-button class=\"mat-primary\" [mat-dialog-close]=\"true\"\n        [disabled]=\"filterList.selectedOptions.selected.length!==1\">{{ 'TABLE.BUTTONS.APPLY' | oTranslate | uppercase }}</button>\n    </mat-dialog-actions>\n  ",
                    styles: ["\n\n  "],
                    changeDetection: ChangeDetectionStrategy.OnPush
                },] },
    ];
    OTableLoadFilterDialogComponent.ctorParameters = function () { return [
        { type: MatDialogRef },
        { type: Array, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] },
        { type: Injector }
    ]; };
    OTableLoadFilterDialogComponent.propDecorators = {
        filterList: [{ type: ViewChild, args: [MatSelectionList,] }]
    };
    return OTableLoadFilterDialogComponent;
}());
export { OTableLoadFilterDialogComponent };
//# sourceMappingURL=o-table-load-filter-dialog.component.js.map