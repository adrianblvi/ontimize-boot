var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { CommonModule } from '@angular/common';
import { ChangeDetectorRef, Component, ElementRef, forwardRef, Inject, Injector, NgModule, Optional, ViewChild, ViewEncapsulation } from '@angular/core';
import { FormGroup } from '@angular/forms';
import moment from 'moment';
import { merge, Subscription } from 'rxjs';
import { InputConverter } from '../../../decorators';
import { OSharedModule } from '../../../shared';
import { Util } from '../../../utils';
import { OFormComponent } from '../../form/o-form.component';
import { OFormValue } from '../../form/OFormValue';
import { DEFAULT_INPUTS_O_FORM_DATA_COMPONENT, DEFAULT_OUTPUTS_O_FORM_DATA_COMPONENT, OFormDataComponent, OValueChangeEvent } from '../../o-form-data-component.class';
import { ODateInputComponent, ODateInputModule } from '../date-input/o-date-input.component';
import { OHourInputComponent, OHourInputModule } from '../hour-input/o-hour-input.component';
export var DEFAULT_INPUTS_O_TIME_INPUT = DEFAULT_INPUTS_O_FORM_DATA_COMPONENT.concat([
    'oDateFormat: date-format',
    'oDateLocale: date-locale',
    'oDateStartView: date-start-view',
    'oDateMinDate: date-min',
    'oDateMaxDate: date-max',
    'oDateTouchUi: date-touch-ui',
    'oDateStartAt: date-start-at',
    'oDateFilterDate: date-filter-date',
    'oDateTextInputEnabled: date-text-input-enabled',
    'oHourFormat: hour-format',
    'oHourMin: hour-min',
    'oHourMax: hour-max',
    'oHourTextInputEnabled: hour-text-input-enabled',
    'oHourPlaceholder: hour-placeholder',
    'oDatePlaceholder: date-placeholder'
]);
export var DEFAULT_OUTPUTS_O_TIME_INPUT = DEFAULT_OUTPUTS_O_FORM_DATA_COMPONENT.slice();
var OTimeInputComponent = (function (_super) {
    __extends(OTimeInputComponent, _super);
    function OTimeInputComponent(form, elRef, injector, cd) {
        var _this = _super.call(this, form, elRef, injector) || this;
        _this.cd = cd;
        _this.oDateFormat = 'L';
        _this.oDateStartView = 'month';
        _this.oDateTextInputEnabled = true;
        _this.oHourFormat = 24;
        _this.oHourTextInputEnabled = true;
        _this.oHourPlaceholder = '';
        _this.oDatePlaceholder = '';
        _this.formGroup = new FormGroup({});
        _this.subscription = new Subscription();
        _this._defaultSQLTypeKey = 'DATE';
        return _this;
    }
    OTimeInputComponent.prototype.ngOnInit = function () {
        _super.prototype.ngOnInit.call(this);
        var self = this;
        var mergeSubscription = merge(this.dateInput.onValueChange, this.hourInput.onValueChange).subscribe(function (event) {
            if (event.isUserChange()) {
                self.updateComponentValue();
                var newValue = self._fControl.value;
                self.emitOnValueChange(OValueChangeEvent.USER_CHANGE, newValue, self.oldValue);
                self.oldValue = newValue;
            }
        });
        this.subscription.add(mergeSubscription);
    };
    OTimeInputComponent.prototype.ngAfterViewInit = function () {
        this.modifyFormControls();
        _super.prototype.ngAfterViewInit.call(this);
        this.registerFormControls();
        this.setInnerComponentsData();
    };
    OTimeInputComponent.prototype.ngOnDestroy = function () {
        this.subscription.unsubscribe();
    };
    OTimeInputComponent.prototype.createFormControl = function (cfg, validators) {
        this._fControl = _super.prototype.createFormControl.call(this, cfg, validators);
        this._fControl.fControlChildren = [this.dateInput, this.hourInput];
        return this._fControl;
    };
    OTimeInputComponent.prototype.onFormControlChange = function (value) {
        _super.prototype.onFormControlChange.call(this, value);
        this.setInnerComponentsData();
    };
    OTimeInputComponent.prototype.setValue = function (newValue, options) {
        var changed = this.oldValue !== newValue;
        _super.prototype.setValue.call(this, newValue, options);
        if (changed) {
            this.setInnerComponentsData();
        }
    };
    OTimeInputComponent.prototype.onClickClearValue = function () {
        this.blockGroupValueChanges = true;
        if (this.dateInput) {
            this.dateInput.clearValue();
        }
        if (this.hourInput) {
            this.hourInput.clearValue();
        }
        this.clearValue();
        this.blockGroupValueChanges = false;
    };
    OTimeInputComponent.prototype.setInnerComponentsData = function () {
        var dateValue;
        var hourValue;
        if (Util.isDefined(this.value) && Util.isDefined(this.value.value)) {
            var momentD = moment(this.value.value);
            if (momentD.isValid()) {
                dateValue = momentD.clone().startOf('day').valueOf();
                hourValue = momentD.clone().valueOf() - dateValue;
            }
        }
        if (this.dateInput) {
            this.dateInput.setValue(dateValue);
        }
        if (this.hourInput) {
            this.hourInput.setTimestampValue(hourValue);
        }
        this.cd.detectChanges();
    };
    OTimeInputComponent.prototype.updateComponentValue = function () {
        if (!this.value) {
            this.value = new OFormValue();
        }
        var timeValue;
        var values = this.formGroup.getRawValue();
        var mDate = (values['dateInput'] ? moment(values['dateInput']) : moment()).startOf('day');
        var mHour = this.hourInput.valueType === 'timestamp' ? moment(values['hourInput']) : moment(values['hourInput'], this.hourInput.formatString);
        timeValue = mDate.clone()
            .set('hour', mHour.get('hour'))
            .set('minute', mHour.get('minutes'))
            .valueOf();
        if (this._fControl) {
            this._fControl.setValue(timeValue);
            this._fControl.markAsDirty();
        }
        this.ensureOFormValue(timeValue);
    };
    OTimeInputComponent.prototype.modifyFormControls = function () {
        if (this.dateInput) {
            var self_1 = this;
            this.dateInput.getFormGroup = function () {
                return self_1.formGroup;
            };
        }
        if (this.hourInput) {
            var self_2 = this;
            this.hourInput.getFormGroup = function () {
                return self_2.formGroup;
            };
        }
        if (this.form) {
            this.form.formGroup.removeControl('dateInput');
            this.form.formGroup.removeControl('hourInput');
        }
    };
    OTimeInputComponent.prototype.registerFormControls = function () {
        if (this.dateInput && this.dateInput.getFormControl()) {
            this.formGroup.registerControl('dateInput', this.dateInput.getFormControl());
        }
        if (this.hourInput) {
            if (this.hourInput.getFormControl()) {
                this.formGroup.registerControl('hourInput', this.hourInput.getFormControl());
            }
        }
    };
    OTimeInputComponent.DEFAULT_INPUTS_O_TIME_INPUT = DEFAULT_INPUTS_O_TIME_INPUT;
    OTimeInputComponent.DEFAULT_OUTPUTS_O_TIME_INPUT = DEFAULT_OUTPUTS_O_TIME_INPUT;
    OTimeInputComponent.decorators = [
        { type: Component, args: [{
                    moduleId: module.id,
                    selector: 'o-time-input',
                    template: "\n    <div [formGroup]=\"getFormGroup()\" [matTooltip]=\"tooltip\" [matTooltipClass]=\"tooltipClass\"\n      [matTooltipPosition]=\"tooltipPosition\" [matTooltipShowDelay]=\"tooltipShowDelay\"\n      [matTooltipHideDelay]=\"tooltipHideDelay\">\n      <div class=\"mat-form-field mat-form-field-appearance-legacy\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\"\n        fxLayoutGap=\"8px\">\n        <o-date-input #dateInput fxFlex attr=\"dateInput\" [read-only]=\"readOnly\" [enabled]=\"enabled\" [required]=\"isRequired\"\n          [label]=\"olabel\" clear-button=\"no\" automatic-registering=\"no\" automatic-binding=\"no\"\n          (onFocus)=\"innerOnFocus($event)\" (onBlur)=\"innerOnBlur($event)\" [format]=\"oDateFormat\" [locale]=\"oDateLocale\"\n          [start-view]=\"oDateStartView\" [min]=\"oDateMinDate\" [max]=\"oDateMaxDate\" [touch-ui]=\"oDateTouchUi\"\n          [start-at]=\"oDateStartAt\" [filter-date]=\"oDateFilterDate\" [text-input-enabled]=\"oDateTextInputEnabled\"\n          [placeholder]=\"oDatePlaceholder\" [label-visible]=\"labelVisible\" [hide-required-marker]=\"hideRequiredMarker\">\n        </o-date-input>\n\n        <span class=\"separator\">&ndash;</span>\n\n        <o-hour-input #hourInput fxFlex attr=\"hourInput\" [read-only]=\"readOnly\" [enabled]=\"enabled\" [required]=\"isRequired\"\n          clear-button=\"no\" automatic-registering=\"no\" automatic-binding=\"no\" (onFocus)=\"innerOnFocus($event)\"\n          (onBlur)=\"innerOnBlur($event)\" [format]=\"oHourFormat\" [text-input-enabled]=\"oHourTextInputEnabled\"\n          [min]=\"oHourMin\" [max]=\"oHourMax\" hide-required-marker=\"yes\" label-visible=\"no\" [placeholder]=\"oHourPlaceholder\">\n        </o-hour-input>\n\n        <button class=\"mat-form-field-suffix\" type=\"button\" *ngIf=\"showClearButton\" matSuffix mat-icon-button\n          (click)=\"onClickClearValue()\">\n          <mat-icon svgIcon=\"ontimize:close\"></mat-icon>\n        </button>\n      </div>\n\n      <mat-error *ngFor=\"let oError of getActiveOErrors()\" text=\"{{ oError.text | oTranslate }}\"></mat-error>\n    </div>\n  ",
                    styles: ["\n    .o-time-input .separator{cursor:default}.o-time-input .mat-form-field.icon-field:not(.custom-width).icon-field-1-suffix .mat-form-field-infix{width:auto}\n  "],
                    inputs: DEFAULT_INPUTS_O_TIME_INPUT,
                    outputs: DEFAULT_OUTPUTS_O_TIME_INPUT,
                    encapsulation: ViewEncapsulation.None,
                    host: {
                        '[class.o-time-input]': 'true'
                    }
                },] },
    ];
    OTimeInputComponent.ctorParameters = function () { return [
        { type: OFormComponent, decorators: [{ type: Optional }, { type: Inject, args: [forwardRef(function () { return OFormComponent; }),] }] },
        { type: ElementRef },
        { type: Injector },
        { type: ChangeDetectorRef }
    ]; };
    OTimeInputComponent.propDecorators = {
        dateInput: [{ type: ViewChild, args: ['dateInput',] }],
        hourInput: [{ type: ViewChild, args: ['hourInput',] }]
    };
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OTimeInputComponent.prototype, "oDateTouchUi", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OTimeInputComponent.prototype, "oDateTextInputEnabled", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OTimeInputComponent.prototype, "oHourTextInputEnabled", void 0);
    return OTimeInputComponent;
}(OFormDataComponent));
export { OTimeInputComponent };
var OTimeInputModule = (function () {
    function OTimeInputModule() {
    }
    OTimeInputModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [OTimeInputComponent],
                    imports: [CommonModule, ODateInputModule, OHourInputModule, OSharedModule],
                    exports: [OTimeInputComponent]
                },] },
    ];
    return OTimeInputModule;
}());
export { OTimeInputModule };
//# sourceMappingURL=o-time-input.component.js.map