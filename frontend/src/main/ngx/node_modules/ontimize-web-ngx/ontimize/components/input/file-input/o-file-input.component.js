var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { CommonModule } from '@angular/common';
import { Component, ElementRef, EventEmitter, forwardRef, Inject, Injector, NgModule, Optional, ViewChild } from '@angular/core';
import { InputConverter } from '../../../decorators';
import { OntimizeFileService } from '../../../services';
import { OSharedModule } from '../../../shared';
import { OFormComponent } from '../../form/o-form.component';
import { DEFAULT_OUTPUTS_O_FORM_DATA_COMPONENT, OFormDataComponent, OValueChangeEvent } from '../../o-form-data-component.class';
import { OFileItem } from './o-file-item.class';
import { OFileUploader } from './o-file-uploader.class';
export var DEFAULT_INPUTS_O_FILE_INPUT = [
    'oattr: attr',
    'olabel: label',
    'floatLabel: float-label',
    'oplaceholder: placeholder',
    'tooltip',
    'tooltipPosition: tooltip-position',
    'tooltipShowDelay: tooltip-show-delay',
    'tooltipHideDelay: tooltip-hide-delay',
    'enabled',
    'orequired: required',
    'service',
    'entity',
    'serviceType : service-type',
    'width',
    'readOnly: read-only',
    'clearButton: clear-button',
    'acceptFileType: accept-file-type',
    'maxFileSize: max-file-size',
    'multiple',
    'maxFiles: max-files',
    'showInfo: show-info',
    'splitUpload: split-upload',
    'additionalData: additional-data',
    'appearance',
    'hideRequiredMarker:hide-required-marker',
    'labelVisible:label-visible'
];
export var DEFAULT_OUTPUTS_O_FILE_INPUT = DEFAULT_OUTPUTS_O_FORM_DATA_COMPONENT.concat([
    'onBeforeUpload',
    'onBeforeUploadFile',
    'onProgress',
    'onProgressFile',
    'onCancel',
    'onCancelFile',
    'onUpload',
    'onUploadFile',
    'onComplete',
    'onCompleteFile',
    'onError',
    'onErrorFile'
]);
var OFileInputComponent = (function (_super) {
    __extends(OFileInputComponent, _super);
    function OFileInputComponent(form, elRef, injector) {
        var _this = _super.call(this, form, elRef, injector) || this;
        _this.autoBinding = false;
        _this.autoRegistering = false;
        _this.showInfo = false;
        _this.multiple = false;
        _this.splitUpload = true;
        _this.maxFiles = -1;
        _this.onBeforeUpload = new EventEmitter();
        _this.onBeforeUploadFile = new EventEmitter();
        _this.onProgress = new EventEmitter();
        _this.onProgressFile = new EventEmitter();
        _this.onCancel = new EventEmitter();
        _this.onCancelFile = new EventEmitter();
        _this.onUpload = new EventEmitter();
        _this.onUploadFile = new EventEmitter();
        _this.onComplete = new EventEmitter();
        _this.onCompleteFile = new EventEmitter();
        _this.onError = new EventEmitter();
        _this.onErrorFile = new EventEmitter();
        return _this;
    }
    OFileInputComponent.prototype.ngOnInit = function () {
        var _this = this;
        _super.prototype.ngOnInit.call(this);
        this.initialize();
        this.uploader.onBeforeUploadAll = function () { return _this.onBeforeUpload.emit(); };
        this.uploader.onBeforeUploadItem = function (item) { return _this.onBeforeUploadFile.emit(item); };
        this.uploader.onProgressAll = function (progress) { return _this.onProgress.emit(progress); };
        this.uploader.onProgressItem = function (item, progress) { return _this.onProgressFile.emit({ item: item, progress: progress }); };
        this.uploader.onCancelAll = function () { return _this.onCancel.emit(); };
        this.uploader.onCancelItem = function (item) { return _this.onCancelFile.emit(); };
        this.uploader.onSuccessAll = function (response) { return _this.onUpload.emit({ response: response }); };
        this.uploader.onSuccessItem = function (item, response) { return _this.onUploadFile.emit({ item: item, response: response }); };
        this.uploader.onCompleteAll = function () { return _this.onComplete.emit(); };
        this.uploader.onCompleteItem = function (item) { return _this.onCompleteFile.emit(item); };
        this.uploader.onErrorAll = function (error) { return _this.onError.emit(error); };
        this.uploader.onErrorItem = function (item, error) { return _this.onErrorFile.emit({ item: item, error: error }); };
    };
    OFileInputComponent.prototype.initialize = function () {
        _super.prototype.initialize.call(this);
        if (!this.service) {
            this.service = this.form.service;
        }
        if (!this.entity) {
            this.entity = this.form.entity;
        }
        this.configureService();
        this.uploader = new OFileUploader(this.fileService, this.entity);
        this.uploader.splitUpload = this.splitUpload;
    };
    OFileInputComponent.prototype.configureService = function () {
        var loadingService = OntimizeFileService;
        if (this.serviceType) {
            loadingService = this.serviceType;
        }
        try {
            this.fileService = this.injector.get(loadingService);
            if (this.fileService) {
                var serviceCfg = this.fileService.getDefaultServiceConfiguration(this.service);
                if (this.entity) {
                    serviceCfg.entity = this.entity;
                }
                this.fileService.configureService(serviceCfg);
            }
        }
        catch (e) {
            console.error(e);
        }
    };
    OFileInputComponent.prototype.resolveValidators = function () {
        var validators = _super.prototype.resolveValidators.call(this);
        if (this.acceptFileType) {
            validators.push(this.filetypeValidator.bind(this));
        }
        if (this.maxFileSize) {
            validators.push(this.maxFileSizeValidator.bind(this));
        }
        if (this.multiple && this.maxFiles !== -1) {
            validators.push(this.maxFilesValidator.bind(this));
        }
        return validators;
    };
    OFileInputComponent.prototype.fileSelected = function (event) {
        var _this = this;
        var value = '';
        if (event) {
            var target = event.target || event.srcElement;
            if (target.files.length > 0) {
                var files = target.files;
                if (!this.multiple) {
                    this.uploader.clear();
                }
                for (var i = 0, f = void 0; i < files.length; i++) {
                    f = files[i];
                    var fileItem = new OFileItem(f, this.uploader);
                    this.uploader.addFile(fileItem);
                }
                value = this.uploader.files.map(function (file) { return file.name; }).join(', ');
                window.setTimeout(function () {
                    _this.setValue(value !== '' ? value : undefined, { changeType: OValueChangeEvent.USER_CHANGE });
                    if (_this._fControl) {
                        _this._fControl.markAsTouched();
                    }
                }, 0);
            }
        }
    };
    OFileInputComponent.prototype.onClickClearValue = function (e) {
        _super.prototype.onClickClearValue.call(this, e);
        this.uploader.clear();
    };
    OFileInputComponent.prototype.clearValue = function () {
        _super.prototype.clearValue.call(this);
        this.uploader.clear();
    };
    OFileInputComponent.prototype.onClickUpload = function (e) {
        e.stopPropagation();
        if (this.isValid) {
            this.upload();
        }
    };
    OFileInputComponent.prototype.upload = function () {
        this.uploader.upload();
    };
    Object.defineProperty(OFileInputComponent.prototype, "files", {
        get: function () {
            return this.uploader.files;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OFileInputComponent.prototype, "additionalData", {
        get: function () {
            if (this.uploader) {
                return this.uploader.data;
            }
            return null;
        },
        set: function (data) {
            if (this.uploader) {
                this.uploader.data = data;
            }
        },
        enumerable: true,
        configurable: true
    });
    OFileInputComponent.prototype.innerOnChange = function (event) {
        this.ensureOFormValue(event);
        if (this._fControl && this._fControl.touched) {
            this._fControl.markAsDirty();
        }
        this.onChange.emit(event);
    };
    OFileInputComponent.prototype.filetypeValidator = function (control) {
        if (control.value && control.value.length > 0 && this.acceptFileType) {
            var regex_1 = new RegExp(this.acceptFileType.replace(';', '|'));
            if (!this.files.every(function (file) { return file.type.match(regex_1) !== null || file.name.substr(file.name.lastIndexOf('.')).match(regex_1) !== null; })) {
                return {
                    fileType: {
                        allowedFileTypes: this.acceptFileType.replace(';', ', ')
                    }
                };
            }
        }
        return {};
    };
    OFileInputComponent.prototype.maxFileSizeValidator = function (control) {
        var _this = this;
        if (control.value && control.value.length > 0 && this.maxFileSize) {
            if (!this.files.every(function (file) { return file.size < _this.maxFileSize; })) {
                return {
                    fileSize: {
                        maxFileSize: this.maxFileSize
                    }
                };
            }
        }
        return {};
    };
    OFileInputComponent.prototype.maxFilesValidator = function (control) {
        if (control.value && control.value.length > 0 && this.multiple && this.maxFiles !== -1) {
            if (this.maxFiles < this.files.length) {
                return {
                    numFile: {
                        maxFiles: this.maxFiles
                    }
                };
            }
        }
        return {};
    };
    OFileInputComponent.DEFAULT_INPUTS_O_FILE_INPUT = DEFAULT_INPUTS_O_FILE_INPUT;
    OFileInputComponent.DEFAULT_OUTPUTS_O_FILE_INPUT = DEFAULT_OUTPUTS_O_FILE_INPUT;
    OFileInputComponent.decorators = [
        { type: Component, args: [{
                    moduleId: module.id,
                    selector: 'o-file-input',
                    template: "\n    <div fxLayout=\"row\" fxLayoutAlign=\"space-between center\" [formGroup]=\"getFormGroup()\" [matTooltip]=\"tooltip\" [matTooltipClass]=\"tooltipClass\"\n      [matTooltipPosition]=\"tooltipPosition\" [matTooltipShowDelay]=\"tooltipShowDelay\" [matTooltipHideDelay]=\"tooltipHideDelay\">\n      <mat-form-field [appearance]=\"appearance\" [floatLabel]=\"floatLabel\"  [hideRequiredMarker]=\"hideRequiredMarker\" [class.custom-width]=\"hasCustomWidth\" class=\"icon-field\"\n        (click)=\"!enabled || isReadOnly ? null : inputFile.click()\" fxFill>\n        <mat-label *ngIf=\"labelVisible\">{{ olabel | oTranslate }}</mat-label>\n        <input #inputShowValue matInput type=\"text\" [id]=\"getAttribute()\" [formControlName]=\"getAttribute()\" [placeholder]=\"placeHolder\"\n          [required]=\"isRequired\" readonly (change)=\"onChangeEvent($event)\">\n        <button type=\"button\" *ngIf=\"showClearButton\" matSuffix mat-icon-button (click)=\"onClickClearValue($event)\">\n          <mat-icon svgIcon=\"ontimize:close\"></mat-icon>\n        </button>\n        <button type=\"button\" *ngIf=\"getValue()\" [disabled]=\"!isValid || uploader.isUploading\" matSuffix mat-icon-button (click)=\"onClickUpload($event)\">\n          <mat-icon>file_upload</mat-icon>\n        </button>\n        <mat-error *ngIf=\"hasError('required')\" text=\"{{ 'FORM_VALIDATION.REQUIRED' | oTranslate }}\"></mat-error>\n        <mat-error *ngIf=\"hasError('fileType')\" text=\"{{ 'FORM_VALIDATION.FILE_TYPE' | oTranslate}} ({{ getErrorValue('fileType','allowedFileTypes') }})\">\n        </mat-error>\n        <mat-error *ngIf=\"hasError('fileSize')\"\n          text=\"{{ 'FORM_VALIDATION.FILE_MAXSIZE' | oTranslate }}: {{ getErrorValue('fileSize', 'maxFileSize') }} bytes\"></mat-error>\n        <mat-error *ngIf=\"hasError('numFile')\" text=\"{{ 'FORM_VALIDATION.FILE_MAXNUM' | oTranslate }}: {{ getErrorValue('numFile', 'maxFiles') }}\">\n        </mat-error>\n        <mat-error *ngFor=\"let oError of getActiveOErrors()\" text=\"{{ oError.text | oTranslate }}\"></mat-error>\n      </mat-form-field>\n      <input #inputFile type=\"file\" id=\"{{getAttribute()+'-file-input'}}\" [attr.accept]=\"acceptFileType ? acceptFileType.replace(';',',') : null\"\n        (change)=\"fileSelected($event)\" hidden=\"true\" [attr.multiple]=\"multiple ? '' : null\">\n      <div *ngIf=\"showInfo && files\">\n        <mat-progress-bar *ngIf=\"!splitUpload && uploader.isUploading\" color=\"accent\" mode=\"determinate\" [value]=\"uploader.progress\"></mat-progress-bar>\n        <mat-list>\n          <mat-list-item *ngFor=\"let file of files\">\n            <mat-icon mat-list-icon>insert_drive_file</mat-icon>\n            <span mat-line>{{ file.name }}</span>\n            <div fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n              <mat-progress-spinner *ngIf=\"splitUpload && file.isUploading\" color=\"accent\" mode=\"determinate\" [value]=\"file.progress\" class=\"uploading\"\n                diameter=\"3\" strokeWidth=\"3\"></mat-progress-spinner>\n              <mat-icon *ngIf=\"splitUpload && file.isUploaded && file.isSuccess\" class=\"uploaded\" svgIcon=\"ontimize:check_circle\"></mat-icon>\n              <mat-icon *ngIf=\"splitUpload && file.isUploaded && file.isError\" class=\"error\" svgIcon=\"ontimize:error_outline\"></mat-icon>\n            </div>\n          </mat-list-item>\n        </mat-list>\n      </div>\n    </div>\n  ",
                    styles: ["\n    .o-file-input-buttons{position:absolute;top:0;bottom:0;right:0;margin:auto}mat-icon.uploaded{color:#0f9d58}mat-icon.error{color:#D50000}\n  "],
                    inputs: DEFAULT_INPUTS_O_FILE_INPUT,
                    outputs: DEFAULT_OUTPUTS_O_FILE_INPUT
                },] },
    ];
    OFileInputComponent.ctorParameters = function () { return [
        { type: OFormComponent, decorators: [{ type: Optional }, { type: Inject, args: [forwardRef(function () { return OFormComponent; }),] }] },
        { type: ElementRef },
        { type: Injector }
    ]; };
    OFileInputComponent.propDecorators = {
        inputFile: [{ type: ViewChild, args: ['inputFile',] }]
    };
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OFileInputComponent.prototype, "showInfo", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OFileInputComponent.prototype, "multiple", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OFileInputComponent.prototype, "splitUpload", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Number)
    ], OFileInputComponent.prototype, "maxFiles", void 0);
    return OFileInputComponent;
}(OFormDataComponent));
export { OFileInputComponent };
var OFileInputModule = (function () {
    function OFileInputModule() {
    }
    OFileInputModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [OFileInputComponent],
                    imports: [CommonModule, OSharedModule],
                    exports: [OFileInputComponent]
                },] },
    ];
    return OFileInputModule;
}());
export { OFileInputModule };
//# sourceMappingURL=o-file-input.component.js.map