{"version":3,"file":"o-table-cell-renderer-image.component.js","sourceRoot":"","sources":["../../../../../../../tmp/ontimize/components/table/column/cell-renderer/image/o-table-cell-renderer-image.component.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,WAAW,EAAE,SAAS,EAAE,uBAAuB,EAAE,MAAM,eAAe,CAAC;AAErG,OAAO,EAAE,IAAI,EAAE,MAAM,0BAA0B,CAAC;AAEhD,OAAO,EAAE,sBAAsB,EAAE,MAAM,qCAAqC,CAAC;AAE7E,MAAM,CAAC,IAAM,0CAA0C,GAAG;IAExD,uBAAuB;IAEvB,yBAAyB;IAEzB,QAAQ;CACT,CAAC;AAEF,MAAM,CAAC,IAAM,2CAA2C,GAAG;IACzD,SAAS;CACV,CAAC;AAEF;IAasD,oDAAsB;IAW1E,0CAAsB,QAAkB;QAAxC,YACE,kBAAM,QAAQ,CAAC,SAIhB;QALqB,cAAQ,GAAR,QAAQ,CAAU;QAEtC,KAAI,CAAC,WAAW,CAAC,IAAI,GAAG,OAAO,CAAC;QAChC,KAAI,CAAC,WAAW,CAAC,SAAS,GAAG,KAAK,CAAC;QACnC,KAAI,CAAC,WAAW,CAAC,UAAU,GAAG,KAAK,CAAC;;IACtC,CAAC;IAED,mDAAQ,GAAR;QACE,IAAI,IAAI,CAAC,KAAK,EAAE;YACd,IAAM,IAAI,GAAY,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YACnE,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS,CAAC;YACzF,IAAI,CAAC,UAAU,CAAC,YAAY,GAAG,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,CAAC,QAAQ,CAAC;SACvG;IACH,CAAC;IAED,oDAAS,GAAT,UAAU,QAAa;QACrB,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;QAClB,QAAQ,IAAI,CAAC,SAAS,EAAE;YACtB,KAAK,QAAQ;gBACX,IAAI,CAAC,OAAO,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,wBAAwB,GAAG,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,WAAW,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;gBACjJ,MAAM;YACR,KAAK,KAAK;gBACR,IAAI,CAAC,OAAO,GAAG,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;gBACrD,MAAM;YACR;gBACE,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC;gBAC/B,MAAM;SACT;QACD,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAtCa,2EAA0C,GAAG,0CAA0C,CAAC;IACxF,4EAA2C,GAAG,2CAA2C,CAAC;;gBAhBzG,SAAS,SAAC;oBACT,QAAQ,EAAE,MAAM,CAAC,EAAE;oBACnB,QAAQ,EAAE,6BAA6B;oBACvC,QAAQ,EAAE,4NAMT;oBACD,eAAe,EAAE,uBAAuB,CAAC,MAAM;oBAC/C,MAAM,EAAE,0CAA0C;iBACnD;;;gBA/BmB,QAAQ;;;8BAyCzB,SAAS,SAAC,aAAa,EAAE,EAAE,IAAI,EAAE,WAAW,EAAE;;IAiCjD,uCAAC;CAAA,AAvDD,CAasD,sBAAsB,GA0C3E;SA1CY,gCAAgC","sourcesContent":["import { Component, Injector, TemplateRef, ViewChild, ChangeDetectionStrategy } from '@angular/core';\n\nimport { Util } from '../../../../../util/util';\nimport { OColumn } from '../../../o-table.component';\nimport { OBaseTableCellRenderer } from '../o-base-table-cell-renderer.class';\n\nexport const DEFAULT_INPUTS_O_TABLE_CELL_RENDERER_IMAGE = [\n  // image-type [base64|url]: image type (extern url or base64). Default: no value.\n  'imageType: image-type',\n  // empty-image [string]: url of the image to be shown if the column has not any value. Default: no value.\n  'emptyImage: empty-image',\n  // avatar [no|yes]: view image as avatar (circle), only at presentation level. Default: no.\n  'avatar'\n];\n\nexport const DEFAULT_OUTPUTS_O_TABLE_CELL_RENDERER_IMAGE = [\n  'onClick'\n];\n\n@Component({\n  moduleId: module.id,\n  selector: 'o-table-cell-renderer-image',\n  template: `\n    <ng-template #templateref let-cellvalue=\"cellvalue\">\n      <div [ngClass]=\"{'image-avatar':avatar,'image-plain':!avatar} \">\n        <img [src]=\"getSource(cellvalue)\">\n      </div>\n    </ng-template>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: DEFAULT_INPUTS_O_TABLE_CELL_RENDERER_IMAGE\n})\nexport class OTableCellRendererImageComponent extends OBaseTableCellRenderer {\n\n  public static DEFAULT_INPUTS_O_TABLE_CELL_RENDERER_IMAGE = DEFAULT_INPUTS_O_TABLE_CELL_RENDERER_IMAGE;\n  public static DEFAULT_OUTPUTS_O_TABLE_CELL_RENDERER_IMAGE = DEFAULT_OUTPUTS_O_TABLE_CELL_RENDERER_IMAGE;\n\n  public imageType: string;\n  public emptyImage: string;\n  protected _source: string;\n  avatar: string;\n  @ViewChild('templateref', { read: TemplateRef }) public templateref: TemplateRef<any>;\n\n  constructor(protected injector: Injector) {\n    super(injector);\n    this.tableColumn.type = 'image';\n    this.tableColumn.orderable = false;\n    this.tableColumn.searchable = false;\n  }\n\n  ngOnInit() {\n    if (this.table) {\n      const oCol: OColumn = this.table.getOColumn(this.tableColumn.attr);\n      oCol.title = Util.isDefined(this.tableColumn.title) ? this.tableColumn.title : undefined;\n      oCol.definition.contentAlign = oCol.definition.contentAlign ? oCol.definition.contentAlign : 'center';\n    }\n  }\n\n  getSource(cellData: any) {\n    this._source = '';\n    switch (this.imageType) {\n      case 'base64':\n        this._source = cellData ? ('data:image/png;base64,' + ((typeof (cellData.bytes) !== 'undefined') ? cellData.bytes : cellData)) : this.emptyImage;\n        break;\n      case 'url':\n        this._source = cellData ? cellData : this.emptyImage;\n        break;\n      default:\n        this._source = this.emptyImage;\n        break;\n    }\n    return this._source;\n  }\n\n}\n"]}