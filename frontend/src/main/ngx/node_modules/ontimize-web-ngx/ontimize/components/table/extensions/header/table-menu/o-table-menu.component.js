var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, forwardRef, Inject, Injector, ViewChild, ViewEncapsulation } from '@angular/core';
import { MatDialog, MatMenu } from '@angular/material';
import { InputConverter } from '../../../../../decorators';
import { DialogService, OTranslateService, SnackBarService } from '../../../../../services';
import { PermissionsUtils } from '../../../../../util/permissions';
import { Codes, Util } from '../../../../../utils';
import { OTableComponent } from '../../../o-table.component';
import { OTableCellRendererImageComponent } from '../../../table-components';
import { OTableApplyConfigurationDialogComponent, OTableExportConfiguration, OTableExportDialogComponent, OTableLoadFilterDialogComponent, OTableStoreConfigurationDialogComponent, OTableStoreFilterDialogComponent, OTableVisibleColumnsDialogComponent } from '../../dialog/o-table-dialog-components';
import { OTableOptionComponent } from '../table-option/o-table-option.component';
export var DEFAULT_INPUTS_O_TABLE_MENU = [
    'selectAllCheckbox: select-all-checkbox',
    'exportButton: export-button',
    'columnsVisibilityButton: columns-visibility-button'
];
export var DEFAULT_OUTPUTS_O_TABLE_MENU = [];
var OTableMenuComponent = (function () {
    function OTableMenuComponent(injector, dialog, cd, table) {
        this.injector = injector;
        this.dialog = dialog;
        this.cd = cd;
        this.table = table;
        this.selectAllCheckbox = false;
        this.exportButton = true;
        this.columnsVisibilityButton = true;
        this.mutationObservers = [];
        this.dialogService = this.injector.get(DialogService);
        this.translateService = this.injector.get(OTranslateService);
        this.snackBarService = this.injector.get(SnackBarService);
    }
    OTableMenuComponent.prototype.ngOnInit = function () {
        this.permissions = this.table.getMenuPermissions();
    };
    OTableMenuComponent.prototype.ngAfterViewInit = function () {
        if (this.columnFilterOption) {
            this.columnFilterOption.setActive(this.table.showFilterByColumnIcon);
            this.cd.detectChanges();
        }
        if (!this.permissions.items || this.permissions.items.length === 0) {
            return;
        }
        if (this.selectAllCheckboxOption && !this.enabledSelectAllCheckbox) {
            this.disableOTableOptionComponent(this.selectAllCheckboxOption);
        }
        if (this.exportButtonOption && !this.enabledExportButton) {
            this.disableOTableOptionComponent(this.exportButtonOption);
        }
        if (this.columnsVisibilityButtonOption && !this.enabledColumnsVisibilityButton) {
            this.disableOTableOptionComponent(this.columnsVisibilityButtonOption);
        }
        if (this.filterMenuButton && !this.enabledFilterMenu) {
            this.disableButton(this.filterMenuButton);
        }
        if (this.configurationMenuButton && !this.enabledConfigurationMenu) {
            this.disableButton(this.configurationMenuButton);
        }
        this.cd.detectChanges();
    };
    OTableMenuComponent.prototype.disableOTableOptionComponent = function (comp) {
        comp.enabled = false;
        var buttonEL = comp.elRef.nativeElement.querySelector('button');
        var obs = PermissionsUtils.registerDisabledChangesInDom(buttonEL);
        this.mutationObservers.push(obs);
    };
    OTableMenuComponent.prototype.disableButton = function (buttonEL) {
        buttonEL.nativeElement.disabled = true;
        var obs = PermissionsUtils.registerDisabledChangesInDom(buttonEL.nativeElement);
        this.mutationObservers.push(obs);
    };
    OTableMenuComponent.prototype.ngOnDestroy = function () {
        if (this.mutationObservers) {
            this.mutationObservers.forEach(function (m) {
                m.disconnect();
            });
        }
    };
    OTableMenuComponent.prototype.registerOptions = function (oTableOptions) {
        var items = this.permissions.items || [];
        var fixedOptions = ['select-all-checkbox', 'export', 'show-hide-columns', 'filter', 'configuration'];
        var userItems = items.filter(function (perm) { return fixedOptions.indexOf(perm.attr) === -1; });
        var self = this;
        userItems.forEach(function (perm) {
            var option = oTableOptions.find(function (oTableOption) { return oTableOption.oattr === perm.attr; });
            self.setPermissionsToOTableOption(perm, option);
        });
    };
    OTableMenuComponent.prototype.setPermissionsToOTableOption = function (perm, option) {
        if (perm.visible === false && option) {
            option.elRef.nativeElement.remove();
        }
        else if (perm.enabled === false && option) {
            option.enabled = false;
            var buttonEL = option.elRef.nativeElement.querySelector('button');
            var obs = PermissionsUtils.registerDisabledChangesInDom(buttonEL);
            this.mutationObservers.push(obs);
        }
    };
    OTableMenuComponent.prototype.getPermissionByAttr = function (attr) {
        var items = this.permissions.items || [];
        return items.find(function (perm) { return perm.attr === attr; });
    };
    Object.defineProperty(OTableMenuComponent.prototype, "isSelectAllOptionActive", {
        get: function () {
            return this.table.oTableOptions.selectColumn.visible;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableMenuComponent.prototype, "showColumnsFilterOption", {
        get: function () {
            return this.table.oTableColumnsFilterComponent !== undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableMenuComponent.prototype, "enabledColumnsFilterOption", {
        get: function () {
            return this.table.oTableColumnsFilterComponent !== undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableMenuComponent.prototype, "showSelectAllCheckbox", {
        get: function () {
            if (!this.selectAllCheckbox) {
                return false;
            }
            var perm = this.getPermissionByAttr('select-all-checkbox');
            return !(perm && perm.visible === false);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableMenuComponent.prototype, "rowHeightObservable", {
        get: function () {
            return this.table.rowHeightObservable;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableMenuComponent.prototype, "enabledSelectAllCheckbox", {
        get: function () {
            var perm = this.getPermissionByAttr('select-all-checkbox');
            return !(perm && perm.enabled === false);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableMenuComponent.prototype, "showExportButton", {
        get: function () {
            if (!this.exportButton) {
                return false;
            }
            var perm = this.getPermissionByAttr('export');
            return !(perm && perm.visible === false);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableMenuComponent.prototype, "enabledExportButton", {
        get: function () {
            var perm = this.getPermissionByAttr('export');
            return !(perm && perm.enabled === false);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableMenuComponent.prototype, "showColumnsVisibilityButton", {
        get: function () {
            if (!this.columnsVisibilityButton) {
                return false;
            }
            var perm = this.getPermissionByAttr('show-hide-columns');
            return !(perm && perm.visible === false);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableMenuComponent.prototype, "enabledColumnsVisibilityButton", {
        get: function () {
            var perm = this.getPermissionByAttr('show-hide-columns');
            return !(perm && perm.enabled === false);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableMenuComponent.prototype, "showFilterMenu", {
        get: function () {
            var perm = this.getPermissionByAttr('filter');
            return !(perm && perm.visible === false);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableMenuComponent.prototype, "enabledFilterMenu", {
        get: function () {
            var perm = this.getPermissionByAttr('filter');
            return !(perm && perm.enabled === false);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableMenuComponent.prototype, "showConfigurationMenu", {
        get: function () {
            var perm = this.getPermissionByAttr('configuration');
            return !(perm && perm.visible === false);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableMenuComponent.prototype, "enabledConfigurationMenu", {
        get: function () {
            var perm = this.getPermissionByAttr('configuration');
            return !(perm && perm.enabled === false);
        },
        enumerable: true,
        configurable: true
    });
    OTableMenuComponent.prototype.onShowsSelects = function (event) {
        var tableOptions = this.table.oTableOptions;
        tableOptions.selectColumn.visible = !tableOptions.selectColumn.visible;
        this.table.initializeCheckboxColumn();
    };
    OTableMenuComponent.prototype.onExportButtonClicked = function () {
        var _this = this;
        var tableOptions = this.table.oTableOptions;
        var exportCnfg = new OTableExportConfiguration();
        exportCnfg.data = this.table.exportMode === Codes.EXPORT_MODE_VISIBLE ? this.table.getRenderedValue() : this.table.getAllRenderedValues();
        var colsNotIncluded = tableOptions.columns.filter(function (c) { return void 0 !== c.renderer && c.renderer instanceof OTableCellRendererImageComponent; }).map(function (c) { return c.attr; });
        colsNotIncluded.push(OTableComponent.NAME_COLUMN_SELECT);
        colsNotIncluded.forEach(function (attr) { return exportCnfg.data.forEach(function (row) { return delete row[attr]; }); });
        exportCnfg.columns = tableOptions.visibleColumns.filter(function (c) { return colsNotIncluded.indexOf(c) === -1; });
        var tableColumnNames = {};
        tableOptions.visibleColumns.filter(function (c) { return colsNotIncluded.indexOf(c) === -1; }).forEach(function (c) { return tableColumnNames[c] = _this.translateService.get(c); });
        exportCnfg.columnNames = tableColumnNames;
        exportCnfg.sqlTypes = this.table.getSqlTypes();
        exportCnfg.service = this.table.service;
        var dialogRef = this.dialog.open(OTableExportDialogComponent, {
            data: exportCnfg,
            disableClose: true,
            panelClass: ['o-dialog-class', 'o-table-dialog']
        });
        dialogRef.afterClosed().subscribe(function (result) { return result ? _this.snackBarService.open('MESSAGES.SUCCESS_EXPORT_TABLE_DATA', { icon: 'check_circle' }) : null; });
    };
    OTableMenuComponent.prototype.onChangeColumnsVisibilityClicked = function () {
        var _this = this;
        var dialogRef = this.dialog.open(OTableVisibleColumnsDialogComponent, {
            data: {
                originalVisibleColumns: Util.parseArray(this.table.originalVisibleColumns, true),
                columnsData: this.table.oTableOptions.columns,
                rowHeight: this.table.rowHeight
            },
            disableClose: true,
            panelClass: ['o-dialog-class', 'o-table-dialog']
        });
        dialogRef.afterClosed().subscribe(function (result) {
            if (result) {
                _this.table.visibleColArray = dialogRef.componentInstance.getVisibleColumns();
                var columnsOrder_1 = dialogRef.componentInstance.getColumnsOrder();
                _this.table.oTableOptions.columns.sort(function (a, b) { return columnsOrder_1.indexOf(a.attr) - columnsOrder_1.indexOf(b.attr); });
                _this.table.refreshColumnsWidth();
            }
        });
    };
    OTableMenuComponent.prototype.onFilterByColumnClicked = function () {
        if (this.table.showFilterByColumnIcon && this.table.dataSource.isColumnValueFilterActive()) {
            var self_1 = this;
            this.dialogService.confirm('CONFIRM', 'MESSAGES.CONFIRM_DISCARD_FILTER_BY_COLUMN').then(function (res) {
                if (res) {
                    self_1.table.dataSource.clearColumnFilters();
                }
                self_1.table.showFilterByColumnIcon = !res;
                self_1.table.cd.detectChanges();
            });
        }
        else {
            this.table.showFilterByColumnIcon = !this.table.showFilterByColumnIcon;
            this.table.cd.detectChanges();
        }
    };
    OTableMenuComponent.prototype.onStoreFilterClicked = function () {
        var _this = this;
        var dialogRef = this.dialog.open(OTableStoreFilterDialogComponent, {
            data: this.table.oTableStorage.getStoredFilters().map(function (filter) { return filter.name; }),
            width: 'calc((75em - 100%) * 1000)',
            maxWidth: '65vw',
            minWidth: '30vw',
            disableClose: true,
            panelClass: ['o-dialog-class', 'o-table-dialog']
        });
        dialogRef.afterClosed().subscribe(function (result) {
            if (result) {
                _this.table.oTableStorage.storeFilter(dialogRef.componentInstance.getFilterAttributes());
            }
        });
    };
    OTableMenuComponent.prototype.onLoadFilterClicked = function () {
        var _this = this;
        var dialogRef = this.dialog.open(OTableLoadFilterDialogComponent, {
            data: this.table.oTableStorage.getStoredFilters(),
            width: 'calc((75em - 100%) * 1000)',
            maxWidth: '65vw',
            minWidth: '30vw',
            disableClose: true,
            panelClass: ['o-dialog-class', 'o-table-dialog']
        });
        dialogRef.componentInstance.onDelete.subscribe(function (filterName) { return _this.table.oTableStorage.deleteStoredFilter(filterName); });
        dialogRef.afterClosed().subscribe(function (result) {
            if (result) {
                var selectedFilterName = dialogRef.componentInstance.getSelectedFilterName();
                if (selectedFilterName) {
                    var storedFilter = _this.table.oTableStorage.getStoredFilterConf(selectedFilterName);
                    if (storedFilter) {
                        _this.table.setFiltersConfiguration(storedFilter);
                        _this.table.reloadPaginatedDataFromStart();
                    }
                }
            }
        });
    };
    OTableMenuComponent.prototype.onClearFilterClicked = function () {
        var _this = this;
        this.dialogService.confirm('CONFIRM', 'TABLE.DIALOG.CONFIRM_CLEAR_FILTER').then(function (result) {
            if (result) {
                _this.table.clearFilters();
                _this.table.reloadPaginatedDataFromStart();
            }
        });
    };
    OTableMenuComponent.prototype.onStoreConfigurationClicked = function () {
        var dialogRef = this.dialog.open(OTableStoreConfigurationDialogComponent, {
            width: 'calc((75em - 100%) * 1000)',
            maxWidth: '65vw',
            minWidth: '30vw',
            disableClose: true,
            panelClass: ['o-dialog-class', 'o-table-dialog']
        });
        var self = this;
        dialogRef.afterClosed().subscribe(function (result) {
            if (result) {
                var configurationData = dialogRef.componentInstance.getConfigurationAttributes();
                var tableProperties = dialogRef.componentInstance.getSelectedTableProperties();
                self.table.oTableStorage.storeConfiguration(configurationData, tableProperties);
            }
        });
    };
    OTableMenuComponent.prototype.onApplyConfigurationClicked = function () {
        var _this = this;
        var dialogRef = this.dialog.open(OTableApplyConfigurationDialogComponent, {
            data: this.table.oTableStorage.getStoredConfigurations(),
            width: 'calc((75em - 100%) * 1000)',
            maxWidth: '65vw',
            minWidth: '30vw',
            disableClose: true,
            panelClass: ['o-dialog-class', 'o-table-dialog']
        });
        var self = this;
        dialogRef.componentInstance.onDelete.subscribe(function (configurationName) { return _this.table.oTableStorage.deleteStoredConfiguration(configurationName); });
        dialogRef.afterClosed().subscribe(function (result) {
            if (result && dialogRef.componentInstance.isDefaultConfigurationSelected()) {
                self.table.applyDefaultConfiguration();
            }
            else if (result) {
                var selectedConfigurationName = dialogRef.componentInstance.getSelectedConfigurationName();
                if (selectedConfigurationName) {
                    self.table.applyConfiguration(selectedConfigurationName);
                }
            }
        });
    };
    OTableMenuComponent.DEFAULT_INPUTS_O_TABLE_MENU = DEFAULT_INPUTS_O_TABLE_MENU;
    OTableMenuComponent.DEFAULT_OUTPUTS_O_TABLE_MENU = DEFAULT_OUTPUTS_O_TABLE_MENU;
    OTableMenuComponent.decorators = [
        { type: Component, args: [{
                    moduleId: module.id,
                    selector: 'o-table-menu',
                    template: "\n    <mat-menu #menu=\"matMenu\" x-position=\"before\" [class]=\"(rowHeightObservable | async) +' o-table-menu'\">\n      <o-table-option #selectAllCheckboxOption *ngIf=\"showSelectAllCheckbox\" [active]=\"isSelectAllOptionActive\"\n        (onClick)=\"onShowsSelects($event)\" label=\"TABLE.BUTTONS.SELECT\" show-active-icon=\"true\"></o-table-option>\n      <o-table-option #exportButtonOption *ngIf=\"showExportButton\" (onClick)=\"onExportButtonClicked()\"\n        label=\"TABLE.BUTTONS.EXPORT\"></o-table-option>\n      <o-table-option #columnsVisibilityButtonOption *ngIf=\"showColumnsVisibilityButton\"\n        (onClick)=\"onChangeColumnsVisibilityClicked()\" label=\"TABLE.BUTTONS.COLVIS\"></o-table-option>\n\n      <button type=\"button\" #filterMenuButton *ngIf=\"showFilterMenu\" mat-menu-item [matMenuTriggerFor]=\"filterMenu\">{{\n        'TABLE.BUTTONS.FILTER' | oTranslate }}</button>\n      <button type=\"button\" #configurationMenuButton *ngIf=\"showConfigurationMenu\" mat-menu-item\n        [matMenuTriggerFor]=\"configurationMenu\">{{\n        'TABLE.BUTTONS.CONFIGURATION' | oTranslate }}</button>\n      <ng-content></ng-content>\n    </mat-menu>\n\n    <mat-menu #filterMenu=\"matMenu\" [class]=\"(rowHeightObservable| async) +' o-table-menu'\">\n      <o-table-option #columnFilterOption *ngIf=\"showColumnsFilterOption\" show-active-icon=\"true\"\n        (onClick)=\"onFilterByColumnClicked()\" label=\"TABLE.BUTTONS.FILTER_BY_COLUMN\">\n      </o-table-option>\n      <button type=\"button\" mat-menu-item\n        (click)=\"onStoreFilterClicked()\">{{ 'TABLE.BUTTONS.FILTER_SAVE' | oTranslate }}</button>\n      <button type=\"button\" mat-menu-item\n        (click)=\"onLoadFilterClicked()\">{{ 'TABLE.BUTTONS.FILTER_LOAD' | oTranslate }}</button>\n      <button type=\"button\" mat-menu-item\n        (click)=\"onClearFilterClicked()\">{{ 'TABLE.BUTTONS.FILTER_CLEAR' | oTranslate }}</button>\n    </mat-menu>\n\n    <mat-menu #configurationMenu=\"matMenu\" [class]=\"(rowHeightObservable | async) +' o-table-menu'\">\n      <button type=\"button\" mat-menu-item (click)=\"onStoreConfigurationClicked()\">{{ 'TABLE.BUTTONS.SAVE_CONFIGURATION' |\n        oTranslate }}</button>\n      <button type=\"button\" mat-menu-item (click)=\"onApplyConfigurationClicked()\">{{ 'TABLE.BUTTONS.APPLY_CONFIGURATION' |\n        oTranslate }}</button>\n    </mat-menu>\n  ",
                    styles: ["\n\n  "],
                    inputs: DEFAULT_INPUTS_O_TABLE_MENU,
                    outputs: DEFAULT_OUTPUTS_O_TABLE_MENU,
                    encapsulation: ViewEncapsulation.None,
                    host: {
                        '[class.o-table-menu]': 'true'
                    },
                    changeDetection: ChangeDetectionStrategy.OnPush
                },] },
    ];
    OTableMenuComponent.ctorParameters = function () { return [
        { type: Injector },
        { type: MatDialog },
        { type: ChangeDetectorRef },
        { type: OTableComponent, decorators: [{ type: Inject, args: [forwardRef(function () { return OTableComponent; }),] }] }
    ]; };
    OTableMenuComponent.propDecorators = {
        matMenu: [{ type: ViewChild, args: ['menu',] }],
        selectAllCheckboxOption: [{ type: ViewChild, args: ['selectAllCheckboxOption',] }],
        exportButtonOption: [{ type: ViewChild, args: ['exportButtonOption',] }],
        columnsVisibilityButtonOption: [{ type: ViewChild, args: ['columnsVisibilityButtonOption',] }],
        filterMenuButton: [{ type: ViewChild, args: ['filterMenuButton', { read: ElementRef },] }],
        configurationMenuButton: [{ type: ViewChild, args: ['configurationMenuButton', { read: ElementRef },] }],
        filterMenu: [{ type: ViewChild, args: ['filterMenu',] }],
        configurationMenu: [{ type: ViewChild, args: ['configurationMenu',] }],
        columnFilterOption: [{ type: ViewChild, args: ['columnFilterOption',] }]
    };
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OTableMenuComponent.prototype, "selectAllCheckbox", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OTableMenuComponent.prototype, "exportButton", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OTableMenuComponent.prototype, "columnsVisibilityButton", void 0);
    return OTableMenuComponent;
}());
export { OTableMenuComponent };
//# sourceMappingURL=o-table-menu.component.js.map