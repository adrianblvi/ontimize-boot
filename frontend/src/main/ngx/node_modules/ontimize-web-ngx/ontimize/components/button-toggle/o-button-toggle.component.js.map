{"version":3,"file":"o-button-toggle.component.js","sourceRoot":"","sources":["../../../../tmp/ontimize/components/button-toggle/o-button-toggle.component.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,YAAY,EAAE,iBAAiB,EAAE,SAAS,EAAE,gBAAgB,EAAE,MAAM,eAAe,CAAC;AACxG,OAAO,EAAyB,eAAe,EAAE,MAAM,mBAAmB,CAAC;AAE3E,OAAO,EAAE,IAAI,EAAE,MAAM,aAAa,CAAC;AAEnC,MAAM,CAAC,IAAM,8BAA8B,GAAG;IAC5C,aAAa;IACb,OAAO;IAEP,MAAM;IACN,6BAA6B;IAC7B,SAAS;IACT,SAAS;IACT,OAAO;IACP,MAAM;CACP,CAAC;AAEF,MAAM,CAAC,IAAM,+BAA+B,GAAG;IAC7C,UAAU;CACX,CAAC;AAEF;IA6DE,gCAAmB,gBAAkC;QAAlC,qBAAgB,GAAhB,gBAAgB,CAAkB;QAvC9C,mCAA8B,GAAG,8BAA8B,CAAC;QAChE,oCAA+B,GAAG,+BAA+B,CAAC;QAMlE,iBAAY,GAAuB,QAAQ,CAAC;QAQzC,aAAQ,GAAY,KAAK,CAAC;QAQ1B,aAAQ,GAAY,IAAI,CAAC;QAW5B,aAAQ,GAAwC,IAAI,YAAY,EAAE,CAAC;IAKjB,CAAC;IA/B1D,sBAAI,2CAAO;aAAX;YACE,OAAO,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC;QACzC,CAAC;aACD,UAAY,GAAY;YACtB,GAAG,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;YACrC,IAAI,CAAC,kBAAkB,CAAC,OAAO,GAAG,GAAG,CAAC;QACxC,CAAC;;;OAJA;IAMD,sBAAI,2CAAO;aAAX;YACE,OAAO,CAAC,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC;QAC3C,CAAC;aACD,UAAY,GAAY;YACtB,GAAG,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;YACrC,IAAI,CAAC,kBAAkB,CAAC,QAAQ,GAAG,CAAC,GAAG,CAAC;QAC1C,CAAC;;;OAJA;IAMD,sBAAI,yCAAK;aAAT;YACE,OAAO,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC;QACvC,CAAC;aACD,UAAU,GAAQ;YAChB,IAAI,CAAC,kBAAkB,CAAC,KAAK,GAAG,GAAG,CAAC;QACtC,CAAC;;;OAHA;;gBAhDF,SAAS,SAAC;oBACT,QAAQ,EAAE,MAAM,CAAC,EAAE;oBACnB,QAAQ,EAAE,iBAAiB;oBAC3B,QAAQ,EAAE,mXAMT;oBACD,MAAM,EAAE,CAAC,mGAER,CAAC;oBACF,MAAM,EAAE,8BAA8B;oBACtC,OAAO,EAAE,+BAA+B;oBACxC,aAAa,EAAE,iBAAiB,CAAC,IAAI;oBACrC,IAAI,EAAE;wBACJ,yBAAyB,EAAE,MAAM;qBAClC;iBACF;;;gBAxC+D,gBAAgB;;;qCAgF7E,SAAS,SAAC,IAAI;;IAIjB,6BAAC;CAAA,AA/DD,IA+DC;SA3CY,sBAAsB","sourcesContent":["import { Component, EventEmitter, ViewEncapsulation, ViewChild, ViewContainerRef } from '@angular/core';\nimport { MatButtonToggleChange, MatButtonToggle } from '@angular/material';\n\nimport { Util } from '../../utils';\n\nexport const DEFAULT_INPUTS_O_BUTTON_TOGGLE = [\n  'oattr: attr',\n  'label',\n  // icon [string]: Name of google icon (see https://design.google.com/icons/)\n  'icon',\n  'iconPosition: icon-position',\n  'checked',\n  'enabled',\n  'value',\n  'name'\n];\n\nexport const DEFAULT_OUTPUTS_O_BUTTON_TOGGLE = [\n  'onChange'\n];\n\n@Component({\n  moduleId: module.id,\n  selector: 'o-button-toggle',\n  template: `\n    <mat-button-toggle #bt [id]=\"oattr\" [name]=\"name\" [checked]=\"checked\" [disabled]=\"!enabled\" [value]=\"value\" (change)=\"onChange.emit($event)\">\n      <mat-icon *ngIf=\"icon && iconPosition==='before'\">{{ icon }}</mat-icon>\n      {{ label }}\n      <mat-icon *ngIf=\"icon && iconPosition==='after'\">{{ icon }}</mat-icon>\n    </mat-button-toggle>\n  `,\n  styles: [`\n    .o-button-toggle{display:inline-block}.o-button-toggle .mat-button-toggle{display:flex}\n  `],\n  inputs: DEFAULT_INPUTS_O_BUTTON_TOGGLE,\n  outputs: DEFAULT_OUTPUTS_O_BUTTON_TOGGLE,\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    '[class.o-button-toggle]': 'true'\n  }\n})\nexport class OButtonToggleComponent {\n\n  public DEFAULT_INPUTS_O_BUTTON_TOGGLE = DEFAULT_INPUTS_O_BUTTON_TOGGLE;\n  public DEFAULT_OUTPUTS_O_BUTTON_TOGGLE = DEFAULT_OUTPUTS_O_BUTTON_TOGGLE;\n\n  /* Inputs */\n  public oattr: string;\n  public label: string;\n  public icon: string;\n  public iconPosition: 'before' | 'after' = 'before';\n  get checked(): boolean {\n    return this._innerButtonToggle.checked;\n  }\n  set checked(val: boolean) {\n    val = Util.parseBoolean(String(val));\n    this._innerButtonToggle.checked = val;\n  }\n  protected _checked: boolean = false;\n  get enabled(): boolean {\n    return !this._innerButtonToggle.disabled;\n  }\n  set enabled(val: boolean) {\n    val = Util.parseBoolean(String(val));\n    this._innerButtonToggle.disabled = !val;\n  }\n  protected _enabled: boolean = true;\n  get value(): any {\n    return this._innerButtonToggle.value;\n  }\n  set value(val: any) {\n    this._innerButtonToggle.value = val;\n  }\n  public name: string;\n  /* End inputs */\n\n  /* Outputs */\n  public onChange: EventEmitter<MatButtonToggleChange> = new EventEmitter();\n  /* End outputs */\n\n  @ViewChild('bt') public _innerButtonToggle: MatButtonToggle;\n\n  constructor(public viewContainerRef: ViewContainerRef) { }\n\n}\n"]}