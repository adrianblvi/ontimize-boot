var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Component, Inject, Injector, ChangeDetectionStrategy } from '@angular/core';
import { FormControl, FormGroup, Validators } from '@angular/forms';
import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material';
import { OTableBaseDialogClass } from '../o-table-base-dialog.class';
var OTableStoreFilterDialogComponent = (function (_super) {
    __extends(OTableStoreFilterDialogComponent, _super);
    function OTableStoreFilterDialogComponent(dialogRef, injector, data) {
        var _this = _super.call(this, injector) || this;
        _this.dialogRef = dialogRef;
        _this.injector = injector;
        _this.filterNames = [];
        _this.formGroup = new FormGroup({
            name: new FormControl('', [
                Validators.required,
                _this.filterNameValidator.bind(_this)
            ]),
            description: new FormControl('')
        });
        _this.setFormControl(_this.formGroup.get('name'));
        _this.loadFilterNames(data);
        return _this;
    }
    OTableStoreFilterDialogComponent.prototype.loadFilterNames = function (filterNames) {
        this.filterNames = filterNames;
    };
    OTableStoreFilterDialogComponent.prototype.getFilterAttributes = function () {
        return this.formGroup.value;
    };
    OTableStoreFilterDialogComponent.prototype.filterNameValidator = function (control) {
        var ctrlValue = control.value;
        if (this.filterNames.indexOf(ctrlValue) !== -1) {
            return { 'filterNameAlreadyExists': true };
        }
        return {};
    };
    OTableStoreFilterDialogComponent.decorators = [
        { type: Component, args: [{
                    moduleId: module.id,
                    selector: 'o-table-store-filter-dialog',
                    template: "\n    <span mat-dialog-title>{{ 'TABLE.BUTTONS.SAVE_FILTER' | oTranslate }}</span>\n\n    <mat-dialog-content>\n      <div mat-subheader>{{ 'TABLE.DIALOG.SAVE_FILTER' | oTranslate }}</div>\n      <form #form [formGroup]=\"formGroup\" fxLayout=\"column\">\n        <mat-form-field>\n          <input matInput [matTooltip]=\"tooltipText\" [matTooltipClass]=\"tooltipClass\" placeholder=\"{{ 'TABLE.DIALOG.FILTER_NAME' | oTranslate }}\"\n            formControlName=\"name\" required>\n          <mat-error *ngIf=\"formGroup.controls['name'].hasError('filterNameAlreadyExists')\" text=\"{{ 'TABLE.DIALOG.FILTER_NAME_ALREADY_EXISTS' | oTranslate }}\"></mat-error>\n          <mat-error *ngIf=\"formGroup.controls['name'].hasError('required')\" text=\"{{ 'FORM_VALIDATION.REQUIRED' | oTranslate }}\"></mat-error>\n        </mat-form-field>\n        <mat-form-field class=\"example-full-width\">\n          <textarea matInput placeholder=\"{{ 'TABLE.DIALOG.FILTER_DESCRIPTION' | oTranslate }}\" formControlName=\"description\" rows=\"4\" cols=\"50\"></textarea>\n        </mat-form-field>\n      </form>\n    </mat-dialog-content>\n\n    <mat-dialog-actions align=\"end\">\n      <button type=\"button\" mat-stroked-button class=\"mat-primary\" [mat-dialog-close]=\"false\">{{ 'CANCEL' | oTranslate | uppercase }}</button>\n      <button type=\"button\" mat-stroked-button class=\"mat-primary\" [mat-dialog-close]=\"true\" [disabled]=\"!formGroup.valid\">{{'SAVE' | oTranslate | uppercase }}</button>\n    </mat-dialog-actions>\n  ",
                    styles: ["\n\n  "],
                    changeDetection: ChangeDetectionStrategy.OnPush
                },] },
    ];
    OTableStoreFilterDialogComponent.ctorParameters = function () { return [
        { type: MatDialogRef },
        { type: Injector },
        { type: Array, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
    ]; };
    return OTableStoreFilterDialogComponent;
}(OTableBaseDialogClass));
export { OTableStoreFilterDialogComponent };
//# sourceMappingURL=o-table-store-filter-dialog.component.js.map