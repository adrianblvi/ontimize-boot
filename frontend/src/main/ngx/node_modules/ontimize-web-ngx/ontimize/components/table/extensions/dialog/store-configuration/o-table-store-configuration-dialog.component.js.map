{"version":3,"file":"o-table-store-configuration-dialog.component.js","sourceRoot":"","sources":["../../../../../../../tmp/ontimize/components/table/extensions/dialog/store-configuration/o-table-store-configuration-dialog.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { AfterViewInit, ChangeDetectionStrategy, Component, Injector, ViewChild } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MatCheckboxChange, MatDialogRef, MatListOption, MatSelectionList } from '@angular/material';\n\nimport { OTableBaseDialogClass } from '../o-table-base-dialog.class';\n\n@Component({\n  moduleId: module.id,\n  selector: 'o-table-store-configuration-dialog',\n  template: `\n    <span mat-dialog-title>{{ 'TABLE.BUTTONS.SAVE_CONFIGURATION' | oTranslate }}</span>\n\n    <mat-dialog-content>\n      <div mat-subheader>{{ 'TABLE.DIALOG.SAVE_CONFIGURATION' | oTranslate }}</div>\n      <form #form [formGroup]=\"formGroup\" fxLayout=\"column\">\n        <mat-form-field>\n          <input matInput [matTooltip]=\"tooltipText\" [matTooltipClass]=\"tooltipClass\" placeholder=\"{{ 'TABLE.DIALOG.CONFIGURATION_NAME' | oTranslate }}\"\n            formControlName=\"name\" required>\n          <mat-error *ngIf=\"formGroup.controls['name'].hasError('required')\" text=\"{{ 'FORM_VALIDATION.REQUIRED' | oTranslate }}\"></mat-error>\n        </mat-form-field>\n        <mat-form-field class=\"example-full-width\">\n          <textarea matInput placeholder=\"{{ 'TABLE.DIALOG.CONFIGURATION_DESCRIPTION' | oTranslate }}\" formControlName=\"description\" rows=\"4\"\n            cols=\"50\"></textarea>\n        </mat-form-field>\n        <div class=\"inner-subheader\" mat-subheader>{{ 'TABLE.DIALOG.CONFIGURATION_PROPERTIES' | oTranslate }}</div>\n        <div fxLayout=\"column\">\n          <mat-checkbox (change)=\"onSelectAllChange($event)\" [checked]=\"areAllSelected()\" [indeterminate]=\"isIndeterminate()\" class=\"select-all-checkbox\">\n            {{ 'SELECT_ALL' | oTranslate }}\n          </mat-checkbox>\n\n          <mat-selection-list #propertiesList dense class=\"o-table-save-configuration-dialog-list o-scroll\">\n            <mat-list-option checkboxPosition=\"before\" *ngFor=\"let property of properties\" [value]=\"property.property\">\n              <div fxLayout=\"row\" fxLayoutAlign=\"center center\">\n                <span matLine fxFlex>{{ property.name | oTranslate }}</span>\n                <mat-icon *ngIf=\"property.info\" matTooltip=\"{{ property.info | oTranslate }}\" class=\"o-tscd-list-tooltip\">info</mat-icon>\n              </div>\n            </mat-list-option>\n          </mat-selection-list>\n        </div>\n      </form>\n    </mat-dialog-content>\n\n    <mat-dialog-actions align=\"end\">\n      <button type=\"button\" mat-stroked-button class=\"mat-primary\" [mat-dialog-close]=\"false\">{{ 'CANCEL' | oTranslate | uppercase }}</button>\n      <button type=\"button\" mat-stroked-button class=\"mat-primary\" [mat-dialog-close]=\"true\"\n        [disabled]=\"!formGroup.valid || propertiesList.selectedOptions.selected.length===0\">{{ 'SAVE' | oTranslate | uppercase }}</button>\n    </mat-dialog-actions>\n  `,\n  styles: [`\n    .select-all-checkbox{padding:6px 0}.o-table-save-configuration-dialog-list{max-height:120px;overflow-y:scroll}.o-table-save-configuration-dialog-list .mat-list-item{height:30px}.o-table-save-configuration-dialog-list .mat-list-item .o-tscd-list-tooltip.mat-icon{opacity:.25}\n  `],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class OTableStoreConfigurationDialogComponent extends OTableBaseDialogClass implements AfterViewInit {\n\n  @ViewChild('propertiesList')\n  public propertiesList: MatSelectionList;\n\n  public properties: any[] = [{\n    property: 'sort',\n    name: 'TABLE.DIALOG.PROPERTIES.SORT',\n    info: 'TABLE.DIALOG.PROPERTIES.SORT.INFO'\n  }, {\n    property: 'columns-display',\n    name: 'TABLE.DIALOG.PROPERTIES.COLUMNS_DISPLAY',\n    info: 'TABLE.DIALOG.PROPERTIES.COLUMNS_DISPLAY.INFO'\n  }, {\n    property: 'quick-filter',\n    name: 'TABLE.DIALOG.PROPERTIES.QUICK_FILTER',\n    info: 'TABLE.DIALOG.PROPERTIES.QUICK_FILTER.INFO'\n  }, {\n    property: 'columns-filter',\n    name: 'TABLE.DIALOG.PROPERTIES.COLUMNS_FILTER',\n    info: 'TABLE.DIALOG.PROPERTIES.COLUMNS_FILTER.INFO'\n  }, {\n    property: 'page',\n    name: 'TABLE.DIALOG.PROPERTIES.PAGE',\n    info: 'TABLE.DIALOG.PROPERTIES.PAGE.INFO'\n  }];\n\n  public formGroup: FormGroup = new FormGroup({\n    name: new FormControl('', [\n      Validators.required\n    ]),\n    description: new FormControl('')\n  });\n\n  constructor(\n    public dialogRef: MatDialogRef<OTableStoreConfigurationDialogComponent>,\n    protected injector: Injector\n  ) {\n    super(injector);\n    this.setFormControl(this.formGroup.get('name'));\n  }\n\n  public ngAfterViewInit(): void {\n    this.propertiesList.selectAll();\n  }\n\n  public areAllSelected(): boolean {\n    return this.propertiesList && this.propertiesList.options && this.propertiesList.options.length === this.propertiesList.selectedOptions.selected.length;\n  }\n\n  public onSelectAllChange(event: MatCheckboxChange): void {\n    event.checked ? this.propertiesList.selectAll() : this.propertiesList.deselectAll();\n  }\n\n  public getConfigurationAttributes(): any {\n    return this.formGroup.value;\n  }\n\n  public getSelectedTableProperties(): any[] {\n    const selected: MatListOption[] = this.propertiesList.selectedOptions.selected;\n    return selected.length ? selected.map(item => item.value) : [];\n  }\n\n  public isIndeterminate(): boolean {\n    return !this.areAllSelected();\n  }\n\n}\n"]}