import { Util } from '../../../../utils';
import { OTableColumnComponent } from '../o-table-column.component';
var OBaseTableCellRenderer = (function () {
    function OBaseTableCellRenderer(injector) {
        this.injector = injector;
        this.tableColumn = this.injector.get(OTableColumnComponent);
    }
    OBaseTableCellRenderer.prototype.ngAfterContentInit = function () {
        this.registerRenderer();
    };
    Object.defineProperty(OBaseTableCellRenderer.prototype, "table", {
        get: function () {
            return this.tableColumn.table;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OBaseTableCellRenderer.prototype, "column", {
        get: function () {
            return this.tableColumn.attr;
        },
        enumerable: true,
        configurable: true
    });
    OBaseTableCellRenderer.prototype.registerRenderer = function () {
        this.tableColumn.registerRenderer(this);
        if (!Util.isDefined(this.type) && Util.isDefined(this.tableColumn.type)) {
            this.type = this.tableColumn.type;
        }
    };
    OBaseTableCellRenderer.prototype.getCellData = function (cellvalue, rowvalue) {
        var parsedValue;
        if (this.componentPipe && typeof this.pipeArguments !== 'undefined' && cellvalue !== undefined) {
            parsedValue = this.componentPipe.transform(cellvalue, this.pipeArguments);
        }
        else {
            parsedValue = cellvalue;
        }
        return parsedValue;
    };
    OBaseTableCellRenderer.prototype.getTooltip = function (cellValue, rowValue) {
        return this.getCellData(cellValue, rowValue);
    };
    return OBaseTableCellRenderer;
}());
export { OBaseTableCellRenderer };
//# sourceMappingURL=o-base-table-cell-renderer.class.js.map