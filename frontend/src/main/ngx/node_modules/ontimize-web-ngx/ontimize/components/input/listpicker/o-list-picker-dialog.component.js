import { Component, Inject, Injector, ViewChild, ViewEncapsulation } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material';
import { Util } from '../../../util/util';
import { OSearchInputComponent } from '../../input/search-input/o-search-input.component';
export var DEFAULT_INPUTS_O_LIST_PICKER = [
    'data',
    'visibleColumns: visible-columns',
    'filter'
];
var OListPickerDialogComponent = (function () {
    function OListPickerDialogComponent(dialogRef, injector, data) {
        this.dialogRef = dialogRef;
        this.injector = injector;
        this.filter = true;
        this.visibleData = [];
        this.data = [];
        this._startIndex = 0;
        this.recordsNumber = 100;
        this.scrollThreshold = 200;
        if (data.data && Util.isArray(data.data)) {
            this.data = data.data;
        }
        if (data.visibleColumns && Util.isArray(data.visibleColumns)) {
            this.visibleColsArray = data.visibleColumns;
        }
        if (data.queryRows !== undefined) {
            this.recordsNumber = data.queryRows;
        }
        if (data.filter !== undefined) {
            this.filter = data.filter;
        }
        if (data.menuColumns) {
            this.menuColumns = data.menuColumns;
        }
        this.searchVal = data.searchVal;
    }
    OListPickerDialogComponent.prototype.ngAfterViewInit = function () {
        if (Util.isDefined(this.searchVal) && this.searchInput !== undefined && this.searchVal.length > 0) {
            this.searchInput.getFormControl().setValue(this.searchVal, {
                emitEvent: false
            });
            this.onFilterList(this.searchVal);
        }
        else {
            this.startIndex = 0;
        }
    };
    Object.defineProperty(OListPickerDialogComponent.prototype, "startIndex", {
        get: function () {
            return this._startIndex;
        },
        set: function (val) {
            this._startIndex = val;
            this.visibleData = this.data.slice(this.startIndex, this.recordsNumber);
        },
        enumerable: true,
        configurable: true
    });
    OListPickerDialogComponent.prototype.onClickListItem = function (e, value) {
        this.dialogRef.close(value);
    };
    OListPickerDialogComponent.prototype.trackByFn = function (index, item) {
        return index;
    };
    OListPickerDialogComponent.prototype.onScroll = function (event) {
        if (event && event.target && this.visibleData.length < this.data.length) {
            var pendingScroll = event.target.scrollHeight - (event.target.scrollTop + event.target.clientHeight);
            if (!isNaN(pendingScroll) && pendingScroll <= this.scrollThreshold) {
                var index = this.visibleData.length;
                var searchVal = this.searchInput.getValue();
                if (Util.isDefined(searchVal) && searchVal.length > 0) {
                    index = this.visibleData[this.visibleData.length - 1]['_parsedIndex'];
                }
                var appendData = this.data.slice(index, this.visibleData.length + this.recordsNumber);
                if (appendData.length) {
                    appendData = this.transform(appendData, {
                        filtervalue: this.searchInput.getValue(),
                        filtercolumns: this.visibleColsArray
                    });
                    if (appendData.length) {
                        this.visibleData = this.visibleData.concat(appendData);
                    }
                }
            }
        }
    };
    OListPickerDialogComponent.prototype.onFilterList = function (searchVal) {
        this.visibleData = this.transform(this.data, {
            filtervalue: searchVal,
            filtercolumns: this.visibleColsArray
        });
        this._startIndex = 0;
        this.visibleData = this.visibleData.slice(this.startIndex, this.recordsNumber);
    };
    OListPickerDialogComponent.prototype.isEmptyData = function () {
        return Util.isDefined(this.visibleData) ? this.visibleData.length === 0 : true;
    };
    OListPickerDialogComponent.prototype.transform = function (value, args) {
        var _this = this;
        if (!args || args.length <= 1) {
            return value;
        }
        var filterValue = args['filtervalue'] ? args['filtervalue'] : '';
        var filterColumns = args['filtercolumns'];
        if (!filterColumns || !filterValue || filterValue.length === 0) {
            return value;
        }
        if (value === undefined || value === null) {
            return value;
        }
        return value.filter(function (item) {
            for (var i = 0; i < filterColumns.length; i++) {
                var colName = filterColumns[i];
                if (_this._isBlank(colName)) {
                    continue;
                }
                var origValue = item[colName];
                if (origValue) {
                    origValue = origValue.toString();
                    if (_this._isBlank(origValue)) {
                        continue;
                    }
                    if (origValue.toUpperCase().indexOf(filterValue.toUpperCase()) > -1) {
                        return item;
                    }
                }
            }
        });
    };
    OListPickerDialogComponent.prototype._isBlank = function (value) {
        return !Util.isDefined(value) || value.length === 0;
    };
    OListPickerDialogComponent.decorators = [
        { type: Component, args: [{
                    moduleId: module.id,
                    selector: 'o-list-picker-dialog',
                    template: "\n    <div class=\"title-container\" *ngIf=\"filter\">\n      <o-search-input #searchInput [columns]=\"menuColumns\" show-menu=\"no\" float-label=\"never\" (onSearch)=\"onFilterList($event)\"\n        class=\"o-list-picker-search\"></o-search-input>\n    </div>\n    <div mat-dialog-content (scroll)=\"onScroll($event)\" [class.o-list-picker-has-filter]=\"filter\" fxFlex>\n      <mat-list>\n        <mat-list-item *ngIf=\"isEmptyData()\">\n          {{ 'LIST.EMPTY' | oTranslate }}\n          <ng-container *ngIf=\"filter && searchInput && searchInput.getValue() && searchInput.getValue().length > 0\">\n            {{ 'LIST.EMPTY_USING_FILTER' | oTranslate : { values: [searchInput.getValue()] } }}\n          </ng-container>\n        </mat-list-item>\n        <mat-list-item (click)=\"onClickListItem($event, item)\" *ngFor=\"let item of visibleData; trackBy: trackByFn\">\n          <span>{{ item['_parsedVisibleColumnText'] }}</span>\n          <mat-divider></mat-divider>\n        </mat-list-item>\n      </mat-list>\n    </div>\n    <mat-dialog-actions align=\"end\">\n      <button type=\"button\" mat-stroked-button mat-dialog-close>{{ 'CANCEL' | oTranslate | uppercase }}</button>\n    </mat-dialog-actions>\n  ",
                    styles: ["\n    .cdk-overlay-list-picker .mat-dialog-container{padding:0}.cdk-overlay-list-picker .mat-dialog-container .o-list-picker-dialog{display:flex;flex-direction:column;height:100%}.cdk-overlay-list-picker .mat-dialog-container .o-list-picker-dialog .title-container{padding:5px 20px}.cdk-overlay-list-picker .mat-dialog-container .o-list-picker-dialog .title-container .o-search-input mat-form-field .mat-form-field-wrapper{padding-bottom:0}.cdk-overlay-list-picker .mat-dialog-container .o-list-picker-dialog .title-container .o-search-input mat-form-field .mat-form-field-wrapper .mat-form-field-underline{display:none}.cdk-overlay-list-picker .mat-dialog-container .o-list-picker-dialog .mat-dialog-content{margin:0}.cdk-overlay-list-picker .mat-dialog-container .o-list-picker-dialog .mat-dialog-content mat-list mat-list-item{cursor:pointer}.cdk-overlay-list-picker .mat-dialog-container .o-list-picker-dialog .mat-dialog-actions{padding-top:12px;margin:0 12px}\n  "],
                    inputs: DEFAULT_INPUTS_O_LIST_PICKER,
                    encapsulation: ViewEncapsulation.None,
                    host: {
                        '[class.o-list-picker-dialog]': 'true'
                    }
                },] },
    ];
    OListPickerDialogComponent.ctorParameters = function () { return [
        { type: MatDialogRef },
        { type: Injector },
        { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
    ]; };
    OListPickerDialogComponent.propDecorators = {
        searchInput: [{ type: ViewChild, args: ['searchInput',] }]
    };
    return OListPickerDialogComponent;
}());
export { OListPickerDialogComponent };
//# sourceMappingURL=o-list-picker-dialog.component.js.map