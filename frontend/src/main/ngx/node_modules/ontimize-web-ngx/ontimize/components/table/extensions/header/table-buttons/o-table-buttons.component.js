var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { ChangeDetectionStrategy, Component, forwardRef, Inject, Injector, ViewEncapsulation } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { InputConverter } from '../../../../../decorators';
import { PermissionsUtils } from '../../../../../util/permissions';
import { OTableComponent } from '../../../o-table.component';
export var DEFAULT_INPUTS_O_TABLE_BUTTONS = [
    'insertButton: insert-button',
    'refreshButton: refresh-button',
    'deleteButton: delete-button'
];
export var DEFAULT_OUTPUTS_O_TABLE_BUTTONS = [];
var OTableButtonsComponent = (function () {
    function OTableButtonsComponent(injector, table) {
        this.injector = injector;
        this.table = table;
        this.insertButton = true;
        this.refreshButton = true;
        this.deleteButton = true;
        this.enabledInsertButton = new BehaviorSubject(true);
        this.enabledRefreshButton = new BehaviorSubject(true);
        this.enabledDeleteButton = new BehaviorSubject(false);
        this.mutationObservers = [];
        this.permissions = this.table.getActionsPermissions();
    }
    OTableButtonsComponent.prototype.ngOnInit = function () {
        var _this = this;
        var insertPerm = this.getPermissionByAttr('insert');
        var refreshPerm = this.getPermissionByAttr('refresh');
        var deletePerm = this.getPermissionByAttr('delete');
        if (this.insertButton && (insertPerm && insertPerm.enabled === false)) {
            this.enabledInsertButton.next(false);
        }
        if (this.refreshButton && (refreshPerm && refreshPerm.enabled === false)) {
            this.enabledRefreshButton.next(false);
        }
        this.subscription = this.table.selection.changed.subscribe(function () {
            return deletePerm ? _this.enabledDeleteButton.next(deletePerm.enabled && !_this.table.selection.isEmpty()) : _this.enabledDeleteButton.next(!_this.table.selection.isEmpty());
        });
    };
    OTableButtonsComponent.prototype.ngOnDestroy = function () {
        if (this.mutationObservers) {
            this.mutationObservers.forEach(function (m) {
                m.disconnect();
            });
        }
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    };
    OTableButtonsComponent.prototype.add = function () {
        this.table.add();
    };
    OTableButtonsComponent.prototype.reloadData = function () {
        this.table.reloadData();
    };
    OTableButtonsComponent.prototype.remove = function () {
        this.table.remove();
    };
    OTableButtonsComponent.prototype.getPermissionByAttr = function (attr) {
        return this.permissions.find(function (perm) { return perm.attr === attr; });
    };
    OTableButtonsComponent.prototype.registerButtons = function (oTableButtons) {
        var fixedButtons = ['insert', 'refresh', 'delete'];
        var userItems = this.permissions.filter(function (perm) { return fixedButtons.indexOf(perm.attr) === -1; });
        var self = this;
        userItems.forEach(function (perm) {
            var button = oTableButtons.find(function (oTableButton) { return oTableButton.oattr === perm.attr; });
            self.setPermissionsToOTableButton(perm, button);
        });
    };
    Object.defineProperty(OTableButtonsComponent.prototype, "showInsertOButton", {
        get: function () {
            if (!this.insertButton) {
                return false;
            }
            var perm = this.getPermissionByAttr('insert');
            return !(perm && perm.visible === false);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableButtonsComponent.prototype, "showRefreshOButton", {
        get: function () {
            if (!this.refreshButton) {
                return false;
            }
            var perm = this.getPermissionByAttr('refresh');
            return !(perm && perm.visible === false);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OTableButtonsComponent.prototype, "showDeleteOButton", {
        get: function () {
            if (!this.deleteButton) {
                return false;
            }
            var perm = this.getPermissionByAttr('delete');
            return !(perm && perm.visible === false);
        },
        enumerable: true,
        configurable: true
    });
    OTableButtonsComponent.prototype.setPermissionsToOTableButton = function (perm, button) {
        if (perm.visible === false && button) {
            button.elRef.nativeElement.remove();
        }
        else if (perm.enabled === false && button) {
            button.enabled = false;
            var buttonEL = button.elRef.nativeElement.querySelector('button');
            var obs = PermissionsUtils.registerDisabledChangesInDom(buttonEL);
            this.mutationObservers.push(obs);
        }
    };
    OTableButtonsComponent.DEFAULT_INPUTS_O_TABLE_BUTTONS = DEFAULT_INPUTS_O_TABLE_BUTTONS;
    OTableButtonsComponent.DEFAULT_OUTPUTS_O_TABLE_BUTTONS = DEFAULT_OUTPUTS_O_TABLE_BUTTONS;
    OTableButtonsComponent.decorators = [
        { type: Component, args: [{
                    moduleId: module.id,
                    selector: 'o-table-buttons',
                    template: "\n    <div class=\"buttons\" fxLayout>\n      <o-table-button *ngIf=\"showInsertOButton\" [enabled]=\"enabledInsertButton | async\" label=\"TABLE.BUTTONS.ADD\"\n        svg-icon=\"ontimize:add\" (onClick)=\"add()\" class=\"o-table-button-add\"></o-table-button>\n      <o-table-button *ngIf=\"showRefreshOButton\" [enabled]=\"enabledRefreshButton | async\" label=\"TABLE.BUTTONS.REFRESH\"\n        svg-icon=\"ontimize:autorenew\" (onClick)=\"reloadData()\" class=\"o-table-button-refresh\">\n      </o-table-button>\n      <o-table-button *ngIf=\"showDeleteOButton\" [enabled]=\"enabledDeleteButton | async\" label=\"TABLE.BUTTONS.DELETE\"\n        svg-icon=\"ontimize:delete\" (onClick)=\"remove()\" class=\"o-table-button-delete\"></o-table-button>\n      <ng-content></ng-content>\n    </div>\n  ",
                    styles: ["\n\n  "],
                    inputs: DEFAULT_INPUTS_O_TABLE_BUTTONS,
                    outputs: DEFAULT_OUTPUTS_O_TABLE_BUTTONS,
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: {
                        '[class.o-table-buttons]': 'true',
                    }
                },] },
    ];
    OTableButtonsComponent.ctorParameters = function () { return [
        { type: Injector },
        { type: OTableComponent, decorators: [{ type: Inject, args: [forwardRef(function () { return OTableComponent; }),] }] }
    ]; };
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OTableButtonsComponent.prototype, "insertButton", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OTableButtonsComponent.prototype, "refreshButton", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OTableButtonsComponent.prototype, "deleteButton", void 0);
    return OTableButtonsComponent;
}());
export { OTableButtonsComponent };
//# sourceMappingURL=o-table-buttons.component.js.map