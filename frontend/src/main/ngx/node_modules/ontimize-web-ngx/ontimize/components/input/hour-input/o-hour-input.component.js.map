{"version":3,"file":"o-hour-input.component.js","sourceRoot":"","sources":["../../../../../tmp/ontimize/components/input/hour-input/o-hour-input.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { AfterViewInit, Component, ElementRef, Inject, Injector, NgModule, OnInit, Optional, ViewChild, ViewEncapsulation, forwardRef } from '@angular/core';\nimport { Codes, Util } from '../../../utils';\nimport {\n  DEFAULT_INPUTS_O_FORM_DATA_COMPONENT,\n  DEFAULT_OUTPUTS_O_FORM_DATA_COMPONENT,\n  OFormDataComponent,\n  OValueChangeEvent\n} from '../../o-form-data-component.class';\n\nimport { CommonModule } from '@angular/common';\nimport { IFormValueOptions } from '../../form/OFormValue';\nimport { InputConverter } from '../../../decorators/input-converter';\nimport { NgxMaterialTimepickerModule } from 'ngx-material-timepicker';\nimport { NumberConverter } from '../../../decorators';\nimport { OFormComponent } from '../../form/form-components';\nimport { OSharedModule } from '../../../shared';\nimport { OValidators } from '../../../validators/o-validators';\nimport { ValidatorFn } from '@angular/forms';\nimport moment from 'moment';\n\nexport type OHourValueType = 'string' | 'timestamp';\n\nexport const DEFAULT_INPUTS_O_HOUR_INPUT = [\n  'format',\n  'textInputEnabled: text-input-enabled',\n  'min',\n  'max',\n  'valueType: value-type',\n  ...DEFAULT_INPUTS_O_FORM_DATA_COMPONENT\n];\n\nexport const DEFAULT_OUTPUTS_O_HOUR_INPUT = [\n  ...DEFAULT_OUTPUTS_O_FORM_DATA_COMPONENT\n];\n\n@Component({\n  moduleId: module.id,\n  selector: 'o-hour-input',\n  template: `\n    <div fxLayout=\"row\" fxLayoutAlign=\"space-between center\" [formGroup]=\"getFormGroup()\" [matTooltip]=\"tooltip\"\n      [matTooltipClass]=\"tooltipClass\" [matTooltipPosition]=\"tooltipPosition\" [matTooltipShowDelay]=\"tooltipShowDelay\"\n      [matTooltipHideDelay]=\"tooltipHideDelay\">\n      <mat-form-field [appearance]=\"appearance\" [floatLabel]=\"floatLabel\" fxFill [hideRequiredMarker]=\"hideRequiredMarker\">\n        <mat-label *ngIf=\"labelVisible\">{{ olabel | oTranslate }}</mat-label>\n        <input matInput [ngxTimepicker]=\"picker\" [id]=\"getAttribute()\" [placeholder]=\"placeHolder\"\n          [formControlName]=\"getAttribute()\" [readonly]=\"isReadOnly || !textInputEnabled\" (focus)=\"innerOnFocus($event)\"\n          (blur)=\"innerOnBlur($event)\" [required]=\"isRequired\" (change)=\"onChangeEvent($event)\" [min]=\"min\" [max]=\"max\"\n          (keydown)=\"onKeyDown($event)\" [format]=\"format\" [disableClick]=\"true\">\n\n        <button type=\"button\" *ngIf=\"showClearButton\" matSuffix mat-icon-button (click)=\"onClickClearValue($event)\">\n          <mat-icon svgIcon=\"ontimize:close\"></mat-icon>\n        </button>\n        <button type=\"button\" matSuffix mat-icon-button [disabled]=\"isReadOnly || !enabled\" (click)=\"open($event)\">\n          <mat-icon ngxMaterialTimepickerToggleIcon svgIcon=\"ontimize:clock\"></mat-icon>\n        </button>\n\n        <mat-error *ngIf=\"hasError('required')\" text=\"{{ 'FORM_VALIDATION.REQUIRED' | oTranslate }} \"></mat-error>\n        <mat-error *ngIf=\"hasError('invalidFormatHour')\"\n          text=\"{{ 'FORM_VALIDATION.HOUR_FORMAT' | oTranslate }} {{ formatString }}\"></mat-error>\n        <mat-error *ngFor=\"let oError of getActiveOErrors()\" text=\"{{ oError.text | oTranslate }}\"></mat-error>\n      </mat-form-field>\n    </div>\n\n    <ngx-material-timepicker #picker (timeSet)=\"onTimepickerChange($event)\" [confirmBtnTmpl]=\"confirmBtn\"\n      [cancelBtnTmpl]=\"cancelBtn\"></ngx-material-timepicker>\n  \n    <ng-template #confirmBtn>\n      <button mat-stroked-button type=\"button\" (click)=\"setTime($event)\"><span>{{'OK' | oTranslate}}</span></button>\n    </ng-template>\n    <ng-template #cancelBtn>\n      <button mat-stroked-button type=\"button\" (click)=\"picker.close()\"><span>{{'CANCEL' | oTranslate}}</span></button>\n    </ng-template>\n  `,\n  styles: [`\n    button.mat-stroked-button{margin:0 6px}\n  `],\n  encapsulation: ViewEncapsulation.None,\n  outputs: DEFAULT_OUTPUTS_O_HOUR_INPUT,\n  inputs: DEFAULT_INPUTS_O_HOUR_INPUT,\n  host: {\n    '[class.o-hour-input]': 'true'\n  }\n})\nexport class OHourInputComponent extends OFormDataComponent implements OnInit, AfterViewInit {\n\n  public static DEFAULT_INPUTS_O_HOUR_INPUT = DEFAULT_INPUTS_O_HOUR_INPUT;\n  public static DEFAULT_OUTPUTS_O_HOUR_INPUT = DEFAULT_OUTPUTS_O_HOUR_INPUT;\n\n  @InputConverter()\n  public textInputEnabled: boolean = true;\n  public min: string;\n  public max: string;\n  protected _format: number = Codes.TWENTY_FOUR_HOUR_FORMAT;\n  protected onKeyboardInputDone = false;\n  protected _valueType: OHourValueType = 'timestamp';\n\n  @ViewChild('picker')\n  private picker: any; // NgxMaterialTimepickerComponent from ngx-material-timepicker\n\n  constructor(\n    @Optional() @Inject(forwardRef(() => OFormComponent)) form: OFormComponent,\n    elRef: ElementRef,\n    injector: Injector\n  ) {\n    super(form, elRef, injector);\n    this._defaultSQLTypeKey = 'TIMESTAMP';\n  }\n\n  public ngOnInit(): void {\n    super.ngOnInit();\n  }\n\n  public ngAfterViewInit(): void {\n    super.ngAfterViewInit();\n    this.modifyPickerMethods();\n  }\n\n  public getValue(): any {\n    const value = super.getValue();\n    // Component value is always string internally, it must be converted to expected type\n    if (!Util.isDefined(value) || this.valueType === 'string') {\n      return value;\n    } else if (this.valueType === 'timestamp') {\n      return moment(value, this.formatString).valueOf();\n    }\n  }\n\n  public onKeyDown(e: KeyboardEvent): void {\n    if (!Codes.isHourInputAllowed(e)) {\n      e.preventDefault();\n    }\n  }\n\n  public innerOnBlur(event: any): void {\n    if (this.onKeyboardInputDone) {\n      this.updateValeOnInputChange(event);\n    }\n    super.innerOnBlur(event);\n  }\n\n  public registerOnFormControlChange(): void {\n    // This component does not need this subscription\n  }\n\n  get formatString(): string {\n    return (this.format === Codes.TWENTY_FOUR_HOUR_FORMAT ? Codes.HourFormat.TWENTY_FOUR : Codes.HourFormat.TWELVE);\n  }\n\n  public open(e?: Event): void {\n    if (Util.isDefined(e)) {\n      e.stopPropagation();\n    }\n    if (this.picker) {\n      this.picker.open();\n    }\n  }\n\n  public setTimestampValue(value: any, options?: IFormValueOptions): void {\n    let parsedValue;\n    const momentV = Util.isDefined(value) ? moment(value) : value;\n    if (momentV && momentV.isValid()) {\n      parsedValue = momentV.utcOffset(0).format(this.formatString);\n    }\n    this.setValue(parsedValue, options);\n  }\n\n  public resolveValidators(): ValidatorFn[] {\n    const validators: ValidatorFn[] = super.resolveValidators();\n    if (this.format === Codes.TWENTY_FOUR_HOUR_FORMAT) {\n      validators.push(OValidators.twentyFourHourFormatValidator);\n    } else {\n      validators.push(OValidators.twelveHourFormatValidator);\n    }\n    return validators;\n  }\n\n  public onFormControlChange(value: any): void {\n    if (this.oldValue === value) {\n      return;\n    }\n    super.onFormControlChange(value);\n  }\n\n  set format(val: number) {\n    const old = this._format;\n    let parsedVal = NumberConverter(val);\n    if (parsedVal !== Codes.TWELVE_FOUR_HOUR_FORMAT && parsedVal !== Codes.TWENTY_FOUR_HOUR_FORMAT) {\n      parsedVal = Codes.TWENTY_FOUR_HOUR_FORMAT;\n    }\n    this._format = parsedVal;\n    if (parsedVal !== old) {\n      this.updateValidators();\n    }\n  }\n\n  get format(): number {\n    return this._format;\n  }\n\n  set valueType(val: any) {\n    this._valueType = this.convertToOHourValueType(val);\n  }\n\n  get valueType(): any {\n    return this._valueType;\n  }\n\n  public convertToOHourValueType(val: any): OHourValueType {\n    const result: OHourValueType = 'string';\n    const lowerVal = (val || '').toLowerCase();\n    if (lowerVal === 'string' || lowerVal === 'timestamp') {\n      return lowerVal;\n    }\n    return result;\n  }\n\n  public onChangeEvent(arg: any): void {\n    this.onTimepickerChange(arg.target.value);\n  }\n\n  public onTimepickerChange(event: string): void {\n    let value: any = event;\n    if (this.valueType === 'timestamp') {\n      value = moment(event, this.formatString).valueOf();\n    } else {\n      value = this.convertToFormatString(event);\n    }\n    /** emitModelToViewChange: false  because onChange event is trigger in ngModelChange */\n    this.setValue(value, {\n      changeType: OValueChangeEvent.USER_CHANGE,\n      emitEvent: false,\n      emitModelToViewChange: false\n    });\n  }\n\n  protected modifyPickerMethods(): void {\n    if (this.picker) {\n      const ngxTimepicker = this.picker.timepickerInput;\n      if (ngxTimepicker && ngxTimepicker.onInput) {\n        ngxTimepicker.onInput = (value: string) => this.onKeyboardInputDone = true;\n      }\n    }\n  }\n\n  protected updateValeOnInputChange(blurEvent: any): void {\n    if (this.onKeyboardInputDone) {\n      let value: string = blurEvent.currentTarget.value;\n      // ngx-material-timepicker does not allow writing characters on input, so we add 'AM/PM' in order to make validation work properly\n      value = this.parseHour(value);\n      this.setValue(value);\n    }\n    this.onKeyboardInputDone = false;\n  }\n\n  /**\n   * Receives an hour input introduced by the user and returns the hour formated acording current format\n   * @param value\n   */\n  protected parseHour(value: string): string {\n    const strArray = value.split(':');\n    let hour: any = strArray[0];\n\n    if (Codes.TWELVE_FOUR_HOUR_FORMAT === this.format) {\n      if (hour) {\n        hour = parseInt(hour);\n        const period = hour <= 12 ? ' AM' : ' PM';\n        if (hour > 12) {\n          hour = hour - 12;\n        }\n        strArray[0] = hour;\n        value = strArray.join(':') + period;\n      }\n    } else if (Codes.TWELVE_FOUR_HOUR_FORMAT === this.format) {\n      // do nothing\n    }\n    return value;\n  }\n\n  protected emitOnValueChange(type, newValue, oldValue): void {\n    this.onChange.emit(newValue);\n    super.emitOnValueChange(type, newValue, oldValue);\n  }\n\n  protected convertToFormatString(value): string {\n    if (value === '00:00' || !Util.isDefined(value)) {\n      return value;\n    }\n    const formatStr = this.format === Codes.TWENTY_FOUR_HOUR_FORMAT ? 'HH:mm' : 'hh:mm a';\n    let result = value;\n    if (typeof value === 'number') {\n      result = moment(value).format(formatStr);\n    } else {\n      result = value ? moment(value, 'h:mm A').format(formatStr) : value;\n    }\n    return result;\n  }\n\n}\n\n@NgModule({\n  declarations: [OHourInputComponent],\n  imports: [OSharedModule, CommonModule, NgxMaterialTimepickerModule],\n  exports: [OHourInputComponent]\n})\nexport class OHourInputModule { }\n"]}