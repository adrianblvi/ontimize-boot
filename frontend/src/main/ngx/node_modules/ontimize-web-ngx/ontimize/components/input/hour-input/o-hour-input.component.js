var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, ElementRef, Inject, Injector, NgModule, Optional, ViewChild, ViewEncapsulation, forwardRef } from '@angular/core';
import { Codes, Util } from '../../../utils';
import { DEFAULT_INPUTS_O_FORM_DATA_COMPONENT, DEFAULT_OUTPUTS_O_FORM_DATA_COMPONENT, OFormDataComponent, OValueChangeEvent } from '../../o-form-data-component.class';
import { CommonModule } from '@angular/common';
import { InputConverter } from '../../../decorators/input-converter';
import { NgxMaterialTimepickerModule } from 'ngx-material-timepicker';
import { NumberConverter } from '../../../decorators';
import { OFormComponent } from '../../form/form-components';
import { OSharedModule } from '../../../shared';
import { OValidators } from '../../../validators/o-validators';
import moment from 'moment';
export var DEFAULT_INPUTS_O_HOUR_INPUT = [
    'format',
    'textInputEnabled: text-input-enabled',
    'min',
    'max',
    'valueType: value-type'
].concat(DEFAULT_INPUTS_O_FORM_DATA_COMPONENT);
export var DEFAULT_OUTPUTS_O_HOUR_INPUT = DEFAULT_OUTPUTS_O_FORM_DATA_COMPONENT.slice();
var OHourInputComponent = (function (_super) {
    __extends(OHourInputComponent, _super);
    function OHourInputComponent(form, elRef, injector) {
        var _this = _super.call(this, form, elRef, injector) || this;
        _this.textInputEnabled = true;
        _this._format = Codes.TWENTY_FOUR_HOUR_FORMAT;
        _this.onKeyboardInputDone = false;
        _this._valueType = 'timestamp';
        _this._defaultSQLTypeKey = 'TIMESTAMP';
        return _this;
    }
    OHourInputComponent.prototype.ngOnInit = function () {
        _super.prototype.ngOnInit.call(this);
    };
    OHourInputComponent.prototype.ngAfterViewInit = function () {
        _super.prototype.ngAfterViewInit.call(this);
        this.modifyPickerMethods();
    };
    OHourInputComponent.prototype.getValue = function () {
        var value = _super.prototype.getValue.call(this);
        if (!Util.isDefined(value) || this.valueType === 'string') {
            return value;
        }
        else if (this.valueType === 'timestamp') {
            return moment(value, this.formatString).valueOf();
        }
    };
    OHourInputComponent.prototype.onKeyDown = function (e) {
        if (!Codes.isHourInputAllowed(e)) {
            e.preventDefault();
        }
    };
    OHourInputComponent.prototype.innerOnBlur = function (event) {
        if (this.onKeyboardInputDone) {
            this.updateValeOnInputChange(event);
        }
        _super.prototype.innerOnBlur.call(this, event);
    };
    OHourInputComponent.prototype.registerOnFormControlChange = function () {
    };
    Object.defineProperty(OHourInputComponent.prototype, "formatString", {
        get: function () {
            return (this.format === Codes.TWENTY_FOUR_HOUR_FORMAT ? Codes.HourFormat.TWENTY_FOUR : Codes.HourFormat.TWELVE);
        },
        enumerable: true,
        configurable: true
    });
    OHourInputComponent.prototype.open = function (e) {
        if (Util.isDefined(e)) {
            e.stopPropagation();
        }
        if (this.picker) {
            this.picker.open();
        }
    };
    OHourInputComponent.prototype.setTimestampValue = function (value, options) {
        var parsedValue;
        var momentV = Util.isDefined(value) ? moment(value) : value;
        if (momentV && momentV.isValid()) {
            parsedValue = momentV.utcOffset(0).format(this.formatString);
        }
        this.setValue(parsedValue, options);
    };
    OHourInputComponent.prototype.resolveValidators = function () {
        var validators = _super.prototype.resolveValidators.call(this);
        if (this.format === Codes.TWENTY_FOUR_HOUR_FORMAT) {
            validators.push(OValidators.twentyFourHourFormatValidator);
        }
        else {
            validators.push(OValidators.twelveHourFormatValidator);
        }
        return validators;
    };
    OHourInputComponent.prototype.onFormControlChange = function (value) {
        if (this.oldValue === value) {
            return;
        }
        _super.prototype.onFormControlChange.call(this, value);
    };
    Object.defineProperty(OHourInputComponent.prototype, "format", {
        get: function () {
            return this._format;
        },
        set: function (val) {
            var old = this._format;
            var parsedVal = NumberConverter(val);
            if (parsedVal !== Codes.TWELVE_FOUR_HOUR_FORMAT && parsedVal !== Codes.TWENTY_FOUR_HOUR_FORMAT) {
                parsedVal = Codes.TWENTY_FOUR_HOUR_FORMAT;
            }
            this._format = parsedVal;
            if (parsedVal !== old) {
                this.updateValidators();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OHourInputComponent.prototype, "valueType", {
        get: function () {
            return this._valueType;
        },
        set: function (val) {
            this._valueType = this.convertToOHourValueType(val);
        },
        enumerable: true,
        configurable: true
    });
    OHourInputComponent.prototype.convertToOHourValueType = function (val) {
        var result = 'string';
        var lowerVal = (val || '').toLowerCase();
        if (lowerVal === 'string' || lowerVal === 'timestamp') {
            return lowerVal;
        }
        return result;
    };
    OHourInputComponent.prototype.onChangeEvent = function (arg) {
        this.onTimepickerChange(arg.target.value);
    };
    OHourInputComponent.prototype.onTimepickerChange = function (event) {
        var value = event;
        if (this.valueType === 'timestamp') {
            value = moment(event, this.formatString).valueOf();
        }
        else {
            value = this.convertToFormatString(event);
        }
        this.setValue(value, {
            changeType: OValueChangeEvent.USER_CHANGE,
            emitEvent: false,
            emitModelToViewChange: false
        });
    };
    OHourInputComponent.prototype.modifyPickerMethods = function () {
        var _this = this;
        if (this.picker) {
            var ngxTimepicker = this.picker.timepickerInput;
            if (ngxTimepicker && ngxTimepicker.onInput) {
                ngxTimepicker.onInput = function (value) { return _this.onKeyboardInputDone = true; };
            }
        }
    };
    OHourInputComponent.prototype.updateValeOnInputChange = function (blurEvent) {
        if (this.onKeyboardInputDone) {
            var value = blurEvent.currentTarget.value;
            value = this.parseHour(value);
            this.setValue(value);
        }
        this.onKeyboardInputDone = false;
    };
    OHourInputComponent.prototype.parseHour = function (value) {
        var strArray = value.split(':');
        var hour = strArray[0];
        if (Codes.TWELVE_FOUR_HOUR_FORMAT === this.format) {
            if (hour) {
                hour = parseInt(hour);
                var period = hour <= 12 ? ' AM' : ' PM';
                if (hour > 12) {
                    hour = hour - 12;
                }
                strArray[0] = hour;
                value = strArray.join(':') + period;
            }
        }
        else if (Codes.TWELVE_FOUR_HOUR_FORMAT === this.format) {
        }
        return value;
    };
    OHourInputComponent.prototype.emitOnValueChange = function (type, newValue, oldValue) {
        this.onChange.emit(newValue);
        _super.prototype.emitOnValueChange.call(this, type, newValue, oldValue);
    };
    OHourInputComponent.prototype.convertToFormatString = function (value) {
        if (value === '00:00' || !Util.isDefined(value)) {
            return value;
        }
        var formatStr = this.format === Codes.TWENTY_FOUR_HOUR_FORMAT ? 'HH:mm' : 'hh:mm a';
        var result = value;
        if (typeof value === 'number') {
            result = moment(value).format(formatStr);
        }
        else {
            result = value ? moment(value, 'h:mm A').format(formatStr) : value;
        }
        return result;
    };
    OHourInputComponent.DEFAULT_INPUTS_O_HOUR_INPUT = DEFAULT_INPUTS_O_HOUR_INPUT;
    OHourInputComponent.DEFAULT_OUTPUTS_O_HOUR_INPUT = DEFAULT_OUTPUTS_O_HOUR_INPUT;
    OHourInputComponent.decorators = [
        { type: Component, args: [{
                    moduleId: module.id,
                    selector: 'o-hour-input',
                    template: "\n    <div fxLayout=\"row\" fxLayoutAlign=\"space-between center\" [formGroup]=\"getFormGroup()\" [matTooltip]=\"tooltip\"\n      [matTooltipClass]=\"tooltipClass\" [matTooltipPosition]=\"tooltipPosition\" [matTooltipShowDelay]=\"tooltipShowDelay\"\n      [matTooltipHideDelay]=\"tooltipHideDelay\">\n      <mat-form-field [appearance]=\"appearance\" [floatLabel]=\"floatLabel\" fxFill [hideRequiredMarker]=\"hideRequiredMarker\">\n        <mat-label *ngIf=\"labelVisible\">{{ olabel | oTranslate }}</mat-label>\n        <input matInput [ngxTimepicker]=\"picker\" [id]=\"getAttribute()\" [placeholder]=\"placeHolder\"\n          [formControlName]=\"getAttribute()\" [readonly]=\"isReadOnly || !textInputEnabled\" (focus)=\"innerOnFocus($event)\"\n          (blur)=\"innerOnBlur($event)\" [required]=\"isRequired\" (change)=\"onChangeEvent($event)\" [min]=\"min\" [max]=\"max\"\n          (keydown)=\"onKeyDown($event)\" [format]=\"format\" [disableClick]=\"true\">\n\n        <button type=\"button\" *ngIf=\"showClearButton\" matSuffix mat-icon-button (click)=\"onClickClearValue($event)\">\n          <mat-icon svgIcon=\"ontimize:close\"></mat-icon>\n        </button>\n        <button type=\"button\" matSuffix mat-icon-button [disabled]=\"isReadOnly || !enabled\" (click)=\"open($event)\">\n          <mat-icon ngxMaterialTimepickerToggleIcon svgIcon=\"ontimize:clock\"></mat-icon>\n        </button>\n\n        <mat-error *ngIf=\"hasError('required')\" text=\"{{ 'FORM_VALIDATION.REQUIRED' | oTranslate }} \"></mat-error>\n        <mat-error *ngIf=\"hasError('invalidFormatHour')\"\n          text=\"{{ 'FORM_VALIDATION.HOUR_FORMAT' | oTranslate }} {{ formatString }}\"></mat-error>\n        <mat-error *ngFor=\"let oError of getActiveOErrors()\" text=\"{{ oError.text | oTranslate }}\"></mat-error>\n      </mat-form-field>\n    </div>\n\n    <ngx-material-timepicker #picker (timeSet)=\"onTimepickerChange($event)\" [confirmBtnTmpl]=\"confirmBtn\"\n      [cancelBtnTmpl]=\"cancelBtn\"></ngx-material-timepicker>\n  \n    <ng-template #confirmBtn>\n      <button mat-stroked-button type=\"button\" (click)=\"setTime($event)\"><span>{{'OK' | oTranslate}}</span></button>\n    </ng-template>\n    <ng-template #cancelBtn>\n      <button mat-stroked-button type=\"button\" (click)=\"picker.close()\"><span>{{'CANCEL' | oTranslate}}</span></button>\n    </ng-template>\n  ",
                    styles: ["\n    button.mat-stroked-button{margin:0 6px}\n  "],
                    encapsulation: ViewEncapsulation.None,
                    outputs: DEFAULT_OUTPUTS_O_HOUR_INPUT,
                    inputs: DEFAULT_INPUTS_O_HOUR_INPUT,
                    host: {
                        '[class.o-hour-input]': 'true'
                    }
                },] },
    ];
    OHourInputComponent.ctorParameters = function () { return [
        { type: OFormComponent, decorators: [{ type: Optional }, { type: Inject, args: [forwardRef(function () { return OFormComponent; }),] }] },
        { type: ElementRef },
        { type: Injector }
    ]; };
    OHourInputComponent.propDecorators = {
        picker: [{ type: ViewChild, args: ['picker',] }]
    };
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OHourInputComponent.prototype, "textInputEnabled", void 0);
    return OHourInputComponent;
}(OFormDataComponent));
export { OHourInputComponent };
var OHourInputModule = (function () {
    function OHourInputModule() {
    }
    OHourInputModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [OHourInputComponent],
                    imports: [OSharedModule, CommonModule, NgxMaterialTimepickerModule],
                    exports: [OHourInputComponent]
                },] },
    ];
    return OHourInputModule;
}());
export { OHourInputModule };
//# sourceMappingURL=o-hour-input.component.js.map