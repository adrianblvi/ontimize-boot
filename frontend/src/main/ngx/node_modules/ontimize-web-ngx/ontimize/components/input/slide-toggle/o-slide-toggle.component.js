var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { CommonModule } from '@angular/common';
import { Component, ElementRef, forwardRef, Inject, Injector, NgModule, Optional, ViewEncapsulation } from '@angular/core';
import { OSharedModule } from '../../../shared/shared.module';
import { Util } from '../../../util/util';
import { OFormComponent, OFormValue } from '../../form/form-components';
import { DEFAULT_INPUTS_O_FORM_DATA_COMPONENT, DEFAULT_OUTPUTS_O_FORM_DATA_COMPONENT, OFormDataComponent } from '../../o-form-data-component.class';
export var DEFAULT_INPUTS_O_SLIDETOGGLE = [
    'trueValue: true-value',
    'falseValue: false-value',
    'booleanType: boolean-type',
    'color',
    'labelPosition: label-position'
].concat(DEFAULT_INPUTS_O_FORM_DATA_COMPONENT);
export var DEFAULT_OUTPUTS_O_SLIDETOGGLE = DEFAULT_OUTPUTS_O_FORM_DATA_COMPONENT.slice();
var OSlideToggleComponent = (function (_super) {
    __extends(OSlideToggleComponent, _super);
    function OSlideToggleComponent(form, elRef, injector) {
        var _this = _super.call(this, form, elRef, injector) || this;
        _this.trueValue = true;
        _this.falseValue = false;
        _this.booleanType = 'boolean';
        _this.labelPosition = 'after';
        _this._defaultSQLTypeKey = 'BOOLEAN';
        _this.defaultValue = false;
        return _this;
    }
    OSlideToggleComponent.prototype.initialize = function () {
        _super.prototype.initialize.call(this);
        if (!Util.isDefined(this.sqlType)) {
            switch (this.booleanType) {
                case 'number':
                    this.sqlType = 'INTEGER';
                    break;
                case 'string':
                    this.sqlType = 'VARCHAR';
                    break;
                case 'boolean':
                default:
                    this.sqlType = 'BOOLEAN';
            }
        }
        this.defaultValue = this.falseValue;
    };
    OSlideToggleComponent.prototype.ensureOFormValue = function (value) {
        if (value instanceof OFormValue) {
            if (!Util.isDefined(value.value)) {
                value.value = this.falseValue;
            }
            this.value = new OFormValue(value.value);
        }
        else {
            this.value = new OFormValue(value === this.trueValue ? this.trueValue : this.falseValue);
        }
    };
    OSlideToggleComponent.prototype.isChecked = function () {
        if (this.value instanceof OFormValue) {
            return this.value.value === this.trueValue;
        }
        return false;
    };
    OSlideToggleComponent.prototype.onClickBlocker = function (e) {
        e.stopPropagation();
    };
    OSlideToggleComponent.DEFAULT_INPUTS_O_CHECKBOX = DEFAULT_INPUTS_O_SLIDETOGGLE;
    OSlideToggleComponent.DEFAULT_OUTPUTS_O_CHECKBOX = DEFAULT_OUTPUTS_O_SLIDETOGGLE;
    OSlideToggleComponent.decorators = [
        { type: Component, args: [{
                    moduleId: module.id,
                    selector: 'o-slide-toggle',
                    inputs: DEFAULT_INPUTS_O_SLIDETOGGLE,
                    outputs: DEFAULT_OUTPUTS_O_SLIDETOGGLE,
                    template: "\n    <div [class.custom-width]=\"hasCustomWidth\" [formGroup]=\"getFormGroup()\" class=\"relative\" [matTooltip]=\"tooltip\"\n      [matTooltipClass]=\"tooltipClass\" [matTooltipPosition]=\"tooltipPosition\" [matTooltipShowDelay]=\"tooltipShowDelay\"\n      [matTooltipHideDelay]=\"tooltipHideDelay\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxFill>\n      <mat-slide-toggle [id]=\"getAttribute()\" [formControlName]=\"getAttribute()\" [checked]=\"isChecked()\"\n        [required]=\"isRequired\" [labelPosition]=\"labelPosition\" [color]=\"color\" (change)=\"onChangeEvent($event)\">\n        <ng-container *ngIf=\"labelVisible\">{{ olabel | oTranslate }}</ng-container>\n        <mat-error *ngIf=\"hasError('required')\" text=\"{{ 'FORM_VALIDATION.REQUIRED' | oTranslate }}\"></mat-error>\n        <mat-error *ngFor=\"let oError of getActiveOErrors()\" text=\"{{ oError.text | oTranslate }}\"></mat-error>\n      </mat-slide-toggle>\n      <div *ngIf=\"isReadOnly\" (click)=\"onClickBlocker($event)\" class=\"read-only-blocker\" fxFill></div>\n    </div>\n  ",
                    styles: ["\n    .o-slide-toggle .read-only-blocker{z-index:2;position:absolute;top:0;left:0;right:0}\n  "],
                    encapsulation: ViewEncapsulation.None,
                    host: {
                        '[class.o-slide-toggle]': 'true'
                    }
                },] },
    ];
    OSlideToggleComponent.ctorParameters = function () { return [
        { type: OFormComponent, decorators: [{ type: Optional }, { type: Inject, args: [forwardRef(function () { return OFormComponent; }),] }] },
        { type: ElementRef },
        { type: Injector }
    ]; };
    return OSlideToggleComponent;
}(OFormDataComponent));
export { OSlideToggleComponent };
var OSlideToggleModule = (function () {
    function OSlideToggleModule() {
    }
    OSlideToggleModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [OSlideToggleComponent],
                    imports: [CommonModule, OSharedModule],
                    exports: [OSlideToggleComponent]
                },] },
    ];
    return OSlideToggleModule;
}());
export { OSlideToggleModule };
//# sourceMappingURL=o-slide-toggle.component.js.map