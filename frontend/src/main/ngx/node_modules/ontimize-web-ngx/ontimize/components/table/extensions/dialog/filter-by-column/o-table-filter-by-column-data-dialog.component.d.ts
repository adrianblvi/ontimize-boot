import { AfterViewInit, ElementRef } from '@angular/core';
import { Observable } from 'rxjs';
import { IColumnValueFilter } from '../../header/o-table-header-components';
import { MatCheckboxChange, MatDialogRef, MatSelectionList, MatSlideToggleChange } from '@angular/material';
import { FormControl } from '@angular/forms';
import { OColumn } from '../../../o-table.component';
export interface ITableFilterByColumnDataInterface {
    value: any;
    selected: boolean;
}
export declare class OTableFilterByColumnDataDialogComponent implements AfterViewInit {
    dialogRef: MatDialogRef<OTableFilterByColumnDataDialogComponent>;
    column: OColumn;
    preloadValues: boolean;
    mode: string;
    private isCustomFilterSubject;
    isCustomFilter: Observable<boolean>;
    private isDefaultFilterSubject;
    isDefaultFilter: Observable<boolean>;
    fcText: FormControl;
    fcFrom: FormControl;
    fcTo: FormControl;
    protected columnData: Array<ITableFilterByColumnDataInterface>;
    protected tableData: Array<any>;
    protected _listData: Array<ITableFilterByColumnDataInterface>;
    filter: ElementRef;
    filterValueList: MatSelectionList;
    constructor(dialogRef: MatDialogRef<OTableFilterByColumnDataDialogComponent>, data: any);
    ngAfterViewInit(): void;
    listData: Array<ITableFilterByColumnDataInterface>;
    initializeDataList(filter?: IColumnValueFilter): void;
    initializeFilterEvent(): void;
    initializeCustomFilterValues(filter: IColumnValueFilter): void;
    readonly selectedValues: Array<ITableFilterByColumnDataInterface>;
    areAllSelected(): boolean;
    isIndeterminate(): boolean;
    onSelectAllChange(event: MatCheckboxChange): void;
    getDistinctValues(data: Array<any>, filter: IColumnValueFilter): void;
    getColumnValuesFilter(): IColumnValueFilter;
    onSlideChange(e: MatSlideToggleChange): void;
    isTextType(): boolean;
    isNumericType(): boolean;
    isDateType(): boolean;
    getRowValue(i: number): any;
    getFixedDimensionClass(): boolean;
    protected getTypedValue(control: FormControl): any;
}
