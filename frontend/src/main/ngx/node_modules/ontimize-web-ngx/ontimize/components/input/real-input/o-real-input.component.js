var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { CommonModule } from '@angular/common';
import { Component, ElementRef, forwardRef, Inject, Injector, NgModule, Optional, ViewEncapsulation } from '@angular/core';
import { InputConverter } from '../../../decorators';
import { ORealPipe } from '../../../pipes';
import { OSharedModule } from '../../../shared';
import { Util } from '../../../util/util';
import { OFormComponent } from '../../form/form-components';
import { DEFAULT_INPUTS_O_INTEGER_INPUT, DEFAULT_OUTPUTS_O_INTEGER_INPUT, OIntegerInputComponent, OIntegerInputModule } from '../integer-input/o-integer-input.component';
export var DEFAULT_INPUTS_O_REAL_INPUT = DEFAULT_INPUTS_O_INTEGER_INPUT.concat([
    'minDecimalDigits: min-decimal-digits',
    'maxDecimalDigits: max-decimal-digits',
    'decimalSeparator : decimal-separator'
]);
export var DEFAULT_OUTPUTS_O_REAL_INPUT = DEFAULT_OUTPUTS_O_INTEGER_INPUT.slice();
var ORealInputComponent = (function (_super) {
    __extends(ORealInputComponent, _super);
    function ORealInputComponent(form, elRef, injector) {
        var _this = _super.call(this, form, elRef, injector) || this;
        _this.minDecimalDigits = 2;
        _this.maxDecimalDigits = 2;
        _this.step = 0.01;
        _this.grouping = true;
        _this._defaultSQLTypeKey = 'FLOAT';
        return _this;
    }
    ORealInputComponent.prototype.setComponentPipe = function () {
        this.componentPipe = new ORealPipe(this.injector);
    };
    ORealInputComponent.prototype.ngOnInit = function () {
        _super.prototype.ngOnInit.call(this);
        this.pipeArguments.decimalSeparator = this.decimalSeparator;
        this.pipeArguments.minDecimalDigits = this.minDecimalDigits;
        this.pipeArguments.maxDecimalDigits = this.maxDecimalDigits;
    };
    ORealInputComponent.prototype.resolveValidators = function () {
        var validators = _super.prototype.resolveValidators.call(this);
        if (Util.isDefined(this.minDecimalDigits)) {
            validators.push(this.minDecimalDigitsValidator.bind(this));
        }
        if (Util.isDefined(this.maxDecimalDigits)) {
            validators.push(this.maxDecimalDigitsValidator.bind(this));
        }
        return validators;
    };
    ORealInputComponent.prototype.minDecimalDigitsValidator = function (control) {
        var ctrlValue = control.value;
        if (typeof control.value === 'number') {
            ctrlValue = ctrlValue.toString();
        }
        if (ctrlValue && ctrlValue.length) {
            var valArray = ctrlValue.split(this.decimalSeparator ? this.decimalSeparator : '.');
            if (Util.isDefined(this.minDecimalDigits) && (this.minDecimalDigits > 0) && Util.isDefined(valArray[1]) && (valArray[1].length < this.minDecimalDigits)) {
                return {
                    minDecimaldigits: {
                        requiredMinDecimaldigits: this.minDecimalDigits
                    }
                };
            }
        }
        return {};
    };
    ORealInputComponent.prototype.maxDecimalDigitsValidator = function (control) {
        var ctrlValue = control.value;
        if (typeof control.value === 'number') {
            ctrlValue = ctrlValue.toString();
        }
        if (ctrlValue && ctrlValue.length) {
            var valArray = ctrlValue.split(this.decimalSeparator ? this.decimalSeparator : '.');
            if (Util.isDefined(this.maxDecimalDigits) && (this.maxDecimalDigits > 0) && Util.isDefined(valArray[1]) && (valArray[1].length > this.maxDecimalDigits)) {
                return {
                    maxDecimaldigits: {
                        requiredMaxDecimaldigits: this.maxDecimalDigits
                    }
                };
            }
        }
        return {};
    };
    ORealInputComponent.prototype.initializeStep = function () {
        if (this.step <= 0) {
            this.step = 1 / Math.pow(10, this.maxDecimalDigits);
            console.warn('`step` attribute must be greater than zero');
        }
    };
    ORealInputComponent.DEFAULT_INPUTS_O_REAL_INPUT = DEFAULT_INPUTS_O_REAL_INPUT;
    ORealInputComponent.DEFAULT_OUTPUTS_O_REAL_INPUT = DEFAULT_OUTPUTS_O_REAL_INPUT;
    ORealInputComponent.decorators = [
        { type: Component, args: [{
                    moduleId: module.id,
                    selector: 'o-real-input',
                    template: "\n    <div [formGroup]=\"getFormGroup()\" [matTooltip]=\"tooltip\" [matTooltipClass]=\"tooltipClass\"\n      [matTooltipPosition]=\"tooltipPosition\" [matTooltipShowDelay]=\"tooltipShowDelay\"\n      [matTooltipHideDelay]=\"tooltipHideDelay\">\n      <mat-form-field [appearance]=\"appearance\" [floatLabel]=\"floatLabel\" [hideRequiredMarker]=\"hideRequiredMarker\"\n        [class.custom-width]=\"hasCustomWidth\" [class.icon-field]=\"showClearButton\" fxFlexFill>\n        <mat-label *ngIf=\"labelVisible\">{{ olabel | oTranslate }}</mat-label>\n        <input matInput [type]=\"inputType\" [id]=\"getAttribute()\" [formControlName]=\"getAttribute()\"\n          [placeholder]=\"placeHolder\" (focus)=\"innerOnFocus($event)\" (blur)=\"innerOnBlur($event)\"\n          (change)=\"onChangeEvent($event)\" [readonly]=\"isReadOnly\" [min]=\"min\" [max]=\"max\" [step]=\"step\"\n          [required]=\"isRequired\">\n        <button type=\"button\" *ngIf=\"showClearButton\" matSuffix mat-icon-button (click)=\"onClickClearValue($event)\">\n          <mat-icon svgIcon=\"ontimize:close\"></mat-icon>\n        </button>\n        <mat-error *ngIf=\"hasError('required')\" text=\"{{ 'FORM_VALIDATION.REQUIRED' | oTranslate }}\"></mat-error>\n        <mat-error *ngIf=\"hasError('min')\"\n          text=\"{{ 'FORM_VALIDATION.MIN_VALUE' | oTranslate }}: {{ getErrorValue('min', 'requiredMin') }}\"></mat-error>\n        <mat-error *ngIf=\"hasError('max')\"\n          text=\"{{ 'FORM_VALIDATION.MAX_VALUE' | oTranslate }}: {{ getErrorValue('max', 'requiredMax') }}\"></mat-error>\n        <mat-error *ngIf=\"hasError('minDecimaldigits')\"\n          text=\"{{ 'FORM_VALIDATION.MIN_DECIMAL_DIGITS' | oTranslate }}: {{ getErrorValue('minDecimaldigits', 'requiredMinDecimaldigits') }}\">\n        </mat-error>\n        <mat-error *ngIf=\"hasError('maxDecimaldigits')\"\n          text=\"{{ 'FORM_VALIDATION.MAX_DECIMAL_DIGITS' | oTranslate }}: {{ getErrorValue('maxDecimaldigits', 'requiredMaxDecimaldigits') }}\">\n        </mat-error>\n        <mat-error *ngFor=\"let oError of getActiveOErrors()\" text=\"{{ oError.text | oTranslate }}\"></mat-error>\n      </mat-form-field>\n    </div>\n  ",
                    styles: ["\n\n  "],
                    inputs: DEFAULT_INPUTS_O_REAL_INPUT,
                    outputs: DEFAULT_OUTPUTS_O_REAL_INPUT,
                    encapsulation: ViewEncapsulation.None
                },] },
    ];
    ORealInputComponent.ctorParameters = function () { return [
        { type: OFormComponent, decorators: [{ type: Optional }, { type: Inject, args: [forwardRef(function () { return OFormComponent; }),] }] },
        { type: ElementRef },
        { type: Injector }
    ]; };
    __decorate([
        InputConverter(),
        __metadata("design:type", Number)
    ], ORealInputComponent.prototype, "minDecimalDigits", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Number)
    ], ORealInputComponent.prototype, "maxDecimalDigits", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Number)
    ], ORealInputComponent.prototype, "step", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], ORealInputComponent.prototype, "grouping", void 0);
    return ORealInputComponent;
}(OIntegerInputComponent));
export { ORealInputComponent };
var ORealInputModule = (function () {
    function ORealInputModule() {
    }
    ORealInputModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [ORealInputComponent],
                    imports: [CommonModule, OSharedModule, OIntegerInputModule],
                    exports: [OIntegerInputModule, ORealInputComponent]
                },] },
    ];
    return ORealInputModule;
}());
export { ORealInputModule };
//# sourceMappingURL=o-real-input.component.js.map