import { ComponentFactoryResolver, EventEmitter, Injector, OnInit } from '@angular/core';
import { FormControl, ValidatorFn } from '@angular/forms';
import { OColumn, OTableComponent } from '../../../o-table.component';
import { OTranslateService, SnackBarService } from '../../../../../services';
export declare const DEFAULT_INPUTS_O_TABLE_INSERTABLE_ROW: string[];
export declare const DEFAULT_OUTPUTS_O_TABLE_INSERTABLE_ROW: string[];
export declare class OTableInsertableRowComponent implements OnInit {
    protected injector: Injector;
    protected table: OTableComponent;
    protected resolver: ComponentFactoryResolver;
    static DEFAULT_INPUTS_O_TABLE_INSERTABLE_ROW: string[];
    static DEFAULT_OUTPUTS_O_TABLE_INSERTABLE_ROW: string[];
    static AVAILABLE_ROW_POSITIONS: string[];
    static DEFAULT_ROW_POSITION: string;
    protected columns: string;
    protected columnsArray: Array<string>;
    protected requiredColumns: string;
    protected requiredColumnsArray: Array<string>;
    onPostInsertRecord: EventEmitter<any>;
    columnEditors: any;
    trWrapper: EventTarget;
    protected position: string;
    showPlaceHolder: boolean;
    includeParentKeys: boolean;
    enabled: boolean;
    rowData: {};
    protected controls: any;
    translateService: OTranslateService;
    snackBarService: SnackBarService;
    constructor(injector: Injector, table: OTableComponent, resolver: ComponentFactoryResolver);
    ngOnInit(): void;
    isFirstRow(): boolean;
    isColumnInsertable(column: OColumn): boolean;
    isColumnRequired(column: OColumn): boolean;
    initializeEditors(): void;
    useCellEditor(column: OColumn): boolean;
    getControl(column: OColumn, disabled?: boolean): FormControl;
    resolveValidators(column: OColumn): ValidatorFn[];
    getPlaceholder(column: OColumn): string;
    handleKeyboardEvent(event: KeyboardEvent): void;
    insertRecord(): void;
    protected validateFields(): boolean;
    protected getAttributesValuesToInsert(): Object;
    protected onInsertSuccess(res: any): void;
    protected cleanFields(): void;
    columnHasError(column: OColumn, error: string): boolean;
}
