var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { CommonModule } from '@angular/common';
import { Component, ElementRef, forwardRef, Inject, Injector, NgModule, ViewChild, ViewContainerRef, ViewEncapsulation } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { InputConverter } from '../../../decorators';
import { DialogService, NavigationService, SnackBarService } from '../../../services';
import { OSharedModule } from '../../../shared';
import { PermissionsUtils } from '../../../util/permissions';
import { Util } from '../../../util/util';
import { OFormNavigationComponent } from '../navigation/o-form-navigation.component';
import { OFormComponent } from '../o-form.component';
export var DEFAULT_INPUTS_O_FORM_TOOLBAR = [
    'labelHeader: label-header',
    'labelHeaderAlign: label-header-align',
    'headeractions: header-actions',
    'showHeaderActionsText: show-header-actions-text',
    'showHeaderNavigation:show-header-navigation'
];
var OFormToolbarComponent = (function () {
    function OFormToolbarComponent(_form, element, injector) {
        this._form = _form;
        this.element = element;
        this.injector = injector;
        this.labelHeader = '';
        this.headeractions = '';
        this.labelHeaderAlign = 'center';
        this.showHeaderActionsText = true;
        this.showHeaderNavigation = true;
        this.isDetail = true;
        this.editMode = false;
        this.insertMode = false;
        this.initialMode = true;
        this.refreshBtnEnabled = false;
        this.insertBtnEnabled = false;
        this.deleteBtnEnabled = false;
        this._changesToSave = false;
        this._editBtnEnabled = false;
        this._saveBtnEnabled = false;
        this.mutationObservers = [];
        this._isSaveBtnEnabledSubject = new BehaviorSubject(false);
        this._isEditBtnEnabledSubject = new BehaviorSubject(false);
        this._existsChangesToSaveSubject = new BehaviorSubject(false);
        this.isSaveBtnEnabled = this._isSaveBtnEnabledSubject.asObservable();
        this.isEditBtnEnabled = this._isEditBtnEnabledSubject.asObservable();
        this.existsChangesToSave = this._existsChangesToSaveSubject.asObservable();
        this._form.registerToolbar(this);
        this._dialogService = this.injector.get(DialogService);
        this._navigationService = this.injector.get(NavigationService);
        this.snackBarService = this.injector.get(SnackBarService);
    }
    Object.defineProperty(OFormToolbarComponent.prototype, "changesToSave", {
        get: function () {
            return this._changesToSave;
        },
        set: function (val) {
            this._changesToSave = val;
            var attr = this._form.isEditableDetail() ? PermissionsUtils.ACTION_UPDATE : PermissionsUtils.ACTION_INSERT;
            var permissions = (this.actionsPermissions || []).find(function (p) { return p.attr === attr; });
            if (Util.isDefined(permissions) && permissions.enabled === false) {
                return;
            }
            this._existsChangesToSaveSubject.next(val);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OFormToolbarComponent.prototype, "editBtnEnabled", {
        get: function () {
            return this._editBtnEnabled;
        },
        set: function (value) {
            this._editBtnEnabled = value;
            this._isEditBtnEnabledSubject.next(this._editBtnEnabled);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OFormToolbarComponent.prototype, "saveBtnEnabled", {
        get: function () {
            return this._saveBtnEnabled;
        },
        set: function (value) {
            this._saveBtnEnabled = value;
            this._isSaveBtnEnabledSubject.next(this._saveBtnEnabled);
        },
        enumerable: true,
        configurable: true
    });
    OFormToolbarComponent.prototype.ngOnInit = function () {
        this.formActions = Util.parseArray(this.headeractions);
        if (this.formActions && this.formActions.length > 0) {
            this.refreshBtnEnabled = this.formActions.indexOf('R') !== -1;
            this.insertBtnEnabled = this.formActions.indexOf('I') !== -1;
            this.editBtnEnabled = this.formActions.indexOf('U') !== -1;
            this.deleteBtnEnabled = !this.insertMode && this.formActions.indexOf('D') !== -1;
        }
        if (this._navigationService) {
            var self_1 = this;
            this._navigationService.onTitleChange(function (title) {
                self_1.labelHeader = title;
            });
        }
        this.includeBreadcrumb = this._form.includeBreadcrumb && this._form.formContainer.breadcrumb;
        if (this.includeBreadcrumb) {
            this._form.formContainer.breadcrumb = false;
        }
    };
    OFormToolbarComponent.prototype.ngOnDestroy = function () {
        if (this.formCacheSubscription) {
            this.formCacheSubscription.unsubscribe();
        }
        if (this.mutationObservers) {
            this.mutationObservers.forEach(function (m) {
                m.disconnect();
            });
        }
    };
    OFormToolbarComponent.prototype.ngAfterViewInit = function () {
        this.parsePermissions();
        if (this.includeBreadcrumb) {
            this._form.formContainer.createBreadcrumb(this.breadContainer);
        }
    };
    OFormToolbarComponent.prototype.setInitialMode = function () {
        this.manageEditableDetail();
        this.initialMode = true;
        this.insertMode = false;
        this.editMode = false;
    };
    OFormToolbarComponent.prototype.setInsertMode = function () {
        this.initialMode = false;
        this.insertMode = true;
        this.editMode = false;
    };
    OFormToolbarComponent.prototype.setEditMode = function () {
        this.initialMode = false;
        this.insertMode = false;
        this.editMode = true;
    };
    OFormToolbarComponent.prototype.onCloseDetail = function () {
        this._form.executeToolbarAction(OFormComponent.CLOSE_DETAIL_ACTION, {
            changeToolbarMode: true
        });
    };
    OFormToolbarComponent.prototype.onBack = function () {
        this._form.executeToolbarAction(OFormComponent.BACK_ACTION);
    };
    OFormToolbarComponent.prototype.onReload = function () {
        if (!this.checkEnabledPermission(PermissionsUtils.ACTION_REFRESH)) {
            return;
        }
        var self = this;
        this._form.showConfirmDiscardChanges().then(function (val) {
            if (val) {
                self._form.executeToolbarAction(OFormComponent.RELOAD_ACTION);
            }
        });
    };
    OFormToolbarComponent.prototype.onInsert = function () {
        if (!this.checkEnabledPermission(PermissionsUtils.ACTION_INSERT)) {
            return;
        }
        this._form.executeToolbarAction(OFormComponent.GO_INSERT_ACTION, {
            changeToolbarMode: true
        });
    };
    OFormToolbarComponent.prototype.onEdit = function () {
        if (!this.checkEnabledPermission(PermissionsUtils.ACTION_UPDATE)) {
            return;
        }
        this._form.executeToolbarAction(OFormComponent.GO_EDIT_ACTION, {
            changeToolbarMode: true
        });
    };
    OFormToolbarComponent.prototype.onDelete = function (evt) {
        if (!this.checkEnabledPermission(PermissionsUtils.ACTION_DELETE)) {
            return;
        }
        this.showConfirmDelete(evt);
    };
    OFormToolbarComponent.prototype.onSave = function (evt) {
        if (!this.checkEnabledPermission(PermissionsUtils.ACTION_UPDATE)) {
            return;
        }
        this.handleAcceptEditOperation();
    };
    OFormToolbarComponent.prototype.cancelOperation = function () {
        if (this.isDetail) {
            this.onCloseDetail();
        }
        else if (!this.isDetail && this.insertMode) {
            this.onCloseDetail();
        }
        else {
            this.onReload();
            this._form.setInitialMode();
        }
    };
    OFormToolbarComponent.prototype.acceptOperation = function () {
        if (this.editMode) {
            if (!this.checkEnabledPermission(PermissionsUtils.ACTION_UPDATE)) {
                return;
            }
            this.handleAcceptEditOperation();
        }
        else if (this.insertMode) {
            if (!this.checkEnabledPermission(PermissionsUtils.ACTION_INSERT)) {
                return;
            }
            this.handleAcceptInsertOperation();
        }
    };
    OFormToolbarComponent.prototype.handleAcceptInsertOperation = function () {
        this._form.executeToolbarAction(OFormComponent.INSERT_ACTION);
    };
    OFormToolbarComponent.prototype.handleAcceptEditOperation = function () {
        this._form.executeToolbarAction(OFormComponent.EDIT_ACTION);
    };
    OFormToolbarComponent.prototype.showConfirmDelete = function (evt) {
        var _this = this;
        this._dialogService.confirm('CONFIRM', 'MESSAGES.CONFIRM_DELETE').then(function (res) {
            if (res === true) {
                _this._form.executeToolbarAction(OFormComponent.DELETE_ACTION).subscribe(function (resp) {
                    _this._form.onDelete.emit(resp);
                    _this.onCloseDetail();
                }, function (err) {
                    console.error('OFormToolbar.delete error', err);
                });
            }
        });
    };
    Object.defineProperty(OFormToolbarComponent.prototype, "showNavigation", {
        get: function () {
            return this.showHeaderNavigation && !(this._form.getFormManager() && this._form.getFormManager().isTabMode());
        },
        enumerable: true,
        configurable: true
    });
    OFormToolbarComponent.prototype.getLabelHeaderAlign = function () {
        return this.labelHeaderAlign;
    };
    Object.defineProperty(OFormToolbarComponent.prototype, "showUndoButton", {
        get: function () {
            return this._form.undoButton && (!this.initialMode || this._form.isEditableDetail());
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OFormToolbarComponent.prototype, "isChangesStackEmpty", {
        get: function () {
            return this._form.isCacheStackEmpty;
        },
        enumerable: true,
        configurable: true
    });
    OFormToolbarComponent.prototype.onUndoLastChange = function () {
        this._form.executeToolbarAction(OFormComponent.UNDO_LAST_CHANGE_ACTION);
    };
    Object.defineProperty(OFormToolbarComponent.prototype, "isRefreshBtnEnabled", {
        get: function () {
            return this.refreshBtnEnabled;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OFormToolbarComponent.prototype, "isInsertBtnEnabled", {
        get: function () {
            return this.insertBtnEnabled;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OFormToolbarComponent.prototype, "isDeleteBtnEnabled", {
        get: function () {
            return this.deleteBtnEnabled;
        },
        enumerable: true,
        configurable: true
    });
    OFormToolbarComponent.prototype.hasEnabledPermission = function (permission) {
        return permission ? permission.enabled : true;
    };
    Object.defineProperty(OFormToolbarComponent.prototype, "includeBreadcrumb", {
        get: function () {
            return this._includeBreadcrumb;
        },
        set: function (arg) {
            this._includeBreadcrumb = arg;
        },
        enumerable: true,
        configurable: true
    });
    OFormToolbarComponent.prototype.manageEditableDetail = function () {
        var isEditableDetail = this._form.isEditableDetail();
        var updatePermissions = (this.actionsPermissions || []).find(function (p) { return p.attr === PermissionsUtils.ACTION_UPDATE; });
        if (this.hasEnabledPermission(updatePermissions)) {
            this.saveBtnEnabled = isEditableDetail;
        }
        this.refreshBtnEnabled = this.refreshBtnEnabled && isEditableDetail;
        this.insertBtnEnabled = this.insertBtnEnabled && isEditableDetail;
        this.editBtnEnabled = this.editBtnEnabled && !isEditableDetail;
        var self = this;
        this._form.getFormCache().onCacheStateChanges.asObservable().subscribe(function (value) {
            if (self._form.isEditableDetail()) {
                self.changesToSave = self._form.isInitialStateChanged();
            }
        });
    };
    OFormToolbarComponent.prototype.parsePermissions = function () {
        if (this._form.oattr) {
            this.actionsPermissions = this._form.getActionsPermissions();
            if (!Util.isDefined(this.actionsPermissions)) {
                return;
            }
            var self_2 = this;
            this.actionsPermissions.forEach(function (permission) {
                self_2.permissionManagement(permission);
                if (PermissionsUtils.STANDARD_ACTIONS.indexOf(permission.attr) > -1) {
                    if (permission.attr === PermissionsUtils.ACTION_UPDATE) {
                        self_2.permissionManagement(permission, 'edit');
                    }
                }
            });
        }
    };
    OFormToolbarComponent.prototype.permissionManagement = function (permission, attr) {
        var attrAction = Util.isDefined(attr) ? attr : permission.attr;
        var elementByAction = this.element.nativeElement.querySelector('[attr="' + attrAction + '"]');
        if (Util.isDefined(elementByAction)) {
            if (!permission.visible) {
                elementByAction.remove();
            }
            else {
                if (!permission.enabled) {
                    elementByAction.disabled = true;
                    var mutationObserver = PermissionsUtils.registerDisabledChangesInDom(elementByAction);
                    this.mutationObservers.push(mutationObserver);
                }
            }
        }
    };
    OFormToolbarComponent.prototype.checkEnabledPermission = function (attr) {
        var permissions = (this.actionsPermissions || []).find(function (p) { return p.attr === attr; });
        var enabledPermision = PermissionsUtils.checkEnabledPermission(permissions);
        if (!enabledPermision) {
            this.snackBarService.open('MESSAGES.OPERATION_NOT_ALLOWED_PERMISSION');
        }
        return enabledPermision;
    };
    OFormToolbarComponent.DEFAULT_INPUTS_O_FORM_TOOLBAR = DEFAULT_INPUTS_O_FORM_TOOLBAR;
    OFormToolbarComponent.decorators = [
        { type: Component, args: [{
                    moduleId: module.id,
                    selector: 'o-form-toolbar',
                    template: "\n    <mat-toolbar class=\"o-form-toolbar-header\" [class.breadcrumb]=\"includeBreadcrumb\" fxLayout=\"column\"\n      fxLayoutAlign=\"center center\">\n\n      <ng-template *ngIf=\"includeBreadcrumb\" #breadcrumb></ng-template>\n\n      <div class=\"mat-toolbar-tools\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n        <button type=\"button\" mat-icon-button (click)=\"onCloseDetail()\" *ngIf=\"isDetail\" class=\"o-form-toolbar-button o-form-toolbar-back\">\n          <mat-icon svgIcon=\"ontimize:arrow_back\"></mat-icon>\n        </button>\n\n        <o-form-navigation #formNavigation *ngIf=\"showNavigation\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n        </o-form-navigation>\n\n        <span *ngIf=\"getLabelHeaderAlign() === 'center' || getLabelHeaderAlign() === 'end'\" class=\"fill-remaining\"></span>\n        <div *ngIf=\"labelHeader!=''\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\n          <span>{{ labelHeader | oTranslate }}</span>\n        </div>\n        <span *ngIf=\"getLabelHeaderAlign() === 'start' || getLabelHeaderAlign() === 'center'\" class=\"fill-remaining\"></span>\n\n        <ng-content select=\"[o-custom-form-toolbar-buttons-wrapper]\"></ng-content>\n\n        <ng-template [ngIf]=\"showHeaderActionsText\" [ngIfElse]=\"undoBtnWithoutText\">\n          <button type=\"button\" class=\"o-form-toolbar-button o-form-toolbar-button-undo\" mat-stroked-button (click)=\"onUndoLastChange()\"\n            [disabled]=\"isChangesStackEmpty\" *ngIf=\"showUndoButton\">\n            <mat-icon svgIcon=\"ontimize:undo\"></mat-icon>\n            <span>{{ 'UNDO' | oTranslate }}</span>\n          </button>\n        </ng-template>\n        <ng-template #undoBtnWithoutText>\n          <button type=\"button\" class=\"o-form-toolbar-button o-form-toolbar-button-undo\" mat-icon-button (click)=\"onUndoLastChange()\"\n            [disabled]=\"isChangesStackEmpty\" *ngIf=\"showUndoButton\">\n            <mat-icon svgIcon=\"ontimize:undo\"></mat-icon>\n          </button>\n        </ng-template>\n\n        <ng-container *ngIf=\"initialMode\">\n          <ng-template [ngIf]=\"showHeaderActionsText\" [ngIfElse]=\"buttonsWithouText\">\n            <button type=\"button\" class=\"o-form-toolbar-button o-form-toolbar-button-refresh\" mat-stroked-button (click)=\"onReload($event)\"\n              *ngIf=\"isRefreshBtnEnabled\" attr=\"refresh\">\n              <mat-icon svgIcon=\"ontimize:autorenew\"></mat-icon>\n              <span>{{ 'REFRESH' | oTranslate }}</span>\n            </button>\n            <button type=\"button\" class=\"o-form-toolbar-button o-form-toolbar-button-insert\" mat-stroked-button (click)=\"onInsert($event)\"\n              *ngIf=\"isInsertBtnEnabled\" attr=\"insert\">\n              <mat-icon svgIcon=\"ontimize:add\"></mat-icon>\n              <span>{{ 'ADD' | oTranslate }}</span>\n            </button>\n            <button type=\"button\" class=\"o-form-toolbar-button o-form-toolbar-button-edit\" mat-stroked-button (click)=\"onEdit($event)\"\n              *ngIf=\"isEditBtnEnabled | async\" attr=\"edit\">\n              <mat-icon svgIcon=\"ontimize:edit\"></mat-icon>\n              <span>{{ 'EDIT' | oTranslate }}</span>\n            </button>\n            <button type=\"button\" class=\"o-form-toolbar-button o-form-toolbar-button-delete\" mat-stroked-button (click)=\"onDelete($event)\"\n              *ngIf=\"isDeleteBtnEnabled\" attr=\"delete\">\n              <mat-icon svgIcon=\"ontimize:delete\"></mat-icon>\n              <span>{{ 'DELETE' | oTranslate }}</span>\n            </button>\n            <button type=\"button\" class=\"o-form-toolbar-button o-form-toolbar-button-save\" mat-stroked-button (click)=\"onSave($event)\"\n              [disabled]=\"!(existsChangesToSave | async)\" *ngIf=\"isSaveBtnEnabled | async\" attr=\"update\">\n              <mat-icon svgIcon=\"ontimize:save\"></mat-icon>\n              <span>{{ 'SAVE' | oTranslate }}</span>\n            </button>\n          </ng-template>\n          <ng-template #buttonsWithouText>\n            <button type=\"button\" class=\"o-form-toolbar-button o-form-toolbar-button-refresh\" mat-icon-button (click)=\"onReload($event)\"\n              *ngIf=\"isRefreshBtnEnabled\" attr=\"refresh\">\n              <mat-icon svgIcon=\"ontimize:autorenew\"></mat-icon>\n            </button>\n            <button type=\"button\" class=\"o-form-toolbar-button o-form-toolbar-button-insert\" mat-icon-button (click)=\"onInsert($event)\"\n              *ngIf=\"isInsertBtnEnabled\" attr=\"insert\">\n              <mat-icon svgIcon=\"ontimize:add\"></mat-icon>\n            </button>\n            <button type=\"button\" class=\"o-form-toolbar-button-o-form-toolbar-button-edit\" mat-icon-button (click)=\"onEdit($event)\"\n              *ngIf=\"isEditBtnEnabled | async\" attr=\"edit\">\n              <mat-icon svgIcon=\"ontimize:edit\"></mat-icon>\n            </button>\n            <button type=\"button\" class=\"o-form-toolbar-button o-form-toolbar-button-delete\" mat-icon-button (click)=\"onDelete($event)\"\n              *ngIf=\"isDeleteBtnEnabled\" attr=\"delete\">\n              <mat-icon svgIcon=\"ontimize:delete\"></mat-icon>\n            </button>\n            <button type=\"button\" class=\"o-form-toolbar-button o-form-toolbar-button-save\" mat-icon-button (click)=\"onSave($event)\"\n              [disabled]=\"!existsChangesToSave\" *ngIf=\"isSaveBtnEnabled | async\" attr=\"update\">\n              <mat-icon svgIcon=\"ontimize:save\"></mat-icon>\n            </button>\n          </ng-template>\n        </ng-container>\n\n        <ng-container *ngIf=\"editMode || insertMode\">\n          <button type=\"button\" class=\"o-form-toolbar-button o-form-toolbar-button-cancel\" mat-stroked-button (click)=\"cancelOperation($event)\">\n            <mat-icon svgIcon=\"ontimize:clear\"></mat-icon>\n            <span *ngIf=\"showHeaderActionsText\">{{ 'CANCEL' | oTranslate }}</span>\n          </button>\n          <button type=\"button\" class=\"o-form-toolbar-button o-form-toolbar-button-insert\" mat-stroked-button color=\"primary\"\n            (click)=\"acceptOperation($event)\">\n            <mat-icon svgIcon=\"ontimize:done\"></mat-icon>\n            <span *ngIf=\"showHeaderActionsText\">{{ 'INSERT' | oTranslate }}</span>\n          </button>\n        </ng-container>\n      </div>\n\n    </mat-toolbar>\n  ",
                    styles: ["\n    .o-form-toolbar{flex:none;display:block}.o-form-toolbar .o-form-toolbar-header{min-height:50px;max-height:50px;padding:0 16px 0 4px}.o-form-toolbar .o-form-toolbar-header.breadcrumb{padding:16px;min-height:84px;max-height:84px}.o-form-toolbar .o-form-toolbar-header .mat-toolbar-tools{width:100%}.o-form-toolbar .o-form-toolbar-header .mat-toolbar-tools button.o-form-toolbar-button[disabled]{cursor:default}.o-form-toolbar .o-form-toolbar-header .mat-toolbar-tools button.o-form-toolbar-button:not(.mat-icon-button) .mat-button-wrapper{display:flex;align-items:center}.o-form-toolbar .o-form-toolbar-header .mat-toolbar-tools button.o-form-toolbar-button:not(.mat-icon-button) .mat-button-wrapper span{flex:1}.o-form-toolbar .o-form-toolbar-header .mat-toolbar-tools button:not(.mat-icon-button){padding:0 6px}.o-form-toolbar .o-form-toolbar-header .mat-toolbar-tools button.mat-icon-button{padding:0;margin:0}.o-form-toolbar .o-form-toolbar-header .mat-toolbar-tools button.mat-stroked-button{min-width:100px;margin:0 6px}.o-form-toolbar .o-form-toolbar-header .o-breadcrumb{width:100%;height:32px;min-height:initial}.o-form-toolbar .o-form-toolbar-header .o-breadcrumb .mat-toolbar{padding:0;min-height:initial;max-height:initial;height:100%}\n  "],
                    inputs: DEFAULT_INPUTS_O_FORM_TOOLBAR,
                    encapsulation: ViewEncapsulation.None,
                    host: {
                        '[class.o-form-toolbar]': 'true'
                    }
                },] },
    ];
    OFormToolbarComponent.ctorParameters = function () { return [
        { type: OFormComponent, decorators: [{ type: Inject, args: [forwardRef(function () { return OFormComponent; }),] }] },
        { type: ElementRef },
        { type: Injector }
    ]; };
    OFormToolbarComponent.propDecorators = {
        breadContainer: [{ type: ViewChild, args: ['breadcrumb', { read: ViewContainerRef },] }]
    };
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OFormToolbarComponent.prototype, "showHeaderActionsText", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OFormToolbarComponent.prototype, "showHeaderNavigation", void 0);
    return OFormToolbarComponent;
}());
export { OFormToolbarComponent };
var OFormToolbarModule = (function () {
    function OFormToolbarModule() {
    }
    OFormToolbarModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [OFormNavigationComponent, OFormToolbarComponent],
                    imports: [CommonModule, OSharedModule],
                    exports: [OFormNavigationComponent, OFormToolbarComponent]
                },] },
    ];
    return OFormToolbarModule;
}());
export { OFormToolbarModule };
//# sourceMappingURL=o-form-toolbar.component.js.map