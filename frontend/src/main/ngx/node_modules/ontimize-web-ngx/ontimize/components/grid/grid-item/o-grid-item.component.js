var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { CommonModule } from '@angular/common';
import { Component, ElementRef, EventEmitter, forwardRef, HostListener, Inject, NgModule, Optional, Renderer, TemplateRef, ViewChild } from '@angular/core';
import { OSharedModule } from '../../../shared';
import { Codes, ObservableWrapper } from '../../../utils';
import { OGridComponent } from '../../grid/o-grid.component';
import { InputConverter } from '../../../decorators';
export var DEFAULT_INPUTS_O_GRID_ITEM = [
    'colspan',
    'rowspan'
];
var OGridItemComponent = (function () {
    function OGridItemComponent(_el, renderer, _grid) {
        this._el = _el;
        this.renderer = renderer;
        this._grid = _grid;
        this.mdClick = new EventEmitter();
        this.mdDoubleClick = new EventEmitter();
        this.colspan = 1;
        this.rowspan = 1;
    }
    OGridItemComponent.prototype.onMouseEnter = function () {
        if (this._grid.detailMode !== Codes.DETAIL_MODE_NONE) {
            this.renderer.setElementStyle(this._el.nativeElement, 'cursor', 'pointer');
        }
    };
    OGridItemComponent.prototype.onItemClicked = function (e) {
        ObservableWrapper.callEmit(this.mdClick, this);
    };
    OGridItemComponent.prototype.onItemDoubleClicked = function (e) {
        ObservableWrapper.callEmit(this.mdDoubleClick, this);
    };
    OGridItemComponent.prototype.onClick = function (onNext) {
        return ObservableWrapper.subscribe(this.mdClick, onNext);
    };
    OGridItemComponent.prototype.onDoubleClick = function (onNext) {
        return ObservableWrapper.subscribe(this.mdDoubleClick, onNext);
    };
    OGridItemComponent.prototype.setItemData = function (data) {
        if (!this.modelData) {
            this.modelData = data;
        }
    };
    OGridItemComponent.prototype.getItemData = function () {
        return this.modelData;
    };
    OGridItemComponent.decorators = [
        { type: Component, args: [{
                    moduleId: module.id,
                    selector: 'o-grid-item',
                    template: "\n    <ng-template #templateref>\n      <ng-content></ng-content>\n    </ng-template>\n  ",
                    inputs: DEFAULT_INPUTS_O_GRID_ITEM,
                    host: {
                        '[class.o-grid-item]': 'true',
                        '(click)': 'onItemClicked($event)',
                        '(dblclick)': 'onItemDoubleClicked($event)'
                    },
                },] },
    ];
    OGridItemComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer },
        { type: OGridComponent, decorators: [{ type: Optional }, { type: Inject, args: [forwardRef(function () { return OGridComponent; }),] }] }
    ]; };
    OGridItemComponent.propDecorators = {
        template: [{ type: ViewChild, args: [TemplateRef,] }],
        onMouseEnter: [{ type: HostListener, args: ['mouseenter',] }]
    };
    __decorate([
        InputConverter(),
        __metadata("design:type", Number)
    ], OGridItemComponent.prototype, "colspan", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Number)
    ], OGridItemComponent.prototype, "rowspan", void 0);
    return OGridItemComponent;
}());
export { OGridItemComponent };
var OGridItemModule = (function () {
    function OGridItemModule() {
    }
    OGridItemModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [OGridItemComponent],
                    imports: [CommonModule, OSharedModule],
                    exports: [OGridItemComponent]
                },] },
    ];
    return OGridItemModule;
}());
export { OGridItemModule };
//# sourceMappingURL=o-grid-item.component.js.map