import { Directive, ElementRef, EventEmitter, HostListener, Input, Renderer2 } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { ObservableWrapper } from '../../../util/async';
import { Codes } from '../../../util/codes';
var OListItemDirective = (function () {
    function OListItemDirective(_el, renderer, actRoute) {
        this._el = _el;
        this.renderer = renderer;
        this.actRoute = actRoute;
        this.mdClick = new EventEmitter();
        this.mdDoubleClick = new EventEmitter();
        this.selectable = false;
    }
    OListItemDirective.prototype.ngOnInit = function () {
        var _this = this;
        this.subcription = this.actRoute.params.subscribe(function (params) { return _this.updateActiveState(params); });
    };
    OListItemDirective.prototype.ngOnDestroy = function () {
        if (this.subcription) {
            this.subcription.unsubscribe();
        }
    };
    OListItemDirective.prototype.onMouseEnter = function () {
        if (!this.selectable && this._list.detailMode !== Codes.DETAIL_MODE_NONE) {
            this.renderer.setStyle(this._el.nativeElement, 'cursor', 'pointer');
        }
    };
    OListItemDirective.prototype.updateActiveState = function (params) {
        if (this._list) {
            var aKeys = this._list.getKeys();
            if (this.modelData) {
                var _act = false;
                if (aKeys.length > 0) {
                    for (var k = 0; k < aKeys.length; ++k) {
                        var key = aKeys[k];
                        var id = params[key];
                        _act = (this.modelData[key] === id);
                        if (_act === false) {
                            break;
                        }
                    }
                }
                if (_act) {
                    this._el.nativeElement.classList.add('mat-active');
                }
                else {
                    this._el.nativeElement.classList.remove('mat-active');
                }
            }
            else {
                this._el.nativeElement.classList.remove('mat-active');
            }
        }
    };
    OListItemDirective.prototype.onItemClicked = function (e) {
        if (!this.selectable) {
            ObservableWrapper.callEmit(this.mdClick, this);
        }
    };
    OListItemDirective.prototype.onClick = function (onNext) {
        return ObservableWrapper.subscribe(this.mdClick, onNext);
    };
    OListItemDirective.prototype.onItemDoubleClicked = function (e) {
        if (!this.selectable) {
            ObservableWrapper.callEmit(this.mdDoubleClick, this);
        }
    };
    OListItemDirective.prototype.onDoubleClick = function (onNext) {
        return ObservableWrapper.subscribe(this.mdDoubleClick, onNext);
    };
    OListItemDirective.prototype.isSelected = function () {
        return this._list.isItemSelected(this.modelData);
    };
    OListItemDirective.prototype.onSelect = function () {
        this._list.setSelected(this.modelData);
    };
    OListItemDirective.prototype.setListComponent = function (list) {
        this._list = list;
    };
    OListItemDirective.prototype.setItemData = function (data) {
        if (!this.modelData) {
            this.modelData = data;
        }
    };
    OListItemDirective.prototype.getItemData = function () {
        return this.modelData;
    };
    OListItemDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'o-list-item, mat-list-item[o-list-item], mat-card[o-list-item]',
                    exportAs: 'olistitem',
                    host: {
                        '[class.o-list-item]': 'true',
                        '(click)': 'onItemClicked($event)',
                        '(dblclick)': 'onItemDoubleClicked($event)'
                    }
                },] },
    ];
    OListItemDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: ActivatedRoute }
    ]; };
    OListItemDirective.propDecorators = {
        modelData: [{ type: Input, args: ['o-list-item',] }],
        selectable: [{ type: Input, args: ['selectable',] }],
        onMouseEnter: [{ type: HostListener, args: ['mouseenter',] }]
    };
    return OListItemDirective;
}());
export { OListItemDirective };
//# sourceMappingURL=o-list-item.directive.js.map