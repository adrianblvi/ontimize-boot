var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, Injector, TemplateRef, ViewChild, ChangeDetectionStrategy } from '@angular/core';
import { InputConverter } from '../../../../../decorators';
import { OIntegerPipe } from '../../../../../pipes';
import { OBaseTableCellRenderer } from '../o-base-table-cell-renderer.class';
export var DEFAULT_INPUTS_O_TABLE_CELL_RENDERER_INTEGER = [
    'grouping',
    'thousandSeparator: thousand-separator'
];
var OTableCellRendererIntegerComponent = (function (_super) {
    __extends(OTableCellRendererIntegerComponent, _super);
    function OTableCellRendererIntegerComponent(injector) {
        var _this = _super.call(this, injector) || this;
        _this.injector = injector;
        _this.grouping = true;
        _this.thousandSeparator = ',';
        _this.tableColumn.type = 'integer';
        _this.setComponentPipe();
        return _this;
    }
    OTableCellRendererIntegerComponent.prototype.setComponentPipe = function () {
        this.componentPipe = new OIntegerPipe(this.injector);
    };
    OTableCellRendererIntegerComponent.prototype.ngOnInit = function () {
        this.pipeArguments = {
            grouping: this.grouping,
            thousandSeparator: this.thousandSeparator
        };
    };
    OTableCellRendererIntegerComponent.prototype.ngAfterContentInit = function () {
        _super.prototype.ngAfterContentInit.call(this);
    };
    OTableCellRendererIntegerComponent.DEFAULT_INPUTS_O_TABLE_CELL_RENDERER_INTEGER = DEFAULT_INPUTS_O_TABLE_CELL_RENDERER_INTEGER;
    OTableCellRendererIntegerComponent.decorators = [
        { type: Component, args: [{
                    moduleId: module.id,
                    selector: 'o-table-cell-renderer-integer',
                    template: "\n    <ng-template #templateref let-cellvalue=\"cellvalue\">\n        {{ getCellData(cellvalue)}}\n    </ng-template>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    inputs: DEFAULT_INPUTS_O_TABLE_CELL_RENDERER_INTEGER
                },] },
    ];
    OTableCellRendererIntegerComponent.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    OTableCellRendererIntegerComponent.propDecorators = {
        templateref: [{ type: ViewChild, args: ['templateref', { read: TemplateRef },] }]
    };
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OTableCellRendererIntegerComponent.prototype, "grouping", void 0);
    return OTableCellRendererIntegerComponent;
}(OBaseTableCellRenderer));
export { OTableCellRendererIntegerComponent };
//# sourceMappingURL=o-table-cell-renderer-integer.component.js.map