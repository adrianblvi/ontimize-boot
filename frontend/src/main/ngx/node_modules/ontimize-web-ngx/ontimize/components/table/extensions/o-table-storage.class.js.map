{"version":3,"file":"o-table-storage.class.js","sourceRoot":"","sources":["../../../../../tmp/ontimize/components/table/extensions/o-table-storage.class.ts"],"names":[],"mappings":"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","sourcesContent":["import { Codes, Util } from '../../../utils';\nimport { OColumn, OTableComponent } from '../o-table.component';\n\nexport interface ITableFiltersStatus {\n  name: string;\n  description?: string;\n  filter?: any;\n}\n\nexport interface ITableConfiguration {\n  name: string;\n  description?: string;\n}\n\nexport class OTableStorage {\n\n  public static STORED_FILTER_KEY = 'stored-filter';\n  public static USER_STORED_FILTERS_KEY = 'user-stored-filters';\n\n  public static STORED_CONFIGURATION_KEY = 'stored-configuration';\n  public static STORED_PROPERTIES_KEY = 'stored-properties';\n  public static STORED_CONFIGURATIONS_KEY = 'user-stored-configurations';\n\n  constructor(\n    protected table: OTableComponent\n  ) { }\n\n  getDataToStore() {\n    let dataToStore = {\n      'filter': this.table.oTableQuickFilterComponent ? this.table.oTableQuickFilterComponent.value : ''\n    };\n\n    const properties = ['sort', 'columns-display', 'columns-filter', 'quick-filter', 'page', 'selection', 'initial-configuration'];\n\n    Object.assign(dataToStore, this.getTablePropertiesToStore(properties));\n\n    const storedFiltersArr = this.getStoredFilters();\n    if (storedFiltersArr.length > 0) {\n      dataToStore[OTableStorage.USER_STORED_FILTERS_KEY] = storedFiltersArr;\n    }\n    const storedConfigurationsArr = this.getStoredConfigurations();\n    if (storedConfigurationsArr.length > 0) {\n      dataToStore[OTableStorage.STORED_CONFIGURATIONS_KEY] = storedConfigurationsArr;\n    }\n\n    return dataToStore;\n  }\n\n  getTablePropertiesToStore(properties: string[]) {\n    let result = {};\n    properties.forEach(prop => {\n      Object.assign(result, this.getTablePropertyToStore(prop));\n    });\n    return result;\n  }\n\n  getTablePropertyToStore(property: string) {\n    let result = {};\n    switch (property) {\n      case 'sort':\n        result = this.getSortState();\n        break;\n      case 'columns-display':\n        result = this.getColumnsDisplayState();\n        break;\n      case 'quick-filter':\n        result = this.getColumnsQuickFilterState();\n        break;\n      case 'columns-filter':\n        result = this.getColumnFiltersState();\n        break;\n      case 'page':\n        result = this.getPageState();\n        break;\n      case 'selection':\n        result = this.getSelectionState();\n        break;\n      case 'initial-configuration':\n        result = this.getInitialConfigurationState();\n        break;\n    }\n    return result;\n  }\n\n  reset() {\n    let state = {};\n    state[OTableStorage.USER_STORED_FILTERS_KEY] = this.table.state[OTableStorage.USER_STORED_FILTERS_KEY];\n    state[OTableStorage.STORED_CONFIGURATIONS_KEY] = this.table.state[OTableStorage.STORED_CONFIGURATIONS_KEY];\n    if (this.table.pageable) {\n      state['totalQueryRecordsNumber'] = this.table.state.totalQueryRecordsNumber;\n    }\n    state['currentPage'] = 0;\n    this.table.state = state;\n  }\n\n  protected getSortState() {\n    let result = {};\n    let sortColumnsArray = this.table.sort.getSortColumns();\n    if (sortColumnsArray.length > 0) {\n      let sortColumns = [];\n      sortColumnsArray.forEach(sortData => {\n        sortColumns.push(sortData.id + Codes.COLUMNS_ALIAS_SEPARATOR + sortData.direction);\n      });\n      result['sort-columns'] = sortColumns.join(Codes.ARRAY_INPUT_SEPARATOR);\n    }\n    return result;\n  }\n\n  protected getColumnFiltersState() {\n    let result = {};\n    if (this.table.oTableColumnsFilterComponent) {\n      const columnValueFilters = this.table.dataSource.getColumnValueFilters();\n      if (columnValueFilters.length > 0) {\n        result['column-value-filters'] = columnValueFilters;\n      }\n    }\n    return result;\n  }\n\n  protected getColumnsDisplayState() {\n    let result = {};\n    let oColumnsData = [];\n    this.table.oTableOptions.columns.forEach((oCol: OColumn) => {\n      oColumnsData.push({\n        attr: oCol.attr,\n        visible: oCol.visible,\n        width: oCol.getWidthToStore()\n      });\n    });\n    result['oColumns-display'] = oColumnsData;\n    result['select-column-visible'] = this.table.oTableOptions.selectColumn.visible;\n    return result;\n  }\n\n  protected getColumnsQuickFilterState() {\n    let result = {};\n    const tableOptions = this.table.oTableOptions;\n    let oColumnsData = [];\n    tableOptions.columns.forEach((oCol: OColumn) => {\n      oColumnsData.push({\n        attr: oCol.attr,\n        searchable: oCol.searchable,\n        searching: oCol.searching\n      });\n    });\n    result['oColumns'] = oColumnsData;\n    result['filter-case-sensitive'] = tableOptions.filterCaseSensitive;\n    return result;\n  }\n\n  protected getPageState(): any {\n    let result: any = {\n      'query-rows': this.table.matpaginator ? this.table.matpaginator.pageSize : ''\n    };\n    if (this.table.currentPage > 0 && this.table.storePaginationState) {\n      result['currentPage'] = this.table.currentPage;\n    }\n    if (this.table.pageable && this.table.storePaginationState) {\n      const state = this.table.state;\n      result['totalQueryRecordsNumber'] = state.totalQueryRecordsNumber;\n      result['queryRecordOffset'] = Math.max(\n        (state.queryRecordOffset - this.table.dataSource.renderedData.length),\n        (state.queryRecordOffset - this.table.queryRows)\n      );\n    }\n    return result;\n  }\n\n  protected getSelectionState(): any {\n    let result: any = {\n      'selection': []\n    };\n    if (this.table && this.table.keepSelectedItems) {\n      // storing selected items keys values\n      const selection = [];\n      this.table.getSelectedItems().forEach(item => {\n        let data = {};\n        this.table.getKeys().forEach(key => {\n          data[key] = item[key];\n        });\n        selection.push(data);\n      });\n      result.selection = selection;\n    }\n    return result;\n  }\n\n  protected getInitialConfigurationState(): any {\n    let result = {};\n    let initialConfiguration = {};\n\n    let oColumnsData = [];\n    const self = this;\n    Util.parseArray(this.table.originalVisibleColumns, true).forEach((x: string) => {\n      let oCol = self.table.getOColumn(x);\n      oColumnsData.push({\n        attr: oCol.attr,\n        visible: true,\n        width: oCol.definition ? oCol.definition.originalWidth : undefined\n      });\n    });\n\n    initialConfiguration['oColumns-display'] = oColumnsData;\n    initialConfiguration['sort-columns'] = this.table.originalSortColumns;\n    initialConfiguration['select-column-visible'] = this.table.oTableOptions.selectColumn.visible;\n    initialConfiguration['filter-case-sensitive'] = this.table.filterCaseSensitive;\n    initialConfiguration['query-rows'] = this.table.originalQueryRows;\n\n    result['initial-configuration'] = initialConfiguration;\n\n    return result;\n  }\n\n  setStoredFilters(filters: Array<ITableFiltersStatus>) {\n    return this.table.state[OTableStorage.USER_STORED_FILTERS_KEY] = filters;\n  }\n\n  getStoredFilters() {\n    return this.table.state[OTableStorage.USER_STORED_FILTERS_KEY] || [];\n  }\n\n  getStoredFilter(filterName: string) {\n    return this.getStoredFilters().find((item: ITableFiltersStatus) => item.name === filterName);\n  }\n\n  getStoredFilterConf(filterName: string) {\n    return (this.getStoredFilter(filterName) || {})[OTableStorage.STORED_FILTER_KEY];\n  }\n\n  deleteStoredFilter(filterName: string) {\n    const storedFilters = this.table.state[OTableStorage.USER_STORED_FILTERS_KEY] || [];\n    let index = storedFilters.findIndex((item: ITableFiltersStatus) => item.name === filterName);\n    if (index >= 0) {\n      storedFilters.splice(index, 1);\n      this.table.state[OTableStorage.USER_STORED_FILTERS_KEY] = storedFilters;\n    }\n  }\n\n  storeFilter(filterArgs: ITableFiltersStatus) {\n    let result = {};\n    let storedFilter = {};\n    Object.assign(storedFilter, this.getColumnFiltersState());\n    Object.assign(storedFilter, this.getColumnsQuickFilterState());\n\n    result[OTableStorage.STORED_FILTER_KEY] = storedFilter;\n    Object.assign(result, filterArgs);\n    let existingFilters = this.getStoredFilters();\n    existingFilters.push(result);\n    this.table.state[OTableStorage.USER_STORED_FILTERS_KEY] = existingFilters;\n  }\n\n  getStoredColumnsFilters(arg?: any) {\n    let stateObj = arg || this.table.state;\n    return stateObj['column-value-filters'] || [];\n  }\n\n  getStoredConfigurations() {\n    return this.table.state[OTableStorage.STORED_CONFIGURATIONS_KEY] || [];\n  }\n\n  getStoredConfiguration(configurationName: string) {\n    return this.getStoredConfigurations().find((item: ITableConfiguration) => item.name === configurationName);\n  }\n\n  storeConfiguration(configurationAgs: ITableConfiguration, tableProperties: any[]) {\n    let result = {};\n    this.table.storePaginationState = true;\n    let storedConfiguration = this.getTablePropertiesToStore(tableProperties);\n    this.table.storePaginationState = false;\n\n    result[OTableStorage.STORED_CONFIGURATION_KEY] = storedConfiguration;\n    Object.assign(result, configurationAgs);\n    result[OTableStorage.STORED_PROPERTIES_KEY] = tableProperties;\n    let existingConfigurations = this.getStoredConfigurations();\n    existingConfigurations.push(result);\n    this.table.state[OTableStorage.STORED_CONFIGURATIONS_KEY] = existingConfigurations;\n  }\n\n  deleteStoredConfiguration(configurationName: string) {\n    const storedConfigurations = this.getStoredConfigurations();\n    let index = storedConfigurations.findIndex((item: ITableConfiguration) => item.name === configurationName);\n    if (index >= 0) {\n      storedConfigurations.splice(index, 1);\n      this.table.state[OTableStorage.STORED_CONFIGURATIONS_KEY] = storedConfigurations;\n    }\n  }\n\n}\n"]}