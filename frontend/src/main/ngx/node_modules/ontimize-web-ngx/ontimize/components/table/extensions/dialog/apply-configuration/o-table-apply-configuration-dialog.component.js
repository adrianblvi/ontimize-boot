import { SelectionModel } from '@angular/cdk/collections';
import { Component, EventEmitter, Inject, Injector, ViewChild } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialogRef, MatSelectionList } from '@angular/material';
import { DialogService } from '../../../../../services';
var OTableApplyConfigurationDialogComponent = (function () {
    function OTableApplyConfigurationDialogComponent(dialogRef, data, injector) {
        this.dialogRef = dialogRef;
        this.injector = injector;
        this.default_configuration = 'OTableApplyConfigurationDialogComponent-default';
        this.configurations = [];
        this.onDelete = new EventEmitter();
        this.loadConfigurations(data);
        this.dialogService = this.injector.get(DialogService);
    }
    OTableApplyConfigurationDialogComponent.prototype.ngOnInit = function () {
        this.configurationList.selectedOptions = new SelectionModel(false);
    };
    OTableApplyConfigurationDialogComponent.prototype.loadConfigurations = function (configurations) {
        this.configurations = configurations;
    };
    OTableApplyConfigurationDialogComponent.prototype.removeConfiguration = function (configurationName) {
        var _this = this;
        this.dialogService.confirm('CONFIRM', 'TABLE.DIALOG.CONFIRM_REMOVE_CONFIGURATION').then(function (result) {
            if (result) {
                _this.onDelete.emit(configurationName);
            }
        });
    };
    OTableApplyConfigurationDialogComponent.prototype.isDefaultConfigurationSelected = function () {
        var selected = this.configurationList.selectedOptions.selected;
        var selectedValue = selected.length ? selected[0].value : void 0;
        return selectedValue === this.default_configuration;
    };
    OTableApplyConfigurationDialogComponent.prototype.getSelectedConfigurationName = function () {
        var selected = this.configurationList.selectedOptions.selected;
        return selected.length ? selected[0].value : void 0;
    };
    OTableApplyConfigurationDialogComponent.decorators = [
        { type: Component, args: [{
                    moduleId: module.id,
                    selector: 'o-table-apply-configuration-dialog',
                    template: "\n    <span mat-dialog-title>{{ 'TABLE.BUTTONS.APPLY_CONFIGURATION' | oTranslate }}</span>\n\n    <mat-dialog-content fxLayout=\"column\">\n      <div mat-subheader>{{ 'TABLE.DIALOG.APPLY_CONFIGURATION' | oTranslate }}</div>\n      <mat-selection-list #configurationList dense class=\"o-table-apply-configuration-dialog-list\">\n        <mat-list-option checkboxPosition=\"before\" [value]=\"default_configuration\">\n          <span matLine class=\"o-table-apply-configuration-dialog-list-title\">{{ 'TABLE.DIALOG.APPLY_CONFIGURATION_DEFAULT' | oTranslate }}</span>\n          <span matLine>{{ 'TABLE.DIALOG.APPLY_CONFIGURATION_DEFAULT_DESCRIPTION' | oTranslate }}</span>\n        </mat-list-option>\n        <mat-list-option checkboxPosition=\"before\" *ngFor=\"let configuration of configurations; let i = index\" [value]=\"configuration.name\">\n          <span matLine>{{ configuration.name }}</span>\n          <span matLine>{{ configuration.description }}</span>\n        </mat-list-option>\n      </mat-selection-list>\n    </mat-dialog-content>\n\n    <mat-dialog-actions align=\"end\">\n      <button type=\"button\" mat-stroked-button [disabled]=\"configurationList.selectedOptions.selected.length!==1 || isDefaultConfigurationSelected()\"\n        (click)=\"removeConfiguration(configurationList.selectedOptions.selected[0].value)\">\n        {{ 'DELETE' | oTranslate | uppercase }}\n      </button>\n      <span fxFlex></span>\n      <button type=\"button\" mat-stroked-button class=\"mat-primary\" [mat-dialog-close]=\"false\">{{ 'CANCEL' | oTranslate | uppercase }}</button>\n      <button type=\"button\" mat-stroked-button class=\"mat-primary\" [mat-dialog-close]=\"true\"\n        [disabled]=\"configurationList.selectedOptions.selected.length!==1\">{{ 'OK' | oTranslate | uppercase }}</button>\n    </mat-dialog-actions>\n  ",
                    styles: ["\n\n  "]
                },] },
    ];
    OTableApplyConfigurationDialogComponent.ctorParameters = function () { return [
        { type: MatDialogRef },
        { type: Array, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] },
        { type: Injector }
    ]; };
    OTableApplyConfigurationDialogComponent.propDecorators = {
        configurationList: [{ type: ViewChild, args: [MatSelectionList,] }]
    };
    return OTableApplyConfigurationDialogComponent;
}());
export { OTableApplyConfigurationDialogComponent };
//# sourceMappingURL=o-table-apply-configuration-dialog.component.js.map