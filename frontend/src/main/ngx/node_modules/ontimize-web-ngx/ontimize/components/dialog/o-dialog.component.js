import { Component, NgModule, ViewEncapsulation } from '@angular/core';
import { CommonModule } from '@angular/common';
import { MatDialogRef } from '@angular/material';
import { OTranslateModule } from '../../pipes/o-translate.pipe';
import { OSharedModule } from '../../shared';
var ODialogComponent = (function () {
    function ODialogComponent(dialogRef) {
        this.dialogRef = dialogRef;
    }
    ODialogComponent.prototype.onOkClick = function (evt) {
        if (this.dialogRef) {
            this.dialogRef.close(true);
        }
    };
    ODialogComponent.prototype.alert = function (title, message, config) {
        config = this.ensureConfig(config);
        this.configureDefaultAlert(title, message, config);
    };
    ODialogComponent.prototype.info = function (title, message, config) {
        config = this.ensureConfig(config);
        config.alertType = 'info';
        if (typeof (config.icon) === 'undefined') {
            config.icon = 'info';
        }
        this.configureDefaultAlert(title, message, config);
    };
    ODialogComponent.prototype.warn = function (title, message, config) {
        config = this.ensureConfig(config);
        config.alertType = 'warn';
        if (typeof (config.icon) === 'undefined') {
            config.icon = 'warning';
        }
        this.configureDefaultAlert(title, message, config);
    };
    ODialogComponent.prototype.error = function (title, message, config) {
        config = this.ensureConfig(config);
        config.alertType = 'error';
        if (typeof (config.icon) === 'undefined') {
            config.icon = 'error';
        }
        this.configureDefaultAlert(title, message, config);
    };
    ODialogComponent.prototype.confirm = function (title, message, config) {
        config = this.ensureConfig(config);
        this.configureDefaultAlert(title, message, config);
        this.twoOptions = true;
    };
    ODialogComponent.prototype.ensureConfig = function (config) {
        if (!config) {
            config = {};
        }
        return config;
    };
    ODialogComponent.prototype.configureDefaultAlert = function (title, message, config) {
        this.twoOptions = false;
        this.title = title;
        this.message = message;
        this.icon = (typeof (config.icon) !== 'undefined') ? config.icon : undefined;
        if (this.icon !== undefined) {
            this.useIcon = true;
        }
        this.alertType = config.alertType;
        this.okButtonText = (typeof (config.okButtonText) !== 'undefined') ? config.okButtonText : ODialogComponent.DEFAULT_OK_BUTTON_TEXT;
        this.cancelButtonText = (typeof (config.cancelButtonText) !== 'undefined') ? config.cancelButtonText : ODialogComponent.DEFAULT_CANCEL_BUTTON_TEXT;
    };
    Object.defineProperty(ODialogComponent.prototype, "isInfo", {
        get: function () {
            return this.alertType === 'info';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ODialogComponent.prototype, "isWarn", {
        get: function () {
            return this.alertType === 'warn';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ODialogComponent.prototype, "isError", {
        get: function () {
            return this.alertType === 'error';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ODialogComponent.prototype, "title", {
        get: function () {
            return this._title;
        },
        set: function (val) {
            this._title = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ODialogComponent.prototype, "message", {
        get: function () {
            return this._message;
        },
        set: function (val) {
            this._message = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ODialogComponent.prototype, "okButtonText", {
        get: function () {
            return this._okButtonText;
        },
        set: function (val) {
            this._okButtonText = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ODialogComponent.prototype, "cancelButtonText", {
        get: function () {
            return this._cancelButtonText;
        },
        set: function (val) {
            this._cancelButtonText = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ODialogComponent.prototype, "icon", {
        get: function () {
            return this._icon;
        },
        set: function (val) {
            this._icon = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ODialogComponent.prototype, "alertType", {
        get: function () {
            return this._alertType;
        },
        set: function (val) {
            this._alertType = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ODialogComponent.prototype, "twoOptions", {
        get: function () {
            return this._twoOptions;
        },
        set: function (val) {
            this._twoOptions = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ODialogComponent.prototype, "useIcon", {
        get: function () {
            return this._useIcon;
        },
        set: function (val) {
            this._useIcon = val;
        },
        enumerable: true,
        configurable: true
    });
    ODialogComponent.DEFAULT_OK_BUTTON_TEXT = 'OK';
    ODialogComponent.DEFAULT_CANCEL_BUTTON_TEXT = 'CANCEL';
    ODialogComponent.decorators = [
        { type: Component, args: [{
                    moduleId: module.id,
                    selector: 'o-dialog',
                    template: "\n    <div *ngIf=\"title && title.length > 0\" mat-dialog-title>{{ title | oTranslate }}</div>\n    <div mat-dialog-content>\n      <div fxLayout=\"row\" class=\"alert-content\" [class.alert-content-icon]=\"useIcon\" fxLayoutAlign=\"space-between center\">\n        <mat-icon *ngIf=\"useIcon\" class=\"alert-icon\" [class.info]=\"isInfo\" [class.warn]=\"isWarn\" [class.error]=\"isError\">\n          {{ icon }}\n        </mat-icon>\n        <span [innerHTML]=\"message | oTranslate\"></span>\n      </div>\n    </div>\n    <mat-dialog-actions align=\"end\">\n      <span fxFlex></span>\n      <button type=\"button\" *ngIf=\"twoOptions\" mat-stroked-button class=\"mat-primary\"\n        mat-dialog-close>{{ cancelButtonText | oTranslate | uppercase }}</button>\n      <button type=\"button\" mat-stroked-button class=\"mat-primary\"\n        (click)=\"onOkClick($event)\">{{ okButtonText | oTranslate | uppercase }}</button>\n    </mat-dialog-actions>\n  ",
                    styles: ["\n    .o-dialog{cursor:default}.o-dialog .alert-content{box-sizing:border-box;flex:1 1 100%;display:flex;flex-direction:row;place-content:center space-between;align-items:center;padding:12px 0}.o-dialog .alert-content-icon{min-height:70px}.o-dialog .alert-icon{font-size:50px;margin-right:16px;min-height:50px;min-width:50px}\n  "],
                    encapsulation: ViewEncapsulation.None,
                    host: {
                        '[class.o-dialog]': 'true'
                    }
                },] },
    ];
    ODialogComponent.ctorParameters = function () { return [
        { type: MatDialogRef }
    ]; };
    return ODialogComponent;
}());
export { ODialogComponent };
var ODialogModule = (function () {
    function ODialogModule() {
    }
    ODialogModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [ODialogComponent],
                    imports: [CommonModule, OSharedModule, OTranslateModule],
                    exports: [ODialogComponent, CommonModule]
                },] },
    ];
    return ODialogModule;
}());
export { ODialogModule };
export * from './o-dialog.config';
//# sourceMappingURL=o-dialog.component.js.map