var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { CommonModule } from '@angular/common';
import { Component, ElementRef, forwardRef, HostBinding, Inject, Injector, NgModule, Optional, ViewChild, ViewEncapsulation } from '@angular/core';
import { FormControl, FormGroup } from '@angular/forms';
import { MatDialog } from '@angular/material';
import { DomSanitizer } from '@angular/platform-browser';
import { InputConverter } from '../../decorators';
import { OSharedModule } from '../../shared';
import { Util } from '../../util/util';
import { OFormComponent } from '../form/o-form.component';
import { OFormValue } from '../form/OFormValue';
import { DEFAULT_INPUTS_O_FORM_DATA_COMPONENT, DEFAULT_OUTPUTS_O_FORM_DATA_COMPONENT, OFormDataComponent } from '../o-form-data-component.class';
import { OFullScreenDialogComponent } from './fullscreen/fullscreen-dialog.component';
export var DEFAULT_INPUTS_O_IMAGE = DEFAULT_INPUTS_O_FORM_DATA_COMPONENT.concat([
    'emptyimage: empty-image',
    'emptyicon: empty-icon',
    'showControls: show-controls',
    'height',
    'autoFit: auto-fit',
    'fullScreenButton: full-screen-button',
    'acceptFileType: accept-file-type'
]);
export var DEFAULT_OUTPUTS_O_IMAGE = DEFAULT_OUTPUTS_O_FORM_DATA_COMPONENT.slice();
var OImageComponent = (function (_super) {
    __extends(OImageComponent, _super);
    function OImageComponent(form, elRef, injector) {
        var _this = _super.call(this, form, elRef, injector) || this;
        _this.acceptFileType = 'image/*';
        _this.autoFit = true;
        _this.currentFileName = '';
        _this.showControls = true;
        _this._fullScreenButton = false;
        _this._useEmptyIcon = true;
        _this._useEmptyImage = false;
        _this._domSanitizer = _this.injector.get(DomSanitizer);
        _this._defaultSQLTypeKey = 'BASE64';
        _this.dialog = _this.injector.get(MatDialog);
        _this.stateCtrl = new FormControl();
        return _this;
    }
    Object.defineProperty(OImageComponent.prototype, "fullScreenButton", {
        get: function () {
            return this._fullScreenButton;
        },
        set: function (val) {
            val = Util.parseBoolean(String(val));
            this._fullScreenButton = val;
        },
        enumerable: true,
        configurable: true
    });
    OImageComponent.prototype.ngOnInit = function () {
        _super.prototype.ngOnInit.call(this);
        if (this.emptyimage && this.emptyimage.length > 0) {
            this._useEmptyIcon = false;
            this._useEmptyImage = true;
        }
        if (this.emptyicon === undefined && !this._useEmptyImage) {
            this.emptyicon = 'photo';
            this._useEmptyIcon = true;
            this._useEmptyImage = false;
        }
    };
    OImageComponent.prototype.ngOnDestroy = function () {
        _super.prototype.ngOnDestroy.call(this);
    };
    OImageComponent.prototype.ensureOFormValue = function (val) {
        if (val instanceof OFormValue) {
            if (val.value && val.value.bytes !== undefined) {
                this.value = new OFormValue(val.value.bytes);
                return;
            }
            this.value = new OFormValue(val.value);
        }
        else if (val && !(val instanceof OFormValue)) {
            if (val.bytes !== undefined) {
                val = val.bytes;
            }
            else if (val.length > 300 && val.substring(0, 4) === 'data') {
                val = val.substring(val.indexOf('base64') + 7);
            }
            this.value = new OFormValue(val);
        }
        else {
            this.value = new OFormValue(undefined);
        }
    };
    OImageComponent.prototype.isEmpty = function () {
        return !this.getValue() || this.getValue().length === 0;
    };
    OImageComponent.prototype.createFormControl = function () {
        this._fControl = _super.prototype.createFormControl.call(this);
        this._fControl.fControlChildren = [this.stateCtrl];
        return this._fControl;
    };
    OImageComponent.prototype.fileChange = function (input) {
        if (input.files[0]) {
            var reader = new FileReader();
            var self_1 = this;
            reader.addEventListener('load', function (event) {
                var result = event.target['result'];
                if (result && result.length > 300 && result.substring(0, 4) === 'data') {
                    result = result.substring(result.indexOf('base64') + 7);
                }
                self_1.setValue(result);
                if (self_1._fControl) {
                    self_1._fControl.markAsTouched();
                }
                event.stopPropagation();
            }, false);
            if (input.files[0]) {
                reader.readAsDataURL(input.files[0]);
            }
            this.currentFileName = input.files[0].name;
            this.stateCtrl.setValue(this.currentFileName);
        }
    };
    OImageComponent.prototype.getSrcValue = function () {
        if (this.value && this.value.value) {
            if (this.value.value instanceof Object && this.value.value.bytes) {
                var src = '';
                if (this.value.value.bytes.substring(0, 4) === 'data') {
                    src = 'data:image/*;base64,' + this.value.value.bytes.substring(this.value.value.bytes.indexOf('base64') + 7);
                }
                else {
                    src = 'data:image/*;base64,' + this.value.value.bytes;
                }
                return this._domSanitizer.bypassSecurityTrustUrl(src);
            }
            else if (typeof this.value.value === 'string' &&
                this.value.value.length > 300) {
                var src = '';
                if (this.value.value.substring(0, 4) === 'data') {
                    src = 'data:image/*;base64,' + this.value.value.substring(this.value.value.indexOf('base64') + 7);
                }
                else {
                    src = 'data:image/*;base64,' + this.value.value;
                }
                return this._domSanitizer.bypassSecurityTrustUrl(src);
            }
            return this.value.value ? this.value.value : this.emptyimage;
        }
        else if (this.emptyimage) {
            return this.emptyimage;
        }
    };
    OImageComponent.prototype.onClickBlocker = function (evt) {
        evt.stopPropagation();
    };
    OImageComponent.prototype.onClickClearValue = function (e) {
        if (!this.isReadOnly && this.enabled) {
            _super.prototype.onClickClearValue.call(this, e);
            this.fileInput.nativeElement.value = '';
            this.stateCtrl.reset();
            this.currentFileName = '';
        }
        if (this._fControl) {
            this._fControl.markAsTouched();
        }
    };
    OImageComponent.prototype.hasControls = function () {
        return this.showControls;
    };
    OImageComponent.prototype.useEmptyIcon = function () {
        return this._useEmptyIcon && this.isEmpty();
    };
    OImageComponent.prototype.useEmptyImage = function () {
        return this._useEmptyImage && this.isEmpty();
    };
    OImageComponent.prototype.getFormGroup = function () {
        var formGroup = _super.prototype.getFormGroup.call(this);
        if (!formGroup) {
            formGroup = new FormGroup({});
            formGroup.addControl(this.getAttribute(), this.getControl());
        }
        return formGroup;
    };
    Object.defineProperty(OImageComponent.prototype, "hostHeight", {
        get: function () {
            return this.height;
        },
        enumerable: true,
        configurable: true
    });
    OImageComponent.prototype.openFullScreen = function (e) {
        this.dialog.open(OFullScreenDialogComponent, {
            width: '90%',
            height: '90%',
            role: 'dialog',
            disableClose: false,
            panelClass: 'o-image-fullscreen-dialog-cdk-overlay',
            data: this.getSrcValue()
        });
    };
    OImageComponent.prototype.openFileSelector = function (e) {
        if (Util.isDefined(this.fileInput)) {
            this.fileInput.nativeElement.click();
        }
    };
    OImageComponent.prototype.internalFormControl = function () {
        return this.getAttribute() + '_value';
    };
    OImageComponent.DEFAULT_INPUTS_O_IMAGE = DEFAULT_INPUTS_O_IMAGE;
    OImageComponent.DEFAULT_OUTPUTS_O_IMAGE = DEFAULT_OUTPUTS_O_IMAGE;
    OImageComponent.decorators = [
        { type: Component, args: [{
                    moduleId: module.id,
                    selector: 'o-image',
                    template: "\n    <div fxLayout=\"column\" [formGroup]=\"getFormGroup()\" [matTooltip]=\"tooltip\" [matTooltipPosition]=\"tooltipPosition\"\n      [matTooltipShowDelay]=\"tooltipShowDelay\" [matTooltipHideDelay]=\"tooltipHideDelay\" [class.o-image-auto-fit]=\"autoFit\"\n      class=\"o-image-content\" fxFill>\n\n      <mat-form-field *ngIf=\"hasControls()\" class=\"o-image-form-field\">\n        <input matInput readonly (click)=\"input.click()\" [placeholder]=\"olabel | oTranslate\" [required]=\"isRequired\" [formControl]=\"stateCtrl\" />\n        <input matInput [formControlName]=\"getAttribute()\" type=\"text\" [id]=\"getAttribute()\" class=\"o-image-form-field-input\" [required]=\"isRequired\" />\n        <input #input type=\"file\" [disabled]=\"!enabled\" [accept]=\"acceptFileType ? acceptFileType.replace(';',',') : 'image/*'\" (change)=\"fileChange(input)\"\n          class=\"o-image-form-field-hidden\" fxFlex />\n\n        <button type=\"button\" *ngIf=\"fullScreenButton\" [disabled]=\"!enabled\" matSuffix mat-icon-button\n          (click)=\"openFullScreen($event)\">\n          <mat-icon svgIcon=\"ontimize:fullscreen\"></mat-icon>\n        </button>\n        <button type=\"button\" [disabled]=\"!enabled\" matSuffix mat-icon-button (click)=\"input.click()\">\n          <mat-icon svgIcon=\"ontimize:folder_open\"></mat-icon>\n        </button>\n        <button type=\"button\" [disabled]=\"!enabled\" matSuffix mat-icon-button (click)=\"onClickClearValue($event)\">\n          <mat-icon svgIcon=\"ontimize:close\"></mat-icon>\n        </button>\n        <mat-error *ngIf=\"hasError('required')\">{{ 'FORM_VALIDATION.REQUIRED' | oTranslate }}</mat-error>\n      </mat-form-field>\n\n      <div fxLayout=\"column\" fxLayoutAlign=\"center center\" fxFlex=\"grow\" class=\"o-image-display-container\">\n        <img *ngIf=\"!(isEmpty())\" [src]=\"getSrcValue()\" alt=\"\" (click)=\"openFileSelector()\" />\n        <mat-icon class=\"empty-icon\" [class.mat-disabled]=\"!enabled\" aria-label=\"empty image\" *ngIf=\"useEmptyIcon()\" (click)=\"openFileSelector()\">\n          {{ emptyicon }}</mat-icon>\n        <img [src]=\"getSrcValue()\" alt=\"empty image\" *ngIf=\"useEmptyImage()\" (click)=\"openFileSelector()\" />\n      </div>\n      <div *ngIf=\"isReadOnly\" fxFill class=\"read-only-blocker\" (click)=\"onClickBlocker($event)\"></div>\n    </div>\n  ",
                    styles: ["\n    .o-image{display:flex;height:inherit}.o-image .o-image-content{position:relative;width:100%}.o-image .o-image-content .o-image-form-field{width:100%}.o-image .o-image-content .o-image-form-field .o-image-form-field-hidden{display:none !important}.o-image .o-image-content .o-image-form-field .o-image-form-field-input{opacity:0;outline:none;width:0}.o-image .o-image-content .o-image-display-container{width:100%}.o-image .o-image-content .o-image-display-container>img{height:100%;width:100%}.o-image .o-image-content.o-image-auto-fit .o-image-display-container>img{height:auto;max-height:100%;max-width:100%;object-fit:contain;width:auto}.o-image .o-image-content .read-only-blocker{left:0;right:0;position:absolute;top:0;z-index:2}\n  "],
                    inputs: DEFAULT_INPUTS_O_IMAGE,
                    outputs: DEFAULT_OUTPUTS_O_IMAGE,
                    encapsulation: ViewEncapsulation.None,
                    host: {
                        '[class.o-image]': 'true'
                    }
                },] },
    ];
    OImageComponent.ctorParameters = function () { return [
        { type: OFormComponent, decorators: [{ type: Optional }, { type: Inject, args: [forwardRef(function () { return OFormComponent; }),] }] },
        { type: ElementRef },
        { type: Injector }
    ]; };
    OImageComponent.propDecorators = {
        fileInput: [{ type: ViewChild, args: ['input',] }],
        hostHeight: [{ type: HostBinding, args: ['style.height',] }]
    };
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OImageComponent.prototype, "autoFit", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OImageComponent.prototype, "showControls", void 0);
    return OImageComponent;
}(OFormDataComponent));
export { OImageComponent };
var OImageModule = (function () {
    function OImageModule() {
    }
    OImageModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [OImageComponent, OFullScreenDialogComponent],
                    imports: [CommonModule, OSharedModule],
                    exports: [OImageComponent, OFullScreenDialogComponent],
                    entryComponents: [OFullScreenDialogComponent]
                },] },
    ];
    return OImageModule;
}());
export { OImageModule };
//# sourceMappingURL=o-image.component.js.map