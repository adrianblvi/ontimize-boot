var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, EventEmitter, forwardRef, Inject, Injector, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Subscription } from 'rxjs';
import { debounceTime } from 'rxjs/operators';
import { Codes, Util } from '../../utils';
import { OSharedModule } from '../../shared';
import { InputConverter } from '../../decorators';
import { OFilterBuilderClearDirective } from './o-filter-builder-clear.directive';
import { OFilterBuilderQueryDirective } from './o-filter-builder-query.directive';
import { OFormComponent } from '../../components';
import { FilterExpressionUtils } from '../filter-expression.utils';
export var DEFAULT_INPUTS_O_FILTER_BUILDER = [
    'filters',
    'targetCmp: target',
    'expressionBuilder: expression-builder',
    'queryOnChange: query-on-change',
    'queryOnChangeDelay: query-on-change-delay'
];
export var DEFAULT_OUTPUTS_O_FILTER_BUILDER = [
    'onFilter',
    'onClear'
];
var OFilterBuilderComponent = (function () {
    function OFilterBuilderComponent(form, injector) {
        this.form = form;
        this.onFilter = new EventEmitter();
        this.onClear = new EventEmitter();
        this.queryOnChange = false;
        this.queryOnChangeDelay = 0;
        this.filterComponents = [];
        this.subscriptions = new Subscription();
    }
    OFilterBuilderComponent.prototype.ngOnInit = function () {
        this.initialize();
    };
    OFilterBuilderComponent.prototype.ngAfterViewInit = function () {
        this.initializeListeners();
    };
    OFilterBuilderComponent.prototype.ngOnDestroy = function () {
        if (this.subscriptions) {
            this.subscriptions.unsubscribe();
        }
    };
    OFilterBuilderComponent.prototype.initialize = function () {
        var _this = this;
        if (this.filters) {
            var filterArray = Util.parseArray(this.filters);
            filterArray.forEach(function (filter) {
                var filterElms = filter.split(Codes.COLUMNS_ALIAS_SEPARATOR);
                _this.filterComponents.push({
                    targetAttr: filterElms[0],
                    formComponentAttr: filterElms[1] ? filterElms[1] : filterElms[0]
                });
            });
        }
        if (Util.isDefined(this.targetCmp)) {
            this.targetCmp.setFilterBuilder(this);
        }
    };
    OFilterBuilderComponent.prototype.initializeListeners = function () {
        var _this = this;
        if (this.queryOnChange) {
            this.filterComponents.forEach(function (filterComponent) {
                var formComponent = _this.form.getComponents()[filterComponent.formComponentAttr];
                if (formComponent) {
                    _this.subscriptions.add(formComponent.getFormControl().valueChanges
                        .pipe(debounceTime(_this.queryOnChangeDelay))
                        .subscribe(function (a) { return _this.triggerReload(); }));
                }
            });
        }
    };
    OFilterBuilderComponent.prototype.getExpression = function () {
        var formComponents = this.form.getComponents();
        var params = [];
        this.filterComponents.forEach(function (filterComponent) {
            var formComponent = formComponents[filterComponent.formComponentAttr];
            var value = formComponent.getValue();
            params.push({
                attr: filterComponent.targetAttr,
                value: value
            });
        });
        if (this.expressionBuilder) {
            return this.expressionBuilder(params);
        }
        var expressions = [];
        params.forEach(function (elem) {
            if (Util.isDefined(elem.value)) {
                expressions.push(FilterExpressionUtils.buildExpressionEquals(elem.attr, elem.value));
            }
        });
        return expressions.length ? expressions.reduce(function (fe1, fe2) { return FilterExpressionUtils.buildComplexExpression(fe1, fe2, FilterExpressionUtils.OP_OR); }) : undefined;
    };
    OFilterBuilderComponent.prototype.getBasicExpression = function () {
        return FilterExpressionUtils.buildBasicExpression(this.getExpression());
    };
    OFilterBuilderComponent.prototype.getTargetComponent = function () {
        return this.targetCmp;
    };
    OFilterBuilderComponent.prototype.triggerReload = function () {
        if (!this.targetCmp) {
            return;
        }
        if (this.targetCmp.pageable) {
            this.targetCmp.reloadPaginatedDataFromStart();
        }
        else {
            this.targetCmp.reloadData();
        }
        this.onFilter.emit();
    };
    OFilterBuilderComponent.prototype.clearFilter = function () {
        var formComponents = this.form.getComponents();
        this.getFilterAttrs().forEach(function (attr) {
            formComponents[attr].setValue(void 0);
        });
        this.onClear.emit();
    };
    OFilterBuilderComponent.prototype.getFilterAttrs = function () {
        return this.filterComponents.map(function (elem) { return elem.formComponentAttr; });
    };
    OFilterBuilderComponent.decorators = [
        { type: Component, args: [{
                    moduleId: module.id,
                    selector: 'o-filter-builder',
                    template: "\n\n  ",
                    inputs: DEFAULT_INPUTS_O_FILTER_BUILDER,
                    outputs: DEFAULT_OUTPUTS_O_FILTER_BUILDER
                },] },
    ];
    OFilterBuilderComponent.ctorParameters = function () { return [
        { type: OFormComponent, decorators: [{ type: Inject, args: [forwardRef(function () { return OFormComponent; }),] }] },
        { type: Injector }
    ]; };
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OFilterBuilderComponent.prototype, "queryOnChange", void 0);
    __decorate([
        InputConverter(),
        __metadata("design:type", Number)
    ], OFilterBuilderComponent.prototype, "queryOnChangeDelay", void 0);
    return OFilterBuilderComponent;
}());
export { OFilterBuilderComponent };
var OFilterBuilderModule = (function () {
    function OFilterBuilderModule() {
    }
    OFilterBuilderModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        OSharedModule,
                        CommonModule
                    ],
                    declarations: [
                        OFilterBuilderComponent,
                        OFilterBuilderClearDirective,
                        OFilterBuilderQueryDirective
                    ],
                    exports: [
                        OFilterBuilderComponent,
                        OFilterBuilderClearDirective,
                        OFilterBuilderQueryDirective
                    ]
                },] },
    ];
    return OFilterBuilderModule;
}());
export { OFilterBuilderModule };
//# sourceMappingURL=o-filter-builder.component.js.map