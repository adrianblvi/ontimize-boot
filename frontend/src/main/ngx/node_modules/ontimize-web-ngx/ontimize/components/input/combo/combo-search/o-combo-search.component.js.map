{"version":3,"file":"o-combo-search.component.js","sourceRoot":"","sources":["../../../../../../tmp/ontimize/components/input/combo/combo-search/o-combo-search.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { ChangeDetectorRef, Component, ElementRef, EventEmitter, forwardRef, Inject, OnDestroy, OnInit, QueryList, ViewChild } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatOption, MatSelect } from '@angular/material';\nimport { Subject } from 'rxjs';\nimport { take, takeUntil } from 'rxjs/operators';\n\n@Component({\n  selector: 'o-combo-search',\n  template: `\n    <input matInput class=\"o-combo-search-hidden\" />\n\n    <mat-form-field floatLabel=\"never\" class=\"o-combo-search-inner\">\n      <input matInput #searchSelectInput placeholder=\"{{ placeholder | oTranslate }}\" (keydown)=\"handleKeydown($event)\"\n        (input)=\"onInputChange($event.target.value)\" (blur)=\"onBlur($event.target.value)\" class=\"mat-select-search-input\" />\n      <button mat-icon-button matSuffix *ngIf=\"value\" (click)=\"reset(true)\" class=\"mat-select-search-clear\">\n        <mat-icon>close</mat-icon>\n      </button>\n    </mat-form-field>\n\n    <div *ngIf=\"value && _options?.length === 0\" fxLayoutAlign=\"center center\" class=\"o-combo-search-emmpty\">\n      <span>{{ 'INPUT.COMBO.EMPTY' | oTranslate }}</span>\n    </div>\n  `,\n  styles: [`\n    :host{display:flex;flex-direction:column;padding:0 16px}:host .o-combo-search-hidden{display:none}:host .o-combo-search-inner{height:3em;width:100%}:host .o-combo-search-emmpty{height:3em;line-height:3em}\n  `],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => OComboSearchComponent),\n      multi: true\n    }\n  ],\n  host: {\n    '[class.o-combo-search]': 'true'\n  }\n})\nexport class OComboSearchComponent implements OnInit, OnDestroy {\n\n  public placeholder: string = 'SEARCH';\n\n  /** Reference to the MatSelect options */\n  public _options: QueryList<MatOption>;\n\n  /** Current search value */\n  get value(): string {\n    return this._value;\n  }\n  protected _value: string;\n\n  /** Previously selected values when using <mat-select [multiple]=\"true\"> */\n  protected previousSelectedValues: any[];\n\n  /** Reference to the search input field */\n  @ViewChild('searchSelectInput', { read: ElementRef })\n  protected searchSelectInput: ElementRef;\n\n  /** Event that emits when the current value changes */\n  protected change = new EventEmitter<string>();\n\n  /** Subject that emits when the component has been destroyed. */\n  protected _onDestroy = new Subject<void>();\n\n  constructor(\n    @Inject(MatSelect) public matSelect: MatSelect,\n    private changeDetectorRef: ChangeDetectorRef\n  ) { }\n\n  public ngOnInit(): void {\n    // when the select dropdown panel is opened or closed, focus the search field when opening and clear it when closing\n    this.matSelect.openedChange\n      .pipe(takeUntil(this._onDestroy))\n      .subscribe(opened => opened ? this.focus() : this.reset());\n\n    // set the first item active after the options changed\n    this.matSelect.openedChange\n      .pipe(take(1))\n      .pipe(takeUntil(this._onDestroy))\n      .subscribe(() => {\n        if (this.matSelect.multiple) {\n          this.previousSelectedValues = this.matSelect.value;\n        }\n        this._options = this.matSelect.options;\n        this._options.changes\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => {\n            const keyManager = this.matSelect._keyManager;\n            if (keyManager && this.matSelect.panelOpen) {\n              // avoid \"expression has been changed\" error\n              setTimeout(() => keyManager.setFirstItemActive());\n            }\n          });\n      });\n\n    // detect changes when the input changes\n    this.change\n      .pipe(takeUntil(this._onDestroy))\n      .subscribe(() => this.changeDetectorRef.detectChanges());\n\n    this.initMultipleHandling();\n  }\n\n  public ngOnDestroy(): void {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  public onChange: Function = (_: any) => {\n    // do nothing\n  }\n\n  public onTouched: Function = (_: any) => {\n    // do nothing\n  }\n\n  /**\n   * Handles the key down event with MatSelect.\n   * Allows e.g. selecting with enter key, navigation with arrow keys, etc.\n   * @param event\n   */\n  public handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === 32) {\n      // do not propagate spaces to MatSelect, as this would select the currently active option\n      event.stopPropagation();\n    }\n  }\n\n  public onInputChange(value: any): void {\n    const valueChanged = value !== this._value;\n    if (valueChanged) {\n      this._value = value;\n      this.onChange(value);\n      this.change.emit(value);\n    }\n  }\n\n  public onBlur(value: string): void {\n    this.writeValue(value);\n    this.onTouched();\n  }\n\n  public writeValue(value: string): void {\n    const valueChanged = value !== this._value;\n    if (valueChanged) {\n      this._value = value;\n      this.change.emit(value);\n    }\n  }\n\n  public registerOnChange(fn: Function): void {\n    this.onChange = fn;\n  }\n\n  public registerOnTouched(fn: Function): void {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Focuses the search input field\n   */\n  public focus(): void {\n    if (!this.searchSelectInput) {\n      return;\n    }\n    // save and restore scrollTop of panel, since it will be reset by focus()\n    // note: this is hacky\n    const panel = this.matSelect.panel.nativeElement;\n    const scrollTop = panel.scrollTop;\n\n    // focus\n    this.searchSelectInput.nativeElement.focus();\n\n    panel.scrollTop = scrollTop;\n  }\n\n  /**\n   * Resets the current search value\n   * @param focus whether to focus after resetting\n   */\n  public reset(focus?: boolean): void {\n    if (!this.searchSelectInput) {\n      return;\n    }\n    this.searchSelectInput.nativeElement.value = '';\n    this.onInputChange('');\n    if (focus) {\n      this.focus();\n    }\n  }\n\n  /**\n   * Initializes handling <mat-select [multiple]=\"true\">\n   * Note: to improve this code, mat-select should be extended to allow disabling resetting the selection while filtering.\n   */\n  protected initMultipleHandling(): void {\n    // if <mat-select [multiple]=\"true\">\n    // store previously selected values and restore them when they are deselected\n    // because the option is not available while we are currently filtering\n    this.matSelect.valueChange\n      .pipe(takeUntil(this._onDestroy))\n      .subscribe(values => {\n        if (this.matSelect.multiple) {\n          let restoreSelectedValues = false;\n          if (this._value && this._value.length\n            && this.previousSelectedValues && Array.isArray(this.previousSelectedValues)) {\n            if (!values || !Array.isArray(values)) {\n              values = [];\n            }\n            const optionValues = this.matSelect.options.map(option => option.value);\n            this.previousSelectedValues.forEach(previousValue => {\n              if (values.indexOf(previousValue) === -1 && optionValues.indexOf(previousValue) === -1) {\n                // if a value that was selected before is deselected and not found in the options, it was deselected\n                // due to the filtering, so we restore it.\n                values.push(previousValue);\n                restoreSelectedValues = true;\n              }\n            });\n          }\n\n          if (restoreSelectedValues) {\n            this.matSelect._onChange(values);\n          }\n\n          this.previousSelectedValues = values;\n        }\n      });\n  }\n\n}\n"]}