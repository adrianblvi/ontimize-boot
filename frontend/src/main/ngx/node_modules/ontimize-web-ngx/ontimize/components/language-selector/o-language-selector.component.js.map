{"version":3,"file":"o-language-selector.component.js","sourceRoot":"","sources":["../../../../tmp/ontimize/components/language-selector/o-language-selector.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, Injector, EventEmitter, NgModule, ViewEncapsulation } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { OSharedModule } from '../../shared';\nimport { OTranslateService } from '../../services';\nimport { AppConfig } from '../../config/app-config';\nimport { InputConverter } from '../../decorators';\nimport LocaleCode from '../../util/locale';\n\nexport const DEFAULT_INPUTS_O_LANGUAGE_SELECTOR = [\n  'useFlagIcons: use-flag-icons'\n];\n\nexport const DEFAULT_OUTPUTS_LANGUAGE_SELECTOR = [\n  'onChange'\n];\n\n@Component({\n  moduleId: module.id,\n  selector: 'o-language-selector',\n  inputs: DEFAULT_INPUTS_O_LANGUAGE_SELECTOR,\n  outputs: DEFAULT_OUTPUTS_LANGUAGE_SELECTOR,\n  template: `\n    <div fxLayout fxLayoutAlign=\"center center\" fxFill>\n      <button type=\"button\" *ngIf=\"useFlagIcons\" class=\"menu-button\" mat-icon-button [matMenuTriggerFor]=\"langMenu\">\n        <span class=\"flag-icon {{ getFlagClass(getCurrentCountry()) }}\"></span>\n      </button>\n\n      <button type=\"button\" *ngIf=\"!useFlagIcons\" class=\"menu-button o-language-selector-text\" mat-button [matMenuTriggerFor]=\"langMenu\">\n        <span>{{ 'LOCALE_' + getCurrentLang() | oTranslate }}</span>\n      </button>\n    </div>\n\n    <mat-menu #langMenu=\"matMenu\" yPosition=\"below\">\n      <button type=\"button\" mat-menu-item *ngFor=\"let lang of getAvailableLangs()\" (click)=\"configureI18n(lang)\">\n        <span *ngIf=\"useFlagIcons\" class=\"flag-icon {{ getFlagClass(lang) }}\"></span>\n        <span>{{ 'LOCALE_' + lang | oTranslate }}</span>\n      </button>\n    </mat-menu>\n  `,\n  styles: [`\n    .o-language-selector .menu-button{margin-left:6px}.o-language-selector .menu-button.o-language-selector-text{padding:0;min-width:40px}\n  `],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    '[class.o-language-selector]': 'true'\n  }\n})\n\nexport class OLanguageSelectorComponent {\n\n  public static DEFAULT_INPUTS_O_LANGUAGE_SELECTOR = DEFAULT_INPUTS_O_LANGUAGE_SELECTOR;\n  public static DEFAULT_OUTPUTS_LANGUAGE_SELECTOR = DEFAULT_OUTPUTS_LANGUAGE_SELECTOR;\n\n  @InputConverter()\n  useFlagIcons: boolean = false;\n\n  onChange: EventEmitter<Object> = new EventEmitter<Object>();\n\n  protected translateService: OTranslateService;\n  protected appConfig: AppConfig;\n  protected availableLangs: string[];\n\n  constructor(protected injector: Injector) {\n    this.translateService = this.injector.get(OTranslateService);\n    this.appConfig = this.injector.get(AppConfig);\n    this.availableLangs = this.appConfig.getConfiguration().applicationLocales;\n  }\n\n  getFlagClass(lang: string) {\n    let flagName = LocaleCode.getCountryCode(lang);\n    flagName = (flagName !== 'en') ? flagName : 'gb';\n    return 'flag-icon-' + flagName;\n  }\n\n  getAvailableLangs(): string[] {\n    return this.availableLangs;\n  }\n\n  configureI18n(lang: any) {\n    if (this.translateService && this.translateService.getCurrentLang() !== lang) {\n      this.translateService.use(lang);\n    }\n  }\n\n  getCurrentLang(): string {\n    return this.translateService.getCurrentLang();\n  }\n\n  getCurrentCountry(): string {\n    return LocaleCode.getCountryCode(this.getCurrentLang());\n  }\n\n}\n\n@NgModule({\n  declarations: [OLanguageSelectorComponent],\n  imports: [OSharedModule, CommonModule],\n  exports: [OLanguageSelectorComponent]\n})\nexport class OLanguageSelectorModule {\n}\n"]}