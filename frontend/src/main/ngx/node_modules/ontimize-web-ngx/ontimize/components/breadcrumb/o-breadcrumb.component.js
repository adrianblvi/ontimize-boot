import { Component, Injector, NgModule, ViewEncapsulation } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Router, RouterModule } from '@angular/router';
import { Codes } from '../../utils';
import { OSharedModule } from '../../shared';
import { NavigationService, Util } from '../../../index';
export var DEFAULT_INPUTS_O_BREADCRUMB = [
    '_formRef: form',
    'labelColumns: label-columns',
    'separator'
];
var OBreadcrumbComponent = (function () {
    function OBreadcrumbComponent(injector) {
        this.injector = injector;
        this.separator = ' ';
        this.labelColsArray = [];
        this._displayTextloaded = false;
        this.router = this.injector.get(Router);
        this.navigationService = this.injector.get(NavigationService);
    }
    OBreadcrumbComponent.prototype.ngOnInit = function () {
        var self = this;
        this.labelColsArray = Util.parseArray(this.labelColumns);
        if (this.navigationService && this.navigationService.navigationEvents$) {
            this.navigationServiceSubscription = this.navigationService.navigationEvents$.subscribe(function (e) {
                self.displayTextloaded = !(self._formRef && self.labelColsArray.length);
                self.breadcrumbs = e;
            });
        }
    };
    OBreadcrumbComponent.prototype.ngAfterViewInit = function () {
        if (this._formRef && this.labelColsArray.length) {
            var self_1 = this;
            this.onDataLoadedSubscription = this._formRef.onDataLoaded.subscribe(function (value) {
                if (self_1.breadcrumbs.length) {
                    var displayText = self_1.labelColsArray.map(function (element) { return value[element]; }).join(self_1.separator);
                    self_1.breadcrumbs[self_1.breadcrumbs.length - 1].displayText = displayText;
                    self_1.displayTextloaded = true;
                }
            });
        }
    };
    OBreadcrumbComponent.prototype.showBreadcrumbItem = function (item) {
        return this.displayTextloaded && item.terminal;
    };
    OBreadcrumbComponent.prototype.isNotInsideFormLayoutManager = function (item, index) {
        var previousItem = this.breadcrumbs[index - 1];
        return (previousItem && previousItem.isMainFormLayoutManagerComponent());
    };
    OBreadcrumbComponent.prototype.isTerminal = function (route) {
        return route.firstChild === null || route.firstChild.routeConfig === null;
    };
    OBreadcrumbComponent.prototype.ngOnDestroy = function () {
        if (this.onDataLoadedSubscription) {
            this.onDataLoadedSubscription.unsubscribe();
        }
        if (this.navigationServiceSubscription) {
            this.navigationServiceSubscription.unsubscribe();
        }
    };
    OBreadcrumbComponent.prototype.onRouteClick = function (route) {
        var extras = {};
        if (route.queryParams) {
            extras[Codes.QUERY_PARAMS] = route.queryParams;
        }
        this.router.navigate([route.url], extras);
    };
    Object.defineProperty(OBreadcrumbComponent.prototype, "displayTextloaded", {
        get: function () {
            return this._displayTextloaded;
        },
        set: function (arg) {
            this._displayTextloaded = arg;
        },
        enumerable: true,
        configurable: true
    });
    OBreadcrumbComponent.decorators = [
        { type: Component, args: [{
                    moduleId: module.id,
                    selector: 'o-breadcrumb',
                    template: "\n    <mat-toolbar class=\"toolbar-breadcrumb\">\n      <ng-template ngFor let-route let-i=\"index\" [ngForOf]=\"breadcrumbs\">\n        <ng-container *ngIf=\"!isNotInsideFormLayoutManager(route, i)\">\n          <a *ngIf=\"!route.terminal\" class=\"breadcrumb-item\" (click)=\"onRouteClick(route)\" layout-padding>\n            {{ route.displayText ? route.displayText : route.text | uppercase | oTranslate }}\n          </a>\n          <span *ngIf=\"showBreadcrumbItem(route)\" class=\"breadcrumb-item active\" layout-padding>\n            {{ route.displayText ? route.displayText : route.text | uppercase | oTranslate }}\n          </span>\n          <mat-icon *ngIf=\"!route.terminal\" svgIcon=\"ontimize:keyboard_arrow_right\"></mat-icon>\n        </ng-container>\n      </ng-template>\n    </mat-toolbar>\n  ",
                    styles: ["\n    .o-breadcrumb{display:flex;height:50px;min-height:50px;padding-bottom:8px}.o-breadcrumb .mat-toolbar{box-shadow:2px 2px 6px rgba(0,0,0,0.24);background:#ffffff;border-radius:6px;min-height:50px;max-height:50px}.o-breadcrumb .mat-toolbar .mat-toolbar-row{height:50px}.o-breadcrumb .mat-toolbar a{text-decoration:none;cursor:pointer}.o-breadcrumb .mat-toolbar span{cursor:default}.o-breadcrumb .mat-toolbar a,.o-breadcrumb .mat-toolbar span{padding-top:0;padding-bottom:0}\n  "],
                    inputs: DEFAULT_INPUTS_O_BREADCRUMB,
                    encapsulation: ViewEncapsulation.None,
                    host: {
                        '[class.o-breadcrumb]': 'true'
                    }
                },] },
    ];
    OBreadcrumbComponent.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    return OBreadcrumbComponent;
}());
export { OBreadcrumbComponent };
var OBreadcrumbModule = (function () {
    function OBreadcrumbModule() {
    }
    OBreadcrumbModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, OSharedModule, RouterModule],
                    exports: [OBreadcrumbComponent],
                    declarations: [OBreadcrumbComponent]
                },] },
    ];
    return OBreadcrumbModule;
}());
export { OBreadcrumbModule };
//# sourceMappingURL=o-breadcrumb.component.js.map