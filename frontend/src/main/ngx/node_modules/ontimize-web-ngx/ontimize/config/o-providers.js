import { LOCATION_INITIALIZED } from '@angular/common';
import { Injector } from '@angular/core';
import { BaseRequestOptions, XHRBackend } from '@angular/http';
import { MAT_RIPPLE_GLOBAL_OPTIONS } from '@angular/material';
import { Router } from '@angular/router';
import { combineLatest } from 'rxjs';
import { OContextMenuService } from '../components/contextmenu/o-context-menu.service';
import { AppConfig } from '../config/app-config';
import { appConfigFactory, AppMenuService, AuthGuardService, CurrencyService, dataServiceFactory, DialogService, LocalStorageService, LoginService, MomentService, NavigationService, NumberService, OModulesInfoService, OntimizeExportService, OntimizeFileService, OntimizeMatIconRegistry, OntimizeService, OntimizeServiceResponseParser, OTranslateService, OUserInfoService, SnackBarService } from '../services';
import { OFormLayoutManagerService } from '../services/o-form-layout-manager.service';
import { Error403Component } from '../services/permissions/error403/o-error-403.component';
import { ORemoteConfigurationService } from '../services/remote-config.service';
import { ShareCanActivateChildService } from '../services/share-can-activate-child.service';
import { Codes } from '../util/codes';
import { Events } from '../util/events';
import { OHttp } from '../util/http/OHttp';
function addPermissionsRouteGuard(injector) {
    var route = injector.get(Router);
    var exists403 = route.config.find(function (route) { return route.path === Codes.FORBIDDEN_ROUTE; });
    if (!exists403) {
        route.config.push({ path: Codes.FORBIDDEN_ROUTE, component: Error403Component });
    }
}
export function appInitializerFactory(injector, config, oTranslate) {
    return function () { return new Promise(function (resolve) {
        var observableArray = [];
        var locationInitialized = injector.get(LOCATION_INITIALIZED, Promise.resolve(null));
        locationInitialized.then(function () {
            oTranslate.setDefaultLang('en');
            var userLang = config['locale'];
            if (!userLang) {
                userLang = oTranslate.getBrowserLang();
            }
            if (!config.applicationLocales) {
                config.applicationLocales = [];
            }
            if (config.applicationLocales.indexOf('en') === -1) {
                config.applicationLocales.push('en');
            }
            if (userLang && config.applicationLocales.indexOf(userLang) === -1) {
                config.applicationLocales.push(userLang);
            }
            if (config['uuid'] === undefined || config['uuid'] === null || config['uuid'] === '') {
                console.error('Your app must have an \'uuid\' property defined on your app.config file. Otherwise, your application will not work correctly.');
                alert('Your app must have an \'uuid\' property defined on your app.config file. Otherwise, your application will not work correctly.');
            }
            injector.get(NavigationService).initialize();
            injector.get(OntimizeMatIconRegistry).initialize();
            injector.get(LocalStorageService).setBackwardCompatibility();
            addPermissionsRouteGuard(injector);
            observableArray.push(oTranslate.setAppLang(userLang));
            var remoteConfigService = injector.get(ORemoteConfigurationService);
            observableArray.push(remoteConfigService.initialize());
            combineLatest(observableArray).subscribe(function () {
                resolve();
            });
        });
    }); };
}
export function bindEvents(window) {
    var events = new Events();
    function publishEventWrapper(channel) {
        return {
            handleEvent: function (ev) {
                events.publish(channel, ev);
            }
        };
    }
    window.addEventListener('online', publishEventWrapper('app:online'), false);
    window.addEventListener('offline', publishEventWrapper('app:offline'), false);
    window.addEventListener('orientationchange', publishEventWrapper('app:rotated'));
    window.addEventListener('statusTap', publishEventWrapper('app:statusTap'));
    setTimeout(function () {
        window.addEventListener('resize', publishEventWrapper('app:resize'));
    }, 2000);
    return events;
}
export function getEvents() {
    return bindEvents(window);
}
export function getOntimizeServiceProvider(backend, defaultOptions) {
    return new OHttp(backend, defaultOptions);
}
export function getOntimizeFileServiceProvider(injector) {
    return new OntimizeFileService(injector);
}
export function getOntimizeExportServiceProvider(injector) {
    return new OntimizeExportService(injector);
}
export function getLoginServiceProvider(injector) {
    return new LoginService(injector);
}
export function getNavigationServiceProvider(injector) {
    return new NavigationService(injector);
}
export function getMomentServiceProvider(injector) {
    return new MomentService(injector);
}
export function getCurrencyServiceProvider(injector) {
    return new CurrencyService(injector);
}
export function getNumberServiceProvider(injector) {
    return new NumberService(injector);
}
export function getDialogServiceProvider(injector) {
    return new DialogService(injector);
}
export function getSnackBarServiceProvider(injector) {
    return new SnackBarService(injector);
}
export function getTranslateServiceProvider(injector) {
    return new OTranslateService(injector);
}
export function getLocalStorageServiceProvider(injector) {
    return new LocalStorageService(injector);
}
export function getAppMenuServiceProvider(injector) {
    return new AppMenuService(injector);
}
export function getOUserInfoServiceProvider(injector) {
    return new OUserInfoService(injector);
}
export function getOModulesInfoServiceProvider(injector) {
    return new OModulesInfoService(injector);
}
export function getOntimizeServiceResponseParser(injector) {
    return new OntimizeServiceResponseParser(injector);
}
export function getORemoteConfigurationService(injector) {
    return new ORemoteConfigurationService(injector);
}
export var ONTIMIZE_PROVIDERS = [
    { provide: Events, useValue: getEvents },
    {
        provide: AppConfig,
        useFactory: appConfigFactory,
        deps: [Injector]
    },
    XHRBackend,
    BaseRequestOptions,
    {
        provide: OHttp,
        useFactory: getOntimizeServiceProvider,
        deps: [XHRBackend, BaseRequestOptions]
    },
    {
        provide: OntimizeService,
        useFactory: dataServiceFactory,
        deps: [Injector]
    },
    {
        provide: OntimizeServiceResponseParser,
        useFactory: getOntimizeServiceResponseParser,
        deps: [Injector]
    },
    {
        provide: OntimizeFileService,
        useFactory: getOntimizeFileServiceProvider,
        deps: [Injector]
    },
    {
        provide: OntimizeExportService,
        useFactory: getOntimizeExportServiceProvider,
        deps: [Injector]
    },
    {
        provide: LoginService,
        useFactory: getLoginServiceProvider,
        deps: [Injector]
    },
    {
        provide: NavigationService,
        useFactory: getNavigationServiceProvider,
        deps: [Injector]
    },
    {
        provide: MomentService,
        useFactory: getMomentServiceProvider,
        deps: [Injector]
    },
    {
        provide: CurrencyService,
        useFactory: getCurrencyServiceProvider,
        deps: [Injector]
    },
    {
        provide: NumberService,
        useFactory: getNumberServiceProvider,
        deps: [Injector]
    },
    {
        provide: DialogService,
        useFactory: getDialogServiceProvider,
        deps: [Injector]
    },
    {
        provide: SnackBarService,
        useFactory: getSnackBarServiceProvider,
        deps: [Injector]
    },
    {
        provide: OTranslateService,
        useFactory: getTranslateServiceProvider,
        deps: [Injector]
    },
    {
        provide: LocalStorageService,
        useFactory: getLocalStorageServiceProvider,
        deps: [Injector]
    },
    {
        provide: AuthGuardService,
        useClass: AuthGuardService,
        deps: [Injector]
    },
    {
        provide: AppMenuService,
        useFactory: getAppMenuServiceProvider,
        deps: [Injector]
    },
    {
        provide: OUserInfoService,
        useFactory: getOUserInfoServiceProvider,
        deps: [Injector]
    },
    {
        provide: OModulesInfoService,
        useFactory: getOModulesInfoServiceProvider,
        deps: [Injector]
    },
    {
        provide: OFormLayoutManagerService,
        useClass: OFormLayoutManagerService
    },
    {
        provide: OContextMenuService,
        useClass: OContextMenuService
    },
    {
        provide: ShareCanActivateChildService,
        useClass: ShareCanActivateChildService
    },
    {
        provide: ORemoteConfigurationService,
        useFactory: getORemoteConfigurationService,
        deps: [Injector]
    },
    { provide: MAT_RIPPLE_GLOBAL_OPTIONS, useValue: { disabled: true } }
];
//# sourceMappingURL=o-providers.js.map