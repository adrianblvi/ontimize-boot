import { Directive, Input, Output, EventEmitter, HostListener } from '@angular/core';
import { Util } from '../util/util';
var OKeyboardListenerDirective = (function () {
    function OKeyboardListenerDirective() {
        this.onKeysPressed = new EventEmitter();
        this.keyboardNumberKeysArray = [];
        this.activeKeys = {};
    }
    OKeyboardListenerDirective.prototype.keyDown = function (e) {
        var pressedCode = e.keyCode;
        if (this.keyboardNumberKeysArray.indexOf(pressedCode) !== -1) {
            this.activeKeys[pressedCode] = true;
            this.checkNeededKeys(e);
        }
    };
    OKeyboardListenerDirective.prototype.keyUp = function (e) {
        var pressedCode = e.keyCode;
        if (this.keyboardNumberKeysArray.indexOf(pressedCode) !== -1) {
            this.activeKeys[pressedCode] = false;
        }
    };
    OKeyboardListenerDirective.prototype.ngOnInit = function () {
        this.parseKeyboardKeys();
    };
    OKeyboardListenerDirective.prototype.parseKeyboardKeys = function () {
        var _this = this;
        var keysAsStringArray = Util.parseArray(this.keyboardKeys);
        keysAsStringArray.forEach(function (key) {
            try {
                _this.keyboardNumberKeysArray.push(parseInt(key));
            }
            catch (e) {
                console.error(e);
            }
        });
    };
    OKeyboardListenerDirective.prototype.checkNeededKeys = function (e) {
        var _this = this;
        var trigger = true;
        this.keyboardNumberKeysArray.forEach(function (key) {
            trigger = trigger && _this.activeKeys[key];
        });
        if (trigger) {
            e.preventDefault();
            e.stopPropagation();
            this.onKeysPressed.emit();
        }
    };
    OKeyboardListenerDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[oKeyboardListener]'
                },] },
    ];
    OKeyboardListenerDirective.propDecorators = {
        keyboardKeys: [{ type: Input }],
        onKeysPressed: [{ type: Output }],
        keyDown: [{ type: HostListener, args: ['keydown', ['$event'],] }],
        keyUp: [{ type: HostListener, args: ['keyup', ['$event'],] }]
    };
    return OKeyboardListenerDirective;
}());
export { OKeyboardListenerDirective };
//# sourceMappingURL=keyboard-listener.directive.js.map