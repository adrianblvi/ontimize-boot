{"version":3,"file":"keyboard-listener.directive.js","sourceRoot":"","sources":["../../../tmp/ontimize/directives/keyboard-listener.directive.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,MAAM,EAAE,YAAY,EAAU,YAAY,EAAE,MAAM,eAAe,CAAC;AAC7F,OAAO,EAAE,IAAI,EAAE,MAAM,cAAc,CAAC;AAEpC;IAAA;QAMY,kBAAa,GAAyB,IAAI,YAAY,EAAU,CAAC;QAEjE,4BAAuB,GAAkB,EAAE,CAAC;QAC5C,eAAU,GAAW,EAAE,CAAC;IA+CpC,CAAC;IA5CC,4CAAO,GADP,UACQ,CAAgB;QACtB,IAAM,WAAW,GAAG,CAAC,CAAC,OAAO,CAAC;QAC9B,IAAI,IAAI,CAAC,uBAAuB,CAAC,OAAO,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE;YAC5D,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC;YACpC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;SACzB;IACH,CAAC;IAGD,0CAAK,GADL,UACM,CAAgB;QACpB,IAAM,WAAW,GAAG,CAAC,CAAC,OAAO,CAAC;QAC9B,IAAI,IAAI,CAAC,uBAAuB,CAAC,OAAO,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE;YAC5D,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,GAAG,KAAK,CAAC;SACtC;IACH,CAAC;IAED,6CAAQ,GAAR;QACE,IAAI,CAAC,iBAAiB,EAAE,CAAC;IAC3B,CAAC;IAED,sDAAiB,GAAjB;QAAA,iBASC;QARC,IAAM,iBAAiB,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAC7D,iBAAiB,CAAC,OAAO,CAAC,UAAA,GAAG;YAC3B,IAAI;gBACF,KAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;aAClD;YAAC,OAAO,CAAC,EAAE;gBACV,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;aAClB;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,oDAAe,GAAf,UAAgB,CAAgB;QAAhC,iBAWC;QAVC,IAAI,OAAO,GAAG,IAAI,CAAC;QACnB,IAAI,CAAC,uBAAuB,CAAC,OAAO,CAAC,UAAA,GAAG;YACtC,OAAO,GAAG,OAAO,IAAI,KAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;QACH,IAAI,OAAO,EAAE;YACX,CAAC,CAAC,cAAc,EAAE,CAAC;YACnB,CAAC,CAAC,eAAe,EAAE,CAAC;YAEpB,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC;SAC3B;IACH,CAAC;;gBAtDF,SAAS,SAAC;oBACT,QAAQ,EAAE,qBAAqB;iBAChC;;;+BAGE,KAAK;gCACL,MAAM;0BAKN,YAAY,SAAC,SAAS,EAAE,CAAC,QAAQ,CAAC;wBASlC,YAAY,SAAC,OAAO,EAAE,CAAC,QAAQ,CAAC;;IAoCnC,iCAAC;CAAA,AAxDD,IAwDC;SArDY,0BAA0B","sourcesContent":["import { Directive, Input, Output, EventEmitter, OnInit, HostListener } from '@angular/core';\nimport { Util } from '../util/util';\n\n@Directive({\n  selector: '[oKeyboardListener]'\n})\nexport class OKeyboardListenerDirective implements OnInit {\n\n  @Input() keyboardKeys: string;\n  @Output() onKeysPressed: EventEmitter<Object> = new EventEmitter<Object>();\n\n  protected keyboardNumberKeysArray: Array<number> = [];\n  protected activeKeys: Object = {};\n\n  @HostListener('keydown', ['$event'])\n  keyDown(e: KeyboardEvent) {\n    const pressedCode = e.keyCode;\n    if (this.keyboardNumberKeysArray.indexOf(pressedCode) !== -1) {\n      this.activeKeys[pressedCode] = true;\n      this.checkNeededKeys(e);\n    }\n  }\n\n  @HostListener('keyup', ['$event'])\n  keyUp(e: KeyboardEvent) {\n    const pressedCode = e.keyCode;\n    if (this.keyboardNumberKeysArray.indexOf(pressedCode) !== -1) {\n      this.activeKeys[pressedCode] = false;\n    }\n  }\n\n  ngOnInit(): void {\n    this.parseKeyboardKeys();\n  }\n\n  parseKeyboardKeys() {\n    const keysAsStringArray = Util.parseArray(this.keyboardKeys);\n    keysAsStringArray.forEach(key => {\n      try {\n        this.keyboardNumberKeysArray.push(parseInt(key));\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  checkNeededKeys(e: KeyboardEvent) {\n    let trigger = true;\n    this.keyboardNumberKeysArray.forEach(key => {\n      trigger = trigger && this.activeKeys[key];\n    });\n    if (trigger) {\n      e.preventDefault();\n      e.stopPropagation();\n      // this.activeKeys = {};\n      this.onKeysPressed.emit();\n    }\n  }\n\n}\n"]}