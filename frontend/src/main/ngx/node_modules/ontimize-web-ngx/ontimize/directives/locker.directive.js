import { Directive, ElementRef, Host, Input, Optional, Renderer2 } from '@angular/core';
import { OFormServiceComponent } from '../components';
export var DEFAULT_INPUTS_O_LOCKER = [
    'oLockerMode',
    'oLockerDelay'
];
var OLockerDirective = (function () {
    function OLockerDirective(element, renderer, parent) {
        var _this = this;
        this.element = element;
        this.renderer = renderer;
        this.parent = parent;
        this._oLockerMode = 'disable';
        if (parent) {
            this.subscription = parent.loadingSubject.subscribe(function (x) { return _this.manageLockerMode(x); });
        }
    }
    OLockerDirective.prototype.ngOnDestroy = function () {
        this.subscription.unsubscribe();
    };
    OLockerDirective.prototype.manageLockerMode = function (loading) {
        if (this._oLockerMode === 'load') {
            this.manageLoadMode(loading);
        }
        else {
            this.manageDisableMode(loading);
        }
    };
    OLockerDirective.prototype.manageDisableMode = function (loading) {
        if (loading) {
            this.parent.enabled = false;
        }
        else {
            this.parent.enabled = true;
        }
    };
    OLockerDirective.prototype.manageLoadMode = function (loading) {
        if (loading) {
            this.addLoading();
        }
        else {
            this.removeLoading();
        }
    };
    OLockerDirective.prototype.addLoading = function () {
        this.componentDiv = this.element.nativeElement.children[0];
        this.loadingParentDiv = this.renderer.createElement('div');
        var loaderChild1 = this.renderer.createElement('div');
        var loaderChild2 = this.renderer.createElement('div');
        var loaderChild3 = this.renderer.createElement('div');
        var loaderChild4 = this.renderer.createElement('div');
        this.renderer.appendChild(this.loadingParentDiv, loaderChild4);
        this.renderer.appendChild(this.loadingParentDiv, loaderChild3);
        this.renderer.appendChild(this.loadingParentDiv, loaderChild2);
        this.renderer.appendChild(this.loadingParentDiv, loaderChild1);
        this.renderer.insertBefore(this.element.nativeElement, this.loadingParentDiv, this.componentDiv);
        this.renderer.addClass(this.loadingParentDiv, 'o-loading');
        this.renderer.addClass(this.element.nativeElement, 'relative');
        this.renderer.setStyle(this.componentDiv, 'opacity', '0.6');
    };
    OLockerDirective.prototype.removeLoading = function () {
        if (this.loadingParentDiv) {
            this.renderer.removeChild(this.element.nativeElement, this.loadingParentDiv);
            this.renderer.removeClass(this.element.nativeElement, 'relative');
            this.renderer.removeStyle(this.componentDiv, 'opacity');
        }
    };
    Object.defineProperty(OLockerDirective.prototype, "oLockerMode", {
        set: function (value) {
            this._oLockerMode = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OLockerDirective.prototype, "oLockerDelay", {
        set: function (value) {
            this.parent.delayLoad = value;
        },
        enumerable: true,
        configurable: true
    });
    OLockerDirective.DEFAULT_INPUTS_O_LOCKER = DEFAULT_INPUTS_O_LOCKER;
    OLockerDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[oLocker]',
                    inputs: DEFAULT_INPUTS_O_LOCKER
                },] },
    ];
    OLockerDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: OFormServiceComponent, decorators: [{ type: Optional }, { type: Host }] }
    ]; };
    OLockerDirective.propDecorators = {
        oLockerMode: [{ type: Input }],
        oLockerDelay: [{ type: Input }]
    };
    return OLockerDirective;
}());
export { OLockerDirective };
//# sourceMappingURL=locker.directive.js.map