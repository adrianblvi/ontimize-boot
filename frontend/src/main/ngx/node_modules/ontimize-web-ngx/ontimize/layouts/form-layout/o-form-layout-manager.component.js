var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { CommonModule } from '@angular/common';
import { Component, ContentChild, ContentChildren, CUSTOM_ELEMENTS_SCHEMA, ElementRef, EventEmitter, HostListener, Injector, NgModule, Optional, QueryList, SkipSelf, ViewChild } from '@angular/core';
import { MatDialog } from '@angular/material';
import { ActivatedRoute, Router, RouterModule } from '@angular/router';
import { OListComponent } from '../../components/list/o-list.component';
import { OTableComponent } from '../../components/table/o-table.component';
import { InputConverter } from '../../decorators';
import { LocalStorageService } from '../../services/local-storage.service';
import { NavigationService } from '../../services/navigation.service';
import { OFormLayoutManagerService } from '../../services/o-form-layout-manager.service';
import { OTranslateService } from '../../services/translate/o-translate.service';
import { OSharedModule } from '../../shared';
import { Util } from '../../utils';
import { OFormLayoutDialogComponent } from './dialog/o-form-layout-dialog.component';
import { OFormLayoutDialogOptionsComponent } from './dialog/options/o-form-layout-dialog-options.component';
import { OFormLayoutManagerContentDirective } from './directives/o-form-layout-manager-content.directive';
import { CanActivateFormLayoutChildGuard } from './guards/o-form-layout-can-activate-child.guard';
import { OFormLayoutTabGroupComponent } from './tabgroup/o-form-layout-tabgroup.component';
import { OFormLayoutTabGroupOptionsComponent } from './tabgroup/options/o-form-layout-tabgroup-options.component';
export var DEFAULT_INPUTS_O_FORM_LAYOUT_MANAGER = [
    'oattr: attr',
    'mode',
    'labelColumns: label-columns',
    'separator',
    'title',
    'storeState: store-state',
    'titleDataOrigin: title-data-origin',
    'dialogWidth: dialog-width',
    'dialogMinWidth: dialog-min-width',
    'dialogMaxWidth: dialog-max-width',
    'dialogHeight: dialog-height',
    'dialogMinHeight: dialog-min-height',
    'dialogMaxHeight dialog-max-height',
    'dialogClass: dialog-class'
];
export var DEFAULT_OUTPUTS_O_FORM_LAYOUT_MANAGER = [
    'onMainTabSelected',
    'onSelectedTabChange',
    'onCloseTab'
];
var OFormLayoutManagerComponent = (function () {
    function OFormLayoutManagerComponent(injector, router, actRoute, dialog, elRef, parentFormLayoutManager) {
        var _this = this;
        this.injector = injector;
        this.router = router;
        this.actRoute = actRoute;
        this.dialog = dialog;
        this.elRef = elRef;
        this.parentFormLayoutManager = parentFormLayoutManager;
        this.separator = ' ';
        this.storeState = true;
        this.dialogClass = '';
        this.onMainTabSelected = new EventEmitter();
        this.onSelectedTabChange = new EventEmitter();
        this.onCloseTab = new EventEmitter();
        this.labelColsArray = [];
        this.addingGuard = false;
        this.markForUpdate = false;
        this.onTriggerUpdate = new EventEmitter();
        this.oFormLayoutManagerService = this.injector.get(OFormLayoutManagerService);
        this.localStorageService = this.injector.get(LocalStorageService);
        this.translateService = this.injector.get(OTranslateService);
        this.navigationService = this.injector.get(NavigationService);
        if (this.storeState) {
            this.onRouteChangeStorageSubscription = this.localStorageService.onRouteChange.subscribe(function (res) {
                _this.updateStateStorage();
            });
        }
    }
    OFormLayoutManagerComponent.prototype.ngOnInit = function () {
        var availableModeValues = [OFormLayoutManagerComponent.DIALOG_MODE, OFormLayoutManagerComponent.TAB_MODE];
        this.mode = (this.mode || '').toLowerCase();
        if (availableModeValues.indexOf(this.mode) === -1) {
            this.mode = OFormLayoutManagerComponent.DIALOG_MODE;
        }
        this.labelColsArray = Util.parseArray(this.labelColumns);
        this.addActivateChildGuard();
        if (!Util.isDefined(this.oattr)) {
            this.oattr = this.title + this.mode;
            console.warn('o-form-layout-manager must have an unique attr');
        }
        this.oFormLayoutManagerService.registerFormLayoutManager(this);
    };
    OFormLayoutManagerComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        setTimeout(function () {
            if (_this.elRef) {
                _this.elRef.nativeElement.removeAttribute('title');
            }
            if (_this.storeState && _this.isTabMode() && Util.isDefined(_this.oTabGroup)) {
                var state = _this.localStorageService.getComponentStorage(_this);
                _this.oTabGroup.initializeComponentState(state);
            }
        });
    };
    OFormLayoutManagerComponent.prototype.ngOnDestroy = function () {
        if (this.onRouteChangeStorageSubscription) {
            this.onRouteChangeStorageSubscription.unsubscribe();
        }
        this.updateStateStorage();
        this.oFormLayoutManagerService.removeFormLayoutManager(this);
        this.destroyAactivateChildGuard();
    };
    OFormLayoutManagerComponent.prototype.getAttribute = function () {
        return this.oattr;
    };
    OFormLayoutManagerComponent.prototype.getComponentKey = function () {
        return 'OFormLayoutManagerComponent_' + this.oattr;
    };
    OFormLayoutManagerComponent.prototype.getDataToStore = function () {
        if (this.isTabMode() && Util.isDefined(this.oTabGroup)) {
            return this.oTabGroup.getDataToStore();
        }
        return {};
    };
    OFormLayoutManagerComponent.prototype.beforeunloadHandler = function (event) {
        this.updateStateStorage();
    };
    OFormLayoutManagerComponent.prototype.getLabelFromUrlParams = function (urlParams) {
        var _this = this;
        var label = '';
        var keys = Object.keys(urlParams);
        keys.forEach(function (param, i) {
            label += urlParams[param] + ((i < keys.length - 1) ? _this.separator : '');
        });
        return label;
    };
    OFormLayoutManagerComponent.prototype.getFormDataFromLabelColumns = function (data) {
        var _this = this;
        var formData = {};
        Object.keys(data).map(function (x) {
            if (_this.labelColsArray.indexOf(x) > -1) {
                formData[x] = data[x];
            }
        });
        return formData;
    };
    OFormLayoutManagerComponent.prototype.addActivateChildGuard = function () {
        var routeConfig = this.getParentActRouteRoute();
        if (Util.isDefined(routeConfig)) {
            var canActivateChildArray = (routeConfig.canActivateChild || []);
            var previouslyAdded = false;
            for (var i = 0, len = canActivateChildArray.length; i < len; i++) {
                previouslyAdded = (canActivateChildArray[i].name === OFormLayoutManagerComponent.guardClassName);
                if (previouslyAdded) {
                    break;
                }
            }
            if (!previouslyAdded) {
                this.addingGuard = true;
                canActivateChildArray.push(CanActivateFormLayoutChildGuard);
                routeConfig.canActivateChild = canActivateChildArray;
            }
        }
    };
    OFormLayoutManagerComponent.prototype.destroyAactivateChildGuard = function () {
        if (!this.addingGuard) {
            return;
        }
        var routeConfig = this.getParentActRouteRoute();
        if (Util.isDefined(routeConfig)) {
            for (var i = (routeConfig.canActivateChild || []).length - 1; i >= 0; i--) {
                if (routeConfig.canActivateChild[i].name === OFormLayoutManagerComponent.guardClassName) {
                    routeConfig.canActivateChild.splice(i, 1);
                    break;
                }
            }
        }
    };
    OFormLayoutManagerComponent.prototype.isDialogMode = function () {
        return this.mode === OFormLayoutManagerComponent.DIALOG_MODE;
    };
    OFormLayoutManagerComponent.prototype.isTabMode = function () {
        return this.mode === OFormLayoutManagerComponent.TAB_MODE;
    };
    OFormLayoutManagerComponent.prototype.addDetailComponent = function (childRoute, url) {
        var newDetailComp = {
            params: childRoute.params,
            queryParams: childRoute.queryParams,
            urlSegments: childRoute.url,
            component: childRoute.routeConfig.component,
            url: url,
            id: Math.random().toString(36),
            label: '',
            modified: false
        };
        if (this.isTabMode() && Util.isDefined(this.oTabGroup)) {
            this.oTabGroup.addTab(newDetailComp);
        }
        else if (this.isDialogMode()) {
            this.openFormLayoutDialog(newDetailComp);
        }
    };
    OFormLayoutManagerComponent.prototype.closeDetail = function (id) {
        if (this.isTabMode() && Util.isDefined(this.oTabGroup)) {
            this.oTabGroup.closeTab(id);
        }
        else if (this.isDialogMode() && Util.isDefined(this.dialogRef)) {
            this.dialogRef.close();
            this.reloadMainComponents();
        }
    };
    OFormLayoutManagerComponent.prototype.openFormLayoutDialog = function (detailComp) {
        var _this = this;
        var cssclass = ['o-form-layout-dialog-overlay'];
        if (this.dialogClass) {
            cssclass.push(this.dialogClass);
        }
        var dialogConfig = {
            data: {
                data: detailComp,
                layoutManagerComponent: this,
                title: this.title,
            },
            width: this.dialogOptions ? this.dialogOptions.width : this.dialogWidth,
            minWidth: this.dialogOptions ? this.dialogOptions.minWidth : this.dialogMinWidth,
            maxWidth: this.dialogOptions ? this.dialogOptions.maxWidth : this.dialogMaxWidth,
            height: this.dialogOptions ? this.dialogOptions.height : this.dialogHeight,
            minHeight: this.dialogOptions ? this.dialogOptions.minHeight : this.dialogMinHeight,
            maxHeight: this.dialogOptions ? this.dialogOptions.maxHeight : this.dialogMaxHeight,
            disableClose: this.dialogOptions ? this.dialogOptions.disableClose : true,
            panelClass: this.dialogOptions ? this.dialogOptions.class : cssclass
        };
        if (this.dialogOptions) {
            dialogConfig.closeOnNavigation = this.dialogOptions.closeOnNavigation;
            dialogConfig.backdropClass = this.dialogOptions.backdropClass;
            dialogConfig.position = this.dialogOptions.position;
            dialogConfig.disableClose = this.dialogOptions.disableClose;
        }
        this.dialogRef = this.dialog.open(OFormLayoutDialogComponent, dialogConfig);
        this.dialogRef.afterClosed().subscribe(function () {
            _this.updateIfNeeded();
        });
    };
    OFormLayoutManagerComponent.prototype.getFormCacheData = function (formId) {
        if (this.isTabMode() && Util.isDefined(this.oTabGroup)) {
            return this.oTabGroup.getFormCacheData(formId);
        }
        else if (this.isDialogMode() && Util.isDefined(this.dialogRef)) {
            return this.dialogRef.componentInstance.data;
        }
        return undefined;
    };
    OFormLayoutManagerComponent.prototype.getLastTabId = function () {
        if (this.isTabMode() && Util.isDefined(this.oTabGroup)) {
            return this.oTabGroup.getLastTabId();
        }
        return undefined;
    };
    OFormLayoutManagerComponent.prototype.setModifiedState = function (modified, id) {
        if (this.isTabMode() && Util.isDefined(this.oTabGroup)) {
            this.oTabGroup.setModifiedState(modified, id);
        }
    };
    OFormLayoutManagerComponent.prototype.getLabelFromData = function (data) {
        var _this = this;
        var label = '';
        var isDataDefined = Util.isDefined(data);
        if (isDataDefined && data.hasOwnProperty('new_tab_title')) {
            label = this.translateService.get(data['new_tab_title']);
        }
        else if (isDataDefined && this.labelColsArray.length !== 0) {
            this.labelColsArray.forEach(function (col, idx) {
                if (data[col] !== undefined) {
                    label += data[col] + ((idx < _this.labelColsArray.length - 1) ? _this.separator : '');
                }
            });
        }
        return label;
    };
    OFormLayoutManagerComponent.prototype.updateNavigation = function (data, id, insertionMode) {
        if (this.isTabMode() && Util.isDefined(this.oTabGroup)) {
            this.oTabGroup.updateNavigation(data, id, insertionMode);
        }
        else if (this.isDialogMode() && Util.isDefined(this.dialogRef)) {
            this.dialogRef.componentInstance.updateNavigation(data, id);
        }
    };
    OFormLayoutManagerComponent.prototype.updateActiveData = function (data) {
        if (this.isTabMode() && Util.isDefined(this.oTabGroup)) {
            this.oTabGroup.updateActiveData(data);
        }
        else if (this.isDialogMode() && Util.isDefined(this.dialogRef)) {
            this.dialogRef.componentInstance.updateActiveData(data);
        }
    };
    OFormLayoutManagerComponent.prototype.getRouteOfActiveItem = function () {
        var route = [];
        if (this.isTabMode() && Util.isDefined(this.oTabGroup)) {
            route = this.oTabGroup.getRouteOfActiveItem();
        }
        else if (this.isDialogMode() && Util.isDefined(this.dialogRef)) {
            route = this.dialogRef.componentInstance.getRouteOfActiveItem();
        }
        return route;
    };
    OFormLayoutManagerComponent.prototype.isMainComponent = function (comp) {
        var result = false;
        if (this.isTabMode() && Util.isDefined(this.oTabGroup)) {
            var firstTab = this.oTabGroup.elementRef.nativeElement.getElementsByTagName('mat-tab-body')[0];
            if (firstTab) {
                result = firstTab.contains(comp.elementRef.nativeElement);
            }
        }
        else if (this.isDialogMode()) {
            result = !comp.oFormLayoutDialog;
        }
        return result;
    };
    OFormLayoutManagerComponent.prototype.getRouteForComponent = function (comp) {
        var result = [];
        if (this.parentFormLayoutManager) {
            var parentRoute = this.parentFormLayoutManager.getRouteForComponent(comp);
            if (parentRoute && parentRoute.length > 0) {
                result.push.apply(result, parentRoute);
            }
        }
        if (!this.isMainComponent(comp)) {
            var activeRoute = this.getRouteOfActiveItem();
            if (activeRoute && activeRoute.length > 0) {
                result.push.apply(result, activeRoute);
            }
        }
        return result;
    };
    OFormLayoutManagerComponent.prototype.setAsActiveFormLayoutManager = function () {
        this.oFormLayoutManagerService.activeFormLayoutManager = this;
    };
    OFormLayoutManagerComponent.prototype.reloadMainComponents = function () {
        this.onTriggerUpdate.emit();
    };
    OFormLayoutManagerComponent.prototype.allowToUpdateNavigation = function (formAttr) {
        return (this.isTabMode() && Util.isDefined(this.oTabGroup) && Util.isDefined(this.titleDataOrigin)) ?
            this.titleDataOrigin === formAttr :
            true;
    };
    OFormLayoutManagerComponent.prototype.updateStateStorage = function () {
        if (this.localStorageService && this.isTabMode() && Util.isDefined(this.oTabGroup) && this.storeState) {
            this.localStorageService.updateComponentStorage(this);
        }
    };
    OFormLayoutManagerComponent.prototype.getParentActRouteRoute = function () {
        var actRoute = this.actRoute;
        while (actRoute.parent !== undefined && actRoute.parent !== null) {
            if (actRoute.routeConfig.children || actRoute.routeConfig.loadChildren) {
                break;
            }
            actRoute = actRoute.parent;
        }
        return actRoute.routeConfig;
    };
    OFormLayoutManagerComponent.prototype.updateIfNeeded = function () {
        if (this.markForUpdate) {
            this.markForUpdate = false;
            this.onTriggerUpdate.emit();
        }
    };
    OFormLayoutManagerComponent.prototype.getParams = function () {
        var data;
        if (this.isTabMode() && Util.isDefined(this.oTabGroup)) {
            data = this.oTabGroup.getParams();
        }
        else if (this.isDialogMode() && Util.isDefined(this.dialogRef)) {
            data = this.dialogRef.componentInstance.getParams();
        }
        return data;
    };
    OFormLayoutManagerComponent.guardClassName = 'CanActivateFormLayoutChildGuard';
    OFormLayoutManagerComponent.DEFAULT_INPUTS_O_FORM_LAYOUT_MANAGER = DEFAULT_INPUTS_O_FORM_LAYOUT_MANAGER;
    OFormLayoutManagerComponent.DEFAULT_OUTPUTS_O_FORM_LAYOUT_MANAGER = DEFAULT_OUTPUTS_O_FORM_LAYOUT_MANAGER;
    OFormLayoutManagerComponent.DIALOG_MODE = 'dialog';
    OFormLayoutManagerComponent.TAB_MODE = 'tab';
    OFormLayoutManagerComponent.decorators = [
        { type: Component, args: [{
                    moduleId: module.id,
                    selector: 'o-form-layout-manager',
                    inputs: DEFAULT_INPUTS_O_FORM_LAYOUT_MANAGER,
                    outputs: DEFAULT_OUTPUTS_O_FORM_LAYOUT_MANAGER,
                    template: "\n    <o-form-layout-tabgroup #tabGroup *ngIf=\"isTabMode(); else elseBlock\" [title]=\"title\"\n      (onMainTabSelected)=\"onMainTabSelected.emit($event)\" (onSelectedTabChange)=\"onSelectedTabChange.emit($event)\"\n      (onCloseTab)=\"onCloseTab.emit($event)\" [options]=\"tabGroupOptions\">\n      <ng-content *ngTemplateOutlet=\"elseBlock\"></ng-content>\n    </o-form-layout-tabgroup>\n\n    <ng-template #elseBlock>\n      <ng-content></ng-content>\n    </ng-template>\n  ",
                    host: {
                        '[class.o-form-layout-manager]': 'true'
                    }
                },] },
    ];
    OFormLayoutManagerComponent.ctorParameters = function () { return [
        { type: Injector },
        { type: Router },
        { type: ActivatedRoute },
        { type: MatDialog },
        { type: ElementRef },
        { type: OFormLayoutManagerComponent, decorators: [{ type: SkipSelf }, { type: Optional }] }
    ]; };
    OFormLayoutManagerComponent.propDecorators = {
        oTabGroup: [{ type: ViewChild, args: ['tabGroup',] }],
        tableComponents: [{ type: ContentChildren, args: [OTableComponent, { descendants: true },] }],
        listComponents: [{ type: ContentChildren, args: [OListComponent, { descendants: true },] }],
        tabGroupOptions: [{ type: ContentChild, args: [OFormLayoutTabGroupOptionsComponent,] }],
        dialogOptions: [{ type: ContentChild, args: [OFormLayoutDialogOptionsComponent,] }],
        beforeunloadHandler: [{ type: HostListener, args: ['window:beforeunload', ['$event'],] }]
    };
    __decorate([
        InputConverter(),
        __metadata("design:type", Boolean)
    ], OFormLayoutManagerComponent.prototype, "storeState", void 0);
    return OFormLayoutManagerComponent;
}());
export { OFormLayoutManagerComponent };
var OFormLayoutManagerModule = (function () {
    function OFormLayoutManagerModule() {
    }
    OFormLayoutManagerModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule, OSharedModule, RouterModule],
                    declarations: [
                        OFormLayoutDialogComponent,
                        OFormLayoutManagerComponent,
                        OFormLayoutTabGroupComponent,
                        OFormLayoutManagerContentDirective,
                        OFormLayoutDialogOptionsComponent,
                        OFormLayoutTabGroupOptionsComponent
                    ],
                    exports: [
                        OFormLayoutManagerComponent,
                        OFormLayoutDialogOptionsComponent,
                        OFormLayoutTabGroupOptionsComponent
                    ],
                    entryComponents: [OFormLayoutDialogComponent],
                    providers: [{
                            provide: CanActivateFormLayoutChildGuard,
                            useClass: CanActivateFormLayoutChildGuard
                        }],
                    schemas: [CUSTOM_ELEMENTS_SCHEMA]
                },] },
    ];
    return OFormLayoutManagerModule;
}());
export { OFormLayoutManagerModule };
//# sourceMappingURL=o-form-layout-manager.component.js.map