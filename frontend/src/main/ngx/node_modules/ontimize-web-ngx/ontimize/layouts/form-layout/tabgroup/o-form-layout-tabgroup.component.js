import { Component, ComponentFactoryResolver, ElementRef, EventEmitter, Injector, QueryList, ViewChild, ViewChildren, ViewContainerRef, ViewEncapsulation } from '@angular/core';
import { MatTabGroup } from '@angular/material';
import { Router } from '@angular/router';
import { BehaviorSubject } from 'rxjs';
import { DialogService } from '../../../services/dialog.service';
import { Codes, Util } from '../../../utils';
import { OFormLayoutManagerContentDirective } from '../directives/o-form-layout-manager-content.directive';
import { OFormLayoutManagerComponent } from '../o-form-layout-manager.component';
export var DEFAULT_INPUTS_O_FORM_LAYOUT_TABGROUP = [
    'title',
    'options'
];
export var DEFAULT_OUTPUTS_O_FORM_LAYOUT_TABGROUP = [
    'onMainTabSelected',
    'onSelectedTabChange',
    'onCloseTab'
];
var OFormLayoutTabGroupComponent = (function () {
    function OFormLayoutTabGroupComponent(injector, componentFactoryResolver, location, elRef) {
        this.injector = injector;
        this.componentFactoryResolver = componentFactoryResolver;
        this.location = location;
        this.elRef = elRef;
        this.data = [];
        this.showLoading = new BehaviorSubject(false);
        this.loading = false;
        this.onMainTabSelected = new EventEmitter();
        this.onSelectedTabChange = new EventEmitter();
        this.onCloseTab = new EventEmitter();
        this.dialogService = injector.get(DialogService);
        this.formLayoutManager = this.injector.get(OFormLayoutManagerComponent);
        this.router = this.injector.get(Router);
    }
    OFormLayoutTabGroupComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.tabsDirectivesSubscription = this.tabsDirectives.changes.subscribe(function (changes) {
            if (_this.tabsDirectives.length) {
                var tabItem = _this.tabsDirectives.last;
                var tabData = _this.data[tabItem.index];
                if (tabData && !tabData.rendered) {
                    _this.createTabComponent(tabData, tabItem);
                }
            }
        });
    };
    OFormLayoutTabGroupComponent.prototype.ngOnDestroy = function () {
        if (this.tabsDirectivesSubscription) {
            this.tabsDirectivesSubscription.unsubscribe();
        }
        if (this.closeTabSubscription) {
            this.closeTabSubscription.unsubscribe();
        }
    };
    Object.defineProperty(OFormLayoutTabGroupComponent.prototype, "disableAnimation", {
        get: function () {
            return this.options && this.options.disableAnimation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OFormLayoutTabGroupComponent.prototype, "headerPosition", {
        get: function () {
            var headerPosition;
            if (this.options && this.options.headerPosition) {
                headerPosition = this.options.headerPosition;
            }
            return headerPosition;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OFormLayoutTabGroupComponent.prototype, "color", {
        get: function () {
            var color;
            if (this.options && this.options.color) {
                color = this.options.color;
            }
            return color;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OFormLayoutTabGroupComponent.prototype, "backgroundColor", {
        get: function () {
            var backgroundColor;
            if (this.options && this.options.backgroundColor) {
                backgroundColor = this.options.backgroundColor;
            }
            return backgroundColor;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OFormLayoutTabGroupComponent.prototype, "templateMatTabLabel", {
        get: function () {
            var templateMatTabLabel;
            if (this.options && this.options.templateMatTabLabel) {
                templateMatTabLabel = this.options.templateMatTabLabel;
            }
            return templateMatTabLabel;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OFormLayoutTabGroupComponent.prototype, "icon", {
        get: function () {
            var icon;
            if (this.options && this.options.icon) {
                icon = this.options.icon;
            }
            return icon;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OFormLayoutTabGroupComponent.prototype, "isIconPositionLeft", {
        get: function () {
            return this.options && this.options.iconPosition === 'left';
        },
        enumerable: true,
        configurable: true
    });
    OFormLayoutTabGroupComponent.prototype.addTab = function (compData) {
        var addNewComp = true;
        var navData = this.formLayoutManager.navigationService.getLastItem();
        if (navData.isInsertFormRoute()) {
            var existingData = this.data.find(function (item) { return item.insertionMode; });
            addNewComp = !existingData;
        }
        var newCompParams = compData.params;
        if (addNewComp) {
            this.data.forEach(function (comp) {
                var currParams = comp.params || {};
                Object.keys(currParams).forEach(function (key) {
                    addNewComp = addNewComp && (currParams[key] !== newCompParams[key]);
                });
            });
        }
        if (addNewComp) {
            this.data.push(compData);
        }
        else {
            this.reloadTab(compData);
        }
    };
    OFormLayoutTabGroupComponent.prototype.reloadTab = function (compData) {
        var compIndex = -1;
        var compParams = compData.params;
        this.data.forEach(function (comp, i) {
            var currParams = comp.params || {};
            var sameParams = Util.isEquivalent(currParams, compParams);
            if (sameParams) {
                compIndex = i;
            }
        });
        if (compIndex >= 0) {
            this.tabGroup.selectedIndex = (compIndex + 1);
        }
    };
    OFormLayoutTabGroupComponent.prototype.onTabSelectChange = function (arg) {
        if (this.formLayoutManager && this.tabGroup.selectedIndex === 0) {
            this.formLayoutManager.updateIfNeeded();
            this.onMainTabSelected.emit();
        }
        if (Util.isDefined(this.state) && Util.isDefined(this.state.tabsData)) {
            if (this.state.tabsData.length > 1) {
                if ((arg.index === this.state.tabsData.length) && Util.isDefined(this.state.selectedIndex)) {
                    this.selectedTabIndex = this.state.selectedIndex;
                    this.state = undefined;
                }
            }
            else {
                this.state = undefined;
            }
        }
        this.onSelectedTabChange.emit(this.data[this.selectedTabIndex - 1]);
    };
    OFormLayoutTabGroupComponent.prototype.closeTab = function (id) {
        if (!this.formLayoutManager) {
            return;
        }
        var onCloseTabAccepted = new EventEmitter();
        var self = this;
        this.closeTabSubscription = onCloseTabAccepted.asObservable().subscribe(function (res) {
            if (res) {
                var tabData_1;
                for (var i = self.data.length - 1; i >= 0; i--) {
                    if (self.data[i].id === id) {
                        tabData_1 = self.data.splice(i, 1)[0];
                        break;
                    }
                }
                self.onCloseTab.emit(tabData_1);
            }
        });
        var tabData = this.data.find(function (item) { return item.id === id; });
        if (Util.isDefined(tabData) && tabData.modified) {
            this.dialogService.confirm('CONFIRM', 'MESSAGES.FORM_CHANGES_WILL_BE_LOST').then(function (res) {
                onCloseTabAccepted.emit(res);
            });
        }
        else {
            onCloseTabAccepted.emit(true);
        }
    };
    OFormLayoutTabGroupComponent.prototype.createTabComponent = function (tabData, content) {
        var component = tabData.component;
        var componentFactory = this.componentFactoryResolver.resolveComponentFactory(component);
        var viewContainerRef = content.viewContainerRef;
        viewContainerRef.clear();
        viewContainerRef.createComponent(componentFactory);
        tabData.rendered = true;
    };
    OFormLayoutTabGroupComponent.prototype.getFormCacheData = function (idArg) {
        return this.data.filter(function (cacheItem) { return cacheItem.id === idArg; })[0];
    };
    OFormLayoutTabGroupComponent.prototype.getLastTabId = function () {
        return this.data.length > 0 ? this.data[this.data.length - 1].id : undefined;
    };
    OFormLayoutTabGroupComponent.prototype.getRouteOfActiveItem = function () {
        var route = [];
        if (this.data.length && this.tabGroup.selectedIndex > 0) {
            var urlSegments = this.data[this.tabGroup.selectedIndex - 1].urlSegments || [];
            urlSegments.forEach(function (segment) {
                route.push(segment.path);
            });
            return route;
        }
        return route;
    };
    OFormLayoutTabGroupComponent.prototype.setModifiedState = function (modified, id) {
        for (var i = 0, len = this.data.length; i < len; i++) {
            if (this.data[i].id === id) {
                this.data[i].modified = modified;
                break;
            }
        }
    };
    OFormLayoutTabGroupComponent.prototype.updateNavigation = function (data, id, insertionMode) {
        var index = this.data.findIndex(function (item) { return item.id === id; });
        if (index >= 0) {
            var label = this.formLayoutManager.getLabelFromData(data);
            this.tabGroup.selectedIndex = (index + 1);
            label = label.length ? label : this.formLayoutManager.getLabelFromUrlParams(this.data[index].params);
            this.data[index].label = label;
            this.data[index].insertionMode = insertionMode;
            if (Object.keys(data).length > 0) {
                this.data[index].formDataByLabelColumns = this.formLayoutManager.getFormDataFromLabelColumns(data);
            }
        }
    };
    OFormLayoutTabGroupComponent.prototype.updateActiveData = function (data) {
        var index = this.tabGroup.selectedIndex - 1;
        if (Util.isDefined(this.data[index])) {
            this.data[index] = Object.assign(this.data[index], data);
        }
    };
    OFormLayoutTabGroupComponent.prototype.getDataToStore = function () {
        var tabsData = [];
        this.data.map(function (data) {
            tabsData.push({
                params: data.params,
                queryParams: data.queryParams,
                urlSegments: data.urlSegments,
                url: data.url
            });
        });
        return {
            tabsData: tabsData,
            selectedIndex: this.tabGroup.selectedIndex
        };
    };
    OFormLayoutTabGroupComponent.prototype.initializeComponentState = function (state) {
        if (Util.isDefined(state) && Util.isDefined(state.tabsData) && Util.isDefined(state.tabsData[0])) {
            this.state = state;
            var extras = {};
            extras[Codes.QUERY_PARAMS] = state.tabsData[0].queryParams;
            var self_1 = this;
            if (this.formLayoutManager) {
                this.formLayoutManager.setAsActiveFormLayoutManager();
            }
            this.router.navigate([state.tabsData[0].url], extras).then(function (val) {
                if (self_1.data[0]) {
                    setTimeout(function () {
                        self_1.createTabsFromState();
                    }, 0);
                }
            });
        }
    };
    OFormLayoutTabGroupComponent.prototype.createTabsFromState = function () {
        var self = this;
        var tabComponent = self.data[0].component;
        this.state.tabsData.forEach(function (tabData, index) {
            if (tabComponent && index > 0) {
                setTimeout(function () {
                    var newDetailData = self.createDetailComponent(tabComponent, tabData);
                    self.data.push(newDetailData);
                }, 0);
            }
        });
    };
    OFormLayoutTabGroupComponent.prototype.createDetailComponent = function (component, paramsObj) {
        var newDetailComp = {
            params: paramsObj.params,
            queryParams: paramsObj.queryParams,
            urlSegments: paramsObj.urlSegments,
            component: component,
            url: paramsObj.url,
            id: Math.random().toString(36),
            label: '',
            modified: false
        };
        return newDetailComp;
    };
    Object.defineProperty(OFormLayoutTabGroupComponent.prototype, "state", {
        get: function () {
            return this._state;
        },
        set: function (arg) {
            this._state = arg;
            if (Util.isDefined(arg)) {
                this.showLoading.next(true);
            }
            else {
                this.showLoading.next(false);
            }
        },
        enumerable: true,
        configurable: true
    });
    OFormLayoutTabGroupComponent.prototype.getParams = function () {
        return Util.isDefined(this.data[0]) ? this.data[0].params : undefined;
    };
    Object.defineProperty(OFormLayoutTabGroupComponent.prototype, "elementRef", {
        get: function () {
            return this.elRef;
        },
        enumerable: true,
        configurable: true
    });
    OFormLayoutTabGroupComponent.DEFAULT_INPUTS_O_FORM_LAYOUT_TABGROUP = DEFAULT_INPUTS_O_FORM_LAYOUT_TABGROUP;
    OFormLayoutTabGroupComponent.DEFAULT_OUTPUTS_O_FORM_LAYOUT_TABGROUP = DEFAULT_OUTPUTS_O_FORM_LAYOUT_TABGROUP;
    OFormLayoutTabGroupComponent.decorators = [
        { type: Component, args: [{
                    moduleId: module.id,
                    selector: 'o-form-layout-tabgroup',
                    inputs: DEFAULT_INPUTS_O_FORM_LAYOUT_TABGROUP,
                    outputs: DEFAULT_OUTPUTS_O_FORM_LAYOUT_TABGROUP,
                    template: "\n    <mat-tab-group #tabGroup oTabGroup=\"ontimize\" fxFill [(selectedIndex)]=\"selectedTabIndex\"\n      (selectedTabChange)=\"onTabSelectChange($event)\" [color]=\"color\" [backgroundColor]=\"backgroundColor\"\n      [headerPosition]=\"headerPosition\" [@.disabled]=\"disableAnimation\">\n      <mat-tab label=\"{{ (title || 'LAYOUT_MANANGER.MAIN_TAB_LABEL') | oTranslate }}\">\n        <ng-content></ng-content>\n      </mat-tab>\n\n\n      <mat-tab *ngFor=\"let tabData of data; let i = index\">\n        <ng-template mat-tab-label>\n\n          <span class=\"tab-label\" [class.modified]=\"tabData.modified\">\n            <ng-container *ngIf=\"icon && isIconPositionLeft\">\n              <mat-icon>{{ icon }}</mat-icon>\n            </ng-container>\n            <ng-container *ngIf=\"templateMatTabLabel && tabData.formDataByLabelColumns && !tabData.insertionMode \">\n              <ng-container *ngTemplateOutlet=\"templateMatTabLabel;context:{$implicit:tabData.formDataByLabelColumns}\">\n              </ng-container>\n            </ng-container>\n            <ng-container *ngIf=\"!templateMatTabLabel || tabData.insertionMode\">\n              {{ tabData.label }}\n            </ng-container>\n            <ng-container *ngIf=\"icon && !isIconPositionLeft\">\n              <mat-icon>{{ icon }}</mat-icon>\n            </ng-container>\n          </span>\n          <mat-icon (click)=\"closeTab(tabData.id)\" svgIcon=\"ontimize:close\"></mat-icon>\n        </ng-template>\n        <ng-template o-form-layout-manager-content [index]=\"i\"></ng-template>\n      </mat-tab>\n    </mat-tab-group>\n    <div *ngIf=\"showLoading | async\" class=\"spinner-container\" fxLayout=\"column\" fxLayoutAlign=\"center center\">\n      <mat-progress-spinner mode=\"indeterminate\" strokeWidth=\"3\"></mat-progress-spinner>\n    </div>\n  ",
                    styles: ["\n    .o-form-layout-tabgroup .mat-tab-group .mat-tab-label span.tab-label{width:100%;max-width:120px;text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.o-form-layout-tabgroup .mat-tab-group .mat-tab-label span.tab-label.modified{font-weight:700}.o-form-layout-tabgroup .mat-tab-group .mat-tab-label span.tab-label.modified:after{content:'*'}.o-form-layout-tabgroup .mat-tab-group .mat-tab-label .mat-icon{height:16px;width:16px;font-size:16px;padding-left:6px;vertical-align:middle}.o-form-layout-tabgroup .mat-tab-group .mat-tab-body-wrapper{flex:1 1 auto}.o-form-layout-tabgroup .mat-tab-group o-form-toolbar{padding:0;top:0px !important}.o-form-layout-tabgroup .mat-tab-group o-form-toolbar .mat-toolbar{box-shadow:none;border-radius:0}.o-form-layout-tabgroup .spinner-container{position:absolute;top:0;left:0;right:0;bottom:0;z-index:500;visibility:visible;opacity:1;-moz-transition:opacity .25s linear;-webkit-transition:opacity .25s linear;transition:opacity .25s linear}\n  "],
                    encapsulation: ViewEncapsulation.None,
                    host: {
                        '[class.o-form-layout-tabgroup]': 'true'
                    }
                },] },
    ];
    OFormLayoutTabGroupComponent.ctorParameters = function () { return [
        { type: Injector },
        { type: ComponentFactoryResolver },
        { type: ViewContainerRef },
        { type: ElementRef }
    ]; };
    OFormLayoutTabGroupComponent.propDecorators = {
        tabGroup: [{ type: ViewChild, args: ['tabGroup',] }],
        tabsDirectives: [{ type: ViewChildren, args: [OFormLayoutManagerContentDirective,] }]
    };
    return OFormLayoutTabGroupComponent;
}());
export { OFormLayoutTabGroupComponent };
//# sourceMappingURL=o-form-layout-tabgroup.component.js.map