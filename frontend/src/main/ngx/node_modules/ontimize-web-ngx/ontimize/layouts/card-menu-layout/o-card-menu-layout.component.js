import { CommonModule } from '@angular/common';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Injector, NgModule, ViewEncapsulation } from '@angular/core';
import { OCardMenuItemModule } from '../../components/card-menu-item/o-card-menu-item.component';
import { AppMenuService, OTranslateService } from '../../services';
import { OSharedModule } from '../../shared/shared.module';
export var DEFAULT_INPUTS_O_MENU_LAYOUT = [
    'parentMenuId : parent-menu-id'
];
export var DEFAULT_OUTPUTS_O_MENU_LAYOUT = [];
var OCardMenuLayoutComponent = (function () {
    function OCardMenuLayoutComponent(injector, cd) {
        var _this = this;
        this.injector = injector;
        this.cd = cd;
        this.translateService = this.injector.get(OTranslateService);
        this.appMenuService = this.injector.get(AppMenuService);
        this.menuRoots = this.appMenuService.getMenuRoots();
        this.translateServiceSubscription = this.translateService.onLanguageChanged.subscribe(function () {
            _this.cd.detectChanges();
        });
    }
    OCardMenuLayoutComponent.prototype.ngAfterViewInit = function () {
        this.setCardMenuItems();
    };
    OCardMenuLayoutComponent.prototype.ngOnDestroy = function () {
        if (this.translateServiceSubscription) {
            this.translateServiceSubscription.unsubscribe();
        }
    };
    OCardMenuLayoutComponent.prototype.setCardMenuItems = function () {
        var _this = this;
        var cardItemsAux = [];
        if (!this.parentMenuId) {
            cardItemsAux = this.menuRoots.filter(function (item) { return !_this.appMenuService.isMenuGroup(item); });
        }
        else {
            cardItemsAux = this.getItemsFilteredByParentId(this.menuRoots);
        }
        this.cardItems = cardItemsAux;
    };
    Object.defineProperty(OCardMenuLayoutComponent.prototype, "cardItems", {
        get: function () {
            return this.cardItemsArray;
        },
        set: function (val) {
            this.cardItemsArray = val;
            this.cd.detectChanges();
        },
        enumerable: true,
        configurable: true
    });
    OCardMenuLayoutComponent.prototype.getItemsFilteredByParentId = function (array) {
        var _this = this;
        var result;
        var groups = array.filter(function (item) { return _this.appMenuService.isMenuGroup(item); });
        for (var i = 0, len = groups.length; i < len; i++) {
            var menuGroup = groups[i];
            if (menuGroup.id === this.parentMenuId) {
                result = menuGroup.items;
                break;
            }
            else {
                result = this.getItemsFilteredByParentId(menuGroup.items);
            }
        }
        return result;
    };
    OCardMenuLayoutComponent.DEFAULT_INPUTS_O_MENU_LAYOUT = DEFAULT_INPUTS_O_MENU_LAYOUT;
    OCardMenuLayoutComponent.DEFAULT_OUTPUTS_O_MENU_LAYOUT = DEFAULT_OUTPUTS_O_MENU_LAYOUT;
    OCardMenuLayoutComponent.decorators = [
        { type: Component, args: [{
                    moduleId: module.id,
                    selector: 'o-card-menu-layout',
                    template: "\n    <div fxLayout=\"row wrap\" fxLayout.lt-md=\"column\" fxLayoutAlign=\"space-around center\" fxLayoutGap.gt-sm=\"8px\" fxFill>\n      <ng-container *ngFor=\"let item of cardItems\">\n        <o-card-menu-item *ngIf=\"item['show-in-card-menu'] !== false\" button-text=\"CARD_MENU_LAYOUT.BUTTON_TEXT\" [route]=\"item.route\"\n          [title]=\"item.name\" [tooltip]=\"item.tooltip\" [icon]=\"item.icon\" [image]=\"item.image\" [detail-component]=\"item.component\"\n          [detail-component-inputs]=\"item['component-inputs']\" [ngClass]=\"item.class\">\n        </o-card-menu-item>\n      </ng-container>\n      <ng-content select=\"o-card-menu-item\"></ng-content>\n    </div>\n  ",
                    styles: ["\n    .o-menu-layout{display:block;height:100%;width:100%}.o-menu-layout .o-card-menu-item{height:45%;margin:16px 0;max-width:290px;min-height:180px;min-width:290px}.o-menu-layout .o-card-menu-item.compact{height:30%;max-height:250px}\n  "],
                    inputs: DEFAULT_INPUTS_O_MENU_LAYOUT,
                    outputs: DEFAULT_OUTPUTS_O_MENU_LAYOUT,
                    encapsulation: ViewEncapsulation.None,
                    host: {
                        '[class.o-menu-layout]': 'true'
                    },
                    changeDetection: ChangeDetectionStrategy.OnPush
                },] },
    ];
    OCardMenuLayoutComponent.ctorParameters = function () { return [
        { type: Injector },
        { type: ChangeDetectorRef }
    ]; };
    return OCardMenuLayoutComponent;
}());
export { OCardMenuLayoutComponent };
var OCardMenuLayoutModule = (function () {
    function OCardMenuLayoutModule() {
    }
    OCardMenuLayoutModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [OCardMenuLayoutComponent],
                    imports: [CommonModule, OCardMenuItemModule, OSharedModule],
                    exports: [OCardMenuLayoutComponent]
                },] },
    ];
    return OCardMenuLayoutModule;
}());
export { OCardMenuLayoutModule };
//# sourceMappingURL=o-card-menu-layout.component.js.map