{"version":3,"file":"sqltypes.js","sourceRoot":"","sources":["../../../tmp/ontimize/util/sqltypes.ts"],"names":[],"mappings":"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","sourcesContent":["export class SQLTypes {\n\n  /**\n   * <P>The constant in the Java programming language, sometimes referred\n   * to as a type code, that identifies the generic SQL type\n   * <code>BIT</code>.\n   */\n  public static BIT = -7;\n\n  /**\n   * <P>The constant in the Java programming language, sometimes referred\n   * to as a type code, that identifies the generic SQL type\n   * <code>TINYINT</code>.\n   */\n  public static TINYINT = -6;\n\n  /**\n   * <P>The constant in the Java programming language, sometimes referred\n   * to as a type code, that identifies the generic SQL type\n   * <code>SMALLINT</code>.\n   */\n  public static SMALLINT = 5;\n\n  /**\n   * <P>The constant in the Java programming language, sometimes referred\n   * to as a type code, that identifies the generic SQL type\n   * <code>INTEGER</code>.\n   */\n  public static INTEGER = 4;\n\n  /**\n   * <P>The constant in the Java programming language, sometimes referred\n   * to as a type code, that identifies the generic SQL type\n   * <code>BIGINT</code>.\n   */\n  public static BIGINT = -5;\n\n  /**\n   * <P>The constant in the Java programming language, sometimes referred\n   * to as a type code, that identifies the generic SQL type\n   * <code>FLOAT</code>.\n   */\n  public static FLOAT = 6;\n\n  /**\n   * <P>The constant in the Java programming language, sometimes referred\n   * to as a type code, that identifies the generic SQL type\n   * <code>REAL</code>.\n   */\n  public static REAL = 7;\n\n  /**\n   * <P>The constant in the Java programming language, sometimes referred\n   * to as a type code, that identifies the generic SQL type\n   * <code>DOUBLE</code>.\n   */\n  public static DOUBLE = 8;\n\n  /**\n   * <P>The constant in the Java programming language, sometimes referred\n   * to as a type code, that identifies the generic SQL type\n   * <code>NUMERIC</code>.\n   */\n  public static NUMERIC = 2;\n\n  /**\n   * <P>The constant in the Java programming language, sometimes referred\n   * to as a type code, that identifies the generic SQL type\n   * <code>DECIMAL</code>.\n   */\n  public static DECIMAL = 3;\n\n  /**\n   * <P>The constant in the Java programming language, sometimes referred\n   * to as a type code, that identifies the generic SQL type\n   * <code>CHAR</code>.\n   */\n  public static CHAR = 1;\n\n  /**\n   * <P>The constant in the Java programming language, sometimes referred\n   * to as a type code, that identifies the generic SQL type\n   * <code>VARCHAR</code>.\n   */\n  public static VARCHAR = 12;\n\n  /**\n   * <P>The constant in the Java programming language, sometimes referred\n   * to as a type code, that identifies the generic SQL type\n   * <code>LONGVARCHAR</code>.\n   */\n  public static LONGVARCHAR = -1;\n\n  /**\n   * <P>The constant in the Java programming language, sometimes referred\n   * to as a type code, that identifies the generic SQL type\n   * <code>DATE</code>.\n   */\n  public static DATE = 91;\n\n  /**\n   * <P>The constant in the Java programming language, sometimes referred\n   * to as a type code, that identifies the generic SQL type\n   * <code>TIME</code>.\n   */\n  public static TIME = 92;\n\n  /**\n   * <P>The constant in the Java programming language, sometimes referred\n   * to as a type code, that identifies the generic SQL type\n   * <code>TIMESTAMP</code>.\n   */\n  public static TIMESTAMP = 93;\n\n  /**\n   * <P>The constant in the Java programming language, sometimes referred\n   * to as a type code, that identifies the generic SQL type\n   * <code>BINARY</code>.\n   */\n  public static BINARY = -2;\n\n  /**\n   * <P>The constant in the Java programming language, sometimes referred\n   * to as a type code, that identifies the generic SQL type\n   * <code>VARBINARY</code>.\n   */\n  public static VARBINARY = -3;\n\n  /**\n   * <P>The constant in the Java programming language, sometimes referred\n   * to as a type code, that identifies the generic SQL type\n   * <code>LONGVARBINARY</code>.\n   */\n  public static LONGVARBINARY = -4;\n\n  /**\n   * <P>The constant in the Java programming language\n   * that identifies the generic SQL value\n   * <code>NULL</code>.\n   */\n  public static NULL = 0;\n\n  /**\n   * The constant in the Java programming language that indicates\n   * that the SQL type is database-specific and\n   * gets mapped to a Java object that can be accessed via\n   * the methods <code>getObject</code> and <code>setObject</code>.\n   */\n  public static OTHER = 1111;\n\n  /**\n   * The constant in the Java programming language, sometimes referred to\n   * as a type code, that identifies the generic SQL type\n   * <code>JAVA_OBJECT</code>.\n   * @since 1.2\n   */\n  public static JAVA_OBJECT = 2000;\n\n  /**\n   * The constant in the Java programming language, sometimes referred to\n   * as a type code, that identifies the generic SQL type\n   * <code>DISTINCT</code>.\n   * @since 1.2\n   */\n  public static DISTINCT = 2001;\n\n  /**\n   * The constant in the Java programming language, sometimes referred to\n   * as a type code, that identifies the generic SQL type\n   * <code>STRUCT</code>.\n   * @since 1.2\n   */\n  public static STRUCT = 2002;\n\n  /**\n   * The constant in the Java programming language, sometimes referred to\n   * as a type code, that identifies the generic SQL type\n   * <code>ARRAY</code>.\n   * @since 1.2\n   */\n  public static ARRAY = 2003;\n\n  /**\n   * The constant in the Java programming language, sometimes referred to\n   * as a type code, that identifies the generic SQL type\n   * <code>BLOB</code>.\n   * @since 1.2\n   */\n  public static BLOB = 2004;\n\n  /**\n   * The constant in the Java programming language, sometimes referred to\n   * as a type code, that identifies the generic SQL type\n   * <code>CLOB</code>.\n   * @since 1.2\n   */\n  public static CLOB = 2005;\n\n  /**\n   * The constant in the Java programming language, sometimes referred to\n   * as a type code, that identifies the generic SQL type\n   * <code>REF</code>.\n   * @since 1.2\n   */\n  public static REF = 2006;\n\n  /**\n   * The constant in the Java programming language, somtimes referred to\n   * as a type code, that identifies the generic SQL type <code>DATALINK</code>.\n   *\n   * @since 1.4\n   */\n  public static DATALINK = 70;\n\n  /**\n   * The constant in the Java programming language, somtimes referred to\n   * as a type code, that identifies the generic SQL type <code>BOOLEAN</code>.\n   *\n   * @since 1.4\n   */\n  public static BOOLEAN = 16;\n\n  // ------------------------- JDBC 4.0 -----------------------------------\n\n  /**\n   * The constant in the Java programming language, sometimes referred to\n   * as a type code, that identifies the generic SQL type <code>ROWID</code>\n   *\n   * @since 1.6\n   *\n   */\n  public static ROWID = -8;\n\n  /**\n   * The constant in the Java programming language, sometimes referred to\n   * as a type code, that identifies the generic SQL type <code>NCHAR</code>\n   *\n   * @since 1.6\n   */\n  public static NCHAR = -15;\n\n  /**\n   * The constant in the Java programming language, sometimes referred to\n   * as a type code, that identifies the generic SQL type <code>NVARCHAR</code>.\n   *\n   * @since 1.6\n   */\n  public static NVARCHAR = -9;\n\n  /**\n   * The constant in the Java programming language, sometimes referred to\n   * as a type code, that identifies the generic SQL type <code>LONGNVARCHAR</code>.\n   *\n   * @since 1.6\n   */\n  public static LONGNVARCHAR = -16;\n\n  /**\n   * The constant in the Java programming language, sometimes referred to\n   * as a type code, that identifies the generic SQL type <code>NCLOB</code>.\n   *\n   * @since 1.6\n   */\n  public static NCLOB = 2011;\n\n  public static BASE64 = 6464;\n\n  /**\n   * The constant in the Java programming language, sometimes referred to\n   * as a type code, that identifies the generic SQL type <code>XML</code>.\n   *\n   * @since 1.6\n   */\n  public static SQLXML = 2009;\n\n  public static getSQLTypeValue(type: string): number {\n    let value: number;\n    type = type ? type.toUpperCase() : '';\n    switch (type) {\n      case 'BIT':\n        value = SQLTypes.BIT;\n        break;\n      case 'TINYINT':\n        value = SQLTypes.TINYINT;\n        break;\n      case 'SMALLINT':\n        value = SQLTypes.SMALLINT;\n        break;\n      case 'INTEGER':\n        value = SQLTypes.INTEGER;\n        break;\n      case 'BIGINT':\n        value = SQLTypes.BIGINT;\n        break;\n      case 'FLOAT':\n        value = SQLTypes.FLOAT;\n        break;\n      case 'REAL':\n        value = SQLTypes.REAL;\n        break;\n      case 'DOUBLE':\n        value = SQLTypes.DOUBLE;\n        break;\n      case 'NUMERIC':\n        value = SQLTypes.NUMERIC;\n        break;\n      case 'DECIMAL':\n        value = SQLTypes.DECIMAL;\n        break;\n      case 'CHAR':\n        value = SQLTypes.CHAR;\n        break;\n      case 'VARCHAR':\n        value = SQLTypes.VARCHAR;\n        break;\n      case 'LONGVARCHAR':\n        value = SQLTypes.LONGVARCHAR;\n        break;\n      case 'DATE':\n        value = SQLTypes.DATE;\n        break;\n      case 'TIME':\n        value = SQLTypes.TIME;\n        break;\n      case 'TIMESTAMP':\n        value = SQLTypes.TIMESTAMP;\n        break;\n      case 'BINARY':\n        value = SQLTypes.BINARY;\n        break;\n      case 'VARBINARY':\n        value = SQLTypes.VARBINARY;\n        break;\n      case 'LONGVARBINARY':\n        value = SQLTypes.LONGVARBINARY;\n        break;\n      case 'NULL':\n        value = SQLTypes.NULL;\n        break;\n      case 'OTHER':\n        value = SQLTypes.OTHER;\n        break;\n      case 'JAVA_OBJECT':\n        value = SQLTypes.JAVA_OBJECT;\n        break;\n      case 'DISTINCT':\n        value = SQLTypes.DISTINCT;\n        break;\n      case 'STRUCT':\n        value = SQLTypes.STRUCT;\n        break;\n      case 'ARRAY':\n        value = SQLTypes.ARRAY;\n        break;\n      case 'BLOB':\n        value = SQLTypes.BLOB;\n        break;\n      case 'CLOB':\n        value = SQLTypes.CLOB;\n        break;\n      case 'REF':\n        value = SQLTypes.REF;\n        break;\n      case 'DATALINK':\n        value = SQLTypes.DATALINK;\n        break;\n      case 'BOOLEAN':\n        value = SQLTypes.BOOLEAN;\n        break;\n      case 'ROWID':\n        value = SQLTypes.ROWID;\n        break;\n      case 'NCHAR':\n        value = SQLTypes.NCHAR;\n        break;\n      case 'NVARCHAR':\n        value = SQLTypes.NVARCHAR;\n        break;\n      case 'LONGNVARCHAR':\n        value = SQLTypes.LONGNVARCHAR;\n        break;\n      case 'NCLOB':\n        value = SQLTypes.NCLOB;\n        break;\n      case 'SQLXML':\n        value = SQLTypes.SQLXML;\n        break;\n      case 'BASE64':\n        value = SQLTypes.BASE64;\n        break;\n      default:\n        value = SQLTypes.OTHER;\n        break;\n    }\n    return value;\n  }\n\n  public static getSQLTypeKey(type: number): string {\n    let value: string;\n    switch (type) {\n      case SQLTypes.BIT:\n        value = 'BIT';\n        break;\n      case SQLTypes.TINYINT:\n        value = 'TINYINT';\n        break;\n      case SQLTypes.SMALLINT:\n        value = 'SMALLINT';\n        break;\n      case SQLTypes.INTEGER:\n        value = 'INTEGER';\n        break;\n      case SQLTypes.BIGINT:\n        value = 'BIGINT';\n        break;\n      case SQLTypes.FLOAT:\n        value = 'FLOAT';\n        break;\n      case SQLTypes.REAL:\n        value = 'REAL';\n        break;\n      case SQLTypes.DOUBLE:\n        value = 'DOUBLE';\n        break;\n      case SQLTypes.NUMERIC:\n        value = 'NUMERIC';\n        break;\n      case SQLTypes.DECIMAL:\n        value = 'DECIMAL';\n        break;\n      case SQLTypes.CHAR:\n        value = 'CHAR';\n        break;\n      case SQLTypes.VARCHAR:\n        value = 'VARCHAR';\n        break;\n      case SQLTypes.LONGVARCHAR:\n        value = 'LONGVARCHAR';\n        break;\n      case SQLTypes.DATE:\n        value = 'DATE';\n        break;\n      case SQLTypes.TIME:\n        value = 'TIME';\n        break;\n      case SQLTypes.TIMESTAMP:\n        value = 'TIMESTAMP';\n        break;\n      case SQLTypes.BINARY:\n        value = 'BINARY';\n        break;\n      case SQLTypes.VARBINARY:\n        value = 'VARBINARY';\n        break;\n      case SQLTypes.LONGVARBINARY:\n        value = 'LONGVARBINARY';\n        break;\n      case SQLTypes.NULL:\n        value = 'NULL';\n        break;\n      case SQLTypes.OTHER:\n        value = 'OTHER';\n        break;\n      case SQLTypes.JAVA_OBJECT:\n        value = 'JAVA_OBJECT';\n        break;\n      case SQLTypes.DISTINCT:\n        value = 'DISTINCT';\n        break;\n      case SQLTypes.STRUCT:\n        value = 'STRUCT';\n        break;\n      case SQLTypes.ARRAY:\n        value = 'ARRAY';\n        break;\n      case SQLTypes.BLOB:\n        value = 'BLOB';\n        break;\n      case SQLTypes.CLOB:\n        value = 'CLOB';\n        break;\n      case SQLTypes.REF:\n        value = 'REF';\n        break;\n      case SQLTypes.DATALINK:\n        value = 'DATALINK';\n        break;\n      case SQLTypes.BOOLEAN:\n        value = 'BOOLEAN';\n        break;\n      case SQLTypes.ROWID:\n        value = 'ROWID';\n        break;\n      case SQLTypes.NCHAR:\n        value = 'NCHAR';\n        break;\n      case SQLTypes.NVARCHAR:\n        value = 'NVARCHAR';\n        break;\n      case SQLTypes.LONGNVARCHAR:\n        value = 'LONGNVARCHAR';\n        break;\n      case SQLTypes.NCLOB:\n        value = 'NCLOB';\n        break;\n      case SQLTypes.SQLXML:\n        value = 'SQLXML';\n        break;\n      case SQLTypes.BASE64:\n        value = 'BASE64';\n        break;\n      default:\n        value = 'OTHER';\n        break;\n    }\n    return value;\n  }\n\n  public static parseUsingSQLType(arg: any, type: string): any {\n    let value = arg;\n    type = type ? type.toUpperCase() : '';\n    try {\n      switch (type) {\n        case 'TINYINT':\n        case 'SMALLINT':\n        case 'INTEGER':\n        case 'BIGINT':\n          value = Number(arg);\n          break;\n        case 'FLOAT':\n        case 'REAL':\n        case 'DOUBLE':\n        case 'NUMERIC':\n        case 'DECIMAL':\n          value = parseFloat(arg);\n        default:\n          break;\n      }\n    } catch (err) {\n      console.error('SQLTypes.parseUsingSQLType error');\n    }\n    return value;\n  }\n\n  public static isNumericSQLType(arg: number): boolean {\n    return [\n      SQLTypes.TINYINT,\n      SQLTypes.SMALLINT,\n      SQLTypes.INTEGER,\n      SQLTypes.BIGINT,\n      SQLTypes.FLOAT,\n      SQLTypes.REAL,\n      SQLTypes.DOUBLE,\n      SQLTypes.NUMERIC,\n      SQLTypes.DECIMAL\n    ].indexOf(arg) !== -1;\n  }\n\n}\n"]}