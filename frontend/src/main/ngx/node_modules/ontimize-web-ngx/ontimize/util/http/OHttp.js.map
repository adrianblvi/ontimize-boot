{"version":3,"file":"OHttp.js","sourceRoot":"","sources":["../../../../tmp/ontimize/util/http/OHttp.ts"],"names":[],"mappings":";;;;;;;;;;AACA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EACL,IAAI,EAEJ,cAAc,EACd,OAAO,EAEP,iBAAiB,EAClB,MAAM,eAAe,CAAC;AAGvB,IAAM,cAAc,GAAG,UAAC,OAA2B;IACjD,IAAI,UAAU,GAAG,IAAI,cAAc,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;IACvD,IAAI,UAAU,GAAG,IAAI,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;IAKjD,UAAU,CAAC,GAAG,CAAC,6BAA6B,EAAE,GAAG,CAAC,CAAC;IACnD,UAAU,CAAC,GAAG,CAAC,QAAQ,EAAE,kBAAkB,CAAC,CAAC;IAC7C,UAAU,CAAC,GAAG,CAAC,cAAc,EAAE,gCAAgC,CAAC,CAAC;IACjE,UAAU,CAAC,OAAO,GAAG,UAAU,CAAC;IAChC,OAAO,UAAU,CAAC;AACpB,CAAC,CAAC;;AAEF;IAC2B,yBAAI;IAE7B,eAAY,QAA2B,EAAE,eAA+B;eACtE,kBAAM,QAAQ,EAAE,eAAe,CAAC;IAClC,CAAC;IAED,mBAAG,GAAH,UAAI,GAAW,EAAE,OAA4B;QAC3C,OAAO,iBAAM,GAAG,YAAC,GAAG,EAAE,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC;IACjD,CAAC;IAED,oBAAI,GAAJ,UAAK,GAAW,EAAE,IAAY,EAAE,OAA4B;QAC1D,OAAO,iBAAM,IAAI,YAAC,GAAG,EAAE,IAAI,EAAE,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC;IACxD,CAAC;IAED,mBAAG,GAAH,UAAI,GAAW,EAAE,IAAY,EAAE,OAA4B;QACzD,OAAO,iBAAM,GAAG,YAAC,GAAG,EAAE,IAAI,EAAE,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC;IACvD,CAAC;IAED,sBAAM,GAAN,UAAO,GAAW,EAAE,OAA4B;QAC9C,OAAO,iBAAM,MAAM,YAAC,GAAG,EAAE,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC;IACpD,CAAC;IAED,qBAAK,GAAL,UAAM,GAAW,EAAE,IAAY,EAAE,OAA4B;QAC3D,OAAO,iBAAM,KAAK,YAAC,GAAG,EAAE,IAAI,EAAE,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC;IACzD,CAAC;IAED,oBAAI,GAAJ,UAAK,GAAW,EAAE,OAA4B;QAC5C,OAAO,iBAAM,IAAI,YAAC,GAAG,EAAE,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC;IAClD,CAAC;;gBA7BF,UAAU;;;gBAlBT,iBAAiB;gBAHjB,cAAc;;IAoDhB,YAAC;CAAA,AA/BD,CAC2B,IAAI,GA8B9B;SA9BY,KAAK","sourcesContent":["import { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport {\n  Http,\n  RequestOptionsArgs,\n  RequestOptions,\n  Headers,\n  Response,\n  ConnectionBackend\n} from '@angular/http';\n\n\nconst mergeAuthToken = (options: RequestOptionsArgs) => {\n  let newOptions = new RequestOptions({}).merge(options);\n  let newHeaders = new Headers(newOptions.headers);\n  /*newHeaders.set('X-AUTH-TOKEN', localStorage.getItem('jwt'));\n  newHeaders.set('Accept', 'application/json');\n  newHeaders.set('Content-Type', 'application/json');\n  */\n  newHeaders.set('Access-Control-Allow-Origin', '*');\n  newHeaders.set('Accept', 'application/json');\n  newHeaders.set('Content-Type', 'application/json;charset=UTF-8');\n  newOptions.headers = newHeaders;\n  return newOptions;\n};\n\n@Injectable()\nexport class OHttp extends Http {\n\n  constructor(_backend: ConnectionBackend, _defaultOptions: RequestOptions) {\n    super(_backend, _defaultOptions);\n  }\n\n  get(url: string, options?: RequestOptionsArgs): Observable<Response> {\n    return super.get(url, mergeAuthToken(options));\n  }\n\n  post(url: string, body: string, options?: RequestOptionsArgs): Observable<Response> {\n    return super.post(url, body, mergeAuthToken(options));\n  }\n\n  put(url: string, body: string, options?: RequestOptionsArgs): Observable<Response> {\n    return super.put(url, body, mergeAuthToken(options));\n  }\n\n  delete(url: string, options?: RequestOptionsArgs): Observable<Response> {\n    return super.delete(url, mergeAuthToken(options));\n  }\n\n  patch(url: string, body: string, options?: RequestOptionsArgs): Observable<Response> {\n    return super.patch(url, body, mergeAuthToken(options));\n  }\n\n  head(url: string, options?: RequestOptionsArgs): Observable<Response> {\n    return super.head(url, mergeAuthToken(options));\n  }\n\n}\n"]}