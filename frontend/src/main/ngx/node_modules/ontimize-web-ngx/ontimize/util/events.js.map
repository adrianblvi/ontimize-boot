{"version":3,"file":"events.js","sourceRoot":"","sources":["../../../tmp/ontimize/util/events.ts"],"names":[],"mappings":"AAkBA;IAAA;QACU,cAAS,GAAe,EAAE,CAAC;IA4ErC,CAAC;IAnEC,0BAAS,GAAT,UAAU,KAAK;QAAf,iBAOC;QAPgB,kBAAW;aAAX,UAAW,EAAX,qBAAW,EAAX,IAAW;YAAX,iCAAW;;QAC1B,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE;YAC1B,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;SAC5B;QACD,QAAQ,CAAC,OAAO,CAAC,UAAC,OAAO;YACvB,KAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;IACL,CAAC;IAWD,4BAAW,GAAX,UAAY,KAAK,EAAE,OAAO;QACxB,IAAI,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QAC9B,IAAI,CAAC,CAAC,EAAE;YAEN,OAAO,KAAK,CAAC;SACd;QAED,IAAI,CAAC,OAAO,EAAE;YAEZ,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;YAC7B,OAAO,IAAI,CAAC;SACb;QAGD,IAAI,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAE3B,IAAI,CAAC,GAAG,CAAC,EAAE;YAET,OAAO,KAAK,CAAC;SACd;QAED,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAGf,IAAI,CAAC,CAAC,CAAC,MAAM,EAAE;YACb,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;SAC9B;QAED,OAAO,IAAI,CAAC;IACd,CAAC;IAQD,wBAAO,GAAP,UAAQ,KAAK;QAAE,cAAO;aAAP,UAAO,EAAP,qBAAO,EAAP,IAAO;YAAP,6BAAO;;QACpB,IAAI,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QAC9B,IAAI,CAAC,CAAC,EAAE;YACN,OAAO,IAAI,CAAC;SACb;QAED,IAAI,SAAS,GAAG,EAAE,CAAC;QACnB,CAAC,CAAC,OAAO,CAAC,UAAC,OAAO;YAChB,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;QAChC,CAAC,CAAC,CAAC;QACH,OAAO,SAAS,CAAC;IACnB,CAAC;IACH,aAAC;AAAD,CAAC,AA7ED,IA6EC","sourcesContent":["/**\n * Events is a pub/sub style event system for sending and responding to application-level\n * events across your app.\n * @usage\n * ```ts\n * // first page (publish an event when a user is created)\n * function createUser(user) {\n *   console.log('User created!')\n *   events.publish('user:created', user);\n * }\n *\n * // second page (listen for the user created event)\n * events.subscribe('user:created', (user) => {\n *   console.log('Welcome', user);\n * });\n *\n * ```\n */\nexport class Events {\n  private _channels: Array<any> = [];\n\n  /**\n   * Subscribe to an event topic. Events that get posted to that topic\n   * will trigger the provided handler.\n   *\n   * @param topic the topic to subscribe to\n   * @param handler the event handler\n   */\n  subscribe(topic, ...handlers) {\n    if (!this._channels[topic]) {\n      this._channels[topic] = [];\n    }\n    handlers.forEach((handler) => {\n      this._channels[topic].push(handler);\n    });\n  }\n\n  /**\n   * Unsubscribe from the given topic. Your handler will\n   * no longer receive events published to this topic.\n   *\n   * @param topic the topic to unsubscribe from\n   * @param handler the event handler\n   *\n   * @return true if a handler was removed\n   */\n  unsubscribe(topic, handler) {\n    let t = this._channels[topic];\n    if (!t) {\n      // Wasn't found, wasn't removed\n      return false;\n    }\n\n    if (!handler) {\n      // Remove all handlers for this topic\n      delete this._channels[topic];\n      return true;\n    }\n\n    // We need to find and remove a specific handler\n    let i = t.indexOf(handler);\n\n    if (i < 0) {\n      // Wasn't found, wasn't removed\n      return false;\n    }\n\n    t.splice(i, 1);\n\n    // If the channel is empty now, remove it from the channel map\n    if (!t.length) {\n      delete this._channels[topic];\n    }\n\n    return true;\n  }\n\n  /**\n   * Publish an event to the given topic.\n   *\n   * @param topic the topic to publish to\n   * @param eventData the data to send as the event\n   */\n  publish(topic, ...args) {\n    var t = this._channels[topic];\n    if (!t) {\n      return null;\n    }\n\n    let responses = [];\n    t.forEach((handler) => {\n      responses.push(handler(args));\n    });\n    return responses;\n  }\n}\n"]}