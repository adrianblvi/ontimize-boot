import { Observable } from 'rxjs';
import { IFormDataComponent } from '../components/o-form-data-component.class';
export interface IDataService {
    getDefaultServiceConfiguration(serviceName?: string): Object;
    configureService(config: any): void;
    query(kv?: Object, av?: Array<string>, entity?: string, sqltypes?: Object): Observable<any>;
    advancedQuery(kv?: Object, av?: Array<string>, entity?: string, sqltypes?: Object, offset?: number, pagesize?: number, orderby?: Array<Object>): Observable<any>;
    insert(av: Object, entity?: string, sqltypes?: Object): Observable<any>;
    update(kv: Object, av: Object, entity?: string, sqltypes?: Object): Observable<any>;
    'delete'(kv: Object, entity?: string, sqltypes?: Object): Observable<any>;
}
export interface IPermissionsService {
    loadPermissions(): any;
}
export interface IAuthService {
    startsession(user: string, password: string): Observable<any>;
    endsession(user: string, sessionId: number): Observable<any>;
    redirectLogin?(sessionExpired?: boolean): any;
}
export declare class Util {
    static isObject(val: any): boolean;
    static isArray(val: any): boolean;
    static parseBoolean(value: string, defaultValue?: boolean): boolean;
    static parseArray(value: string, excludeRepeated?: boolean): string[];
    static parseParentKeysEquivalences(pKeysArray: Array<string>, separator?: string): Object;
    static encodeParentKeys(parentKeys: Object): string;
    static decodeParentKeys(parentKeys: string): Object;
    static isArrayEmpty(array: any[]): boolean;
    static isDataService(arg: any): arg is IDataService;
    static isPermissionsService(arg: any): arg is IPermissionsService;
    static isFormDataComponent(arg: any): arg is IFormDataComponent;
    static isEquivalent(a: any, b: any): boolean;
    static equals(o1: any, o2: any): boolean;
    static isDefined(value: any): boolean;
    static normalizeString(value: string, toLowerCase?: boolean): string;
    static flatten(array: Array<any>): Array<any>;
    static getValuesFromObject(obj?: Object): Array<any>;
    static parseIconPosition(value: string, defaultValue?: string): string;
    static copyToClipboard(data: string): void;
    static checkPixelsValueString(value: string): boolean;
    static extractPixelsValue(value: any, defaultValue?: number): number;
    static parseOInputsOptions(elRef: any, oInputsOptions: any): void;
    static escapeSpecialCharacter(S: string): string;
    static differenceArrays(array1: Array<any>, array2: Array<any>): Array<any>;
}
