import { Util } from './util';
var PermissionsUtils = (function () {
    function PermissionsUtils() {
    }
    PermissionsUtils.checkEnabledPermission = function (permission) {
        if (Util.isDefined(permission) && permission.enabled === false) {
            console.warn('MESSAGES.OPERATION_NOT_ALLOWED_PERMISSION');
            return false;
        }
        return true;
    };
    PermissionsUtils.registerDisabledChangesInDom = function (nativeElement, args) {
        var callback = args && args.callback ? args.callback : PermissionsUtils.setDisabledDOMElement;
        var checkStringValue = args && args.checkStringValue ? true : false;
        if (!Util.isDefined(nativeElement)) {
            return undefined;
        }
        var mutationObserver = new MutationObserver(function (mutations) {
            var mutation = mutations[0];
            if (mutation.type === 'attributes' && mutation.attributeName === 'disabled') {
                var attribute = mutation.target.attributes.getNamedItem('disabled');
                if (attribute === null || (checkStringValue && attribute.value !== 'true')) {
                    callback(mutation);
                }
            }
        });
        mutationObserver.observe(nativeElement, {
            attributes: true,
            attributeFilter: ['disabled']
        });
        return mutationObserver;
    };
    PermissionsUtils.setDisabledDOMElement = function (mutation) {
        var element = mutation.target;
        element.setAttribute('disabled', 'true');
    };
    PermissionsUtils.ACTION_REFRESH = 'refresh';
    PermissionsUtils.ACTION_INSERT = 'insert';
    PermissionsUtils.ACTION_UPDATE = 'update';
    PermissionsUtils.ACTION_DELETE = 'delete';
    PermissionsUtils.STANDARD_ACTIONS = [
        PermissionsUtils.ACTION_REFRESH,
        PermissionsUtils.ACTION_INSERT,
        PermissionsUtils.ACTION_UPDATE,
        PermissionsUtils.ACTION_DELETE
    ];
    return PermissionsUtils;
}());
export { PermissionsUtils };
//# sourceMappingURL=permissions.js.map