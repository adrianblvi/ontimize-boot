var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Injectable } from '@angular/core';
import { Http, RequestOptions, Headers, ConnectionBackend } from '@angular/http';
var mergeAuthToken = function (options) {
    var newOptions = new RequestOptions({}).merge(options);
    var newHeaders = new Headers(newOptions.headers);
    newHeaders.set('Access-Control-Allow-Origin', '*');
    newHeaders.set('Accept', 'application/json');
    newHeaders.set('Content-Type', 'application/json;charset=UTF-8');
    newOptions.headers = newHeaders;
    return newOptions;
};
var ɵ0 = mergeAuthToken;
var OHttp = (function (_super) {
    __extends(OHttp, _super);
    function OHttp(_backend, _defaultOptions) {
        return _super.call(this, _backend, _defaultOptions) || this;
    }
    OHttp.prototype.get = function (url, options) {
        return _super.prototype.get.call(this, url, mergeAuthToken(options));
    };
    OHttp.prototype.post = function (url, body, options) {
        return _super.prototype.post.call(this, url, body, mergeAuthToken(options));
    };
    OHttp.prototype.put = function (url, body, options) {
        return _super.prototype.put.call(this, url, body, mergeAuthToken(options));
    };
    OHttp.prototype.delete = function (url, options) {
        return _super.prototype.delete.call(this, url, mergeAuthToken(options));
    };
    OHttp.prototype.patch = function (url, body, options) {
        return _super.prototype.patch.call(this, url, body, mergeAuthToken(options));
    };
    OHttp.prototype.head = function (url, options) {
        return _super.prototype.head.call(this, url, mergeAuthToken(options));
    };
    OHttp.decorators = [
        { type: Injectable },
    ];
    OHttp.ctorParameters = function () { return [
        { type: ConnectionBackend },
        { type: RequestOptions }
    ]; };
    return OHttp;
}(Http));
export { OHttp };
export { ɵ0 };
//# sourceMappingURL=OHttp.js.map