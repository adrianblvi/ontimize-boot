{"version":3,"file":"permissions-service.provider.js","sourceRoot":"","sources":["../../../../tmp/ontimize/services/permissions/permissions-service.provider.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,SAAS,EAAU,MAAM,yBAAyB,CAAC;AAC5D,OAAO,EAAE,IAAI,EAAE,MAAM,iBAAiB,CAAC;AACvC,OAAO,EAAE,4BAA4B,EAAE,MAAM,mCAAmC,CAAC;AACjF,OAAO,EAAE,0BAA0B,EAAE,MAAM,gCAAgC,CAAC;AAE5E;IAIE,mCAAsB,QAAkB;QAAlB,aAAQ,GAAR,QAAQ,CAAU;QACtC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,gBAAgB,EAAE,CAAC;IAChE,CAAC;IAEM,2CAAO,GAAd;QACE,IAAM,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,sBAAsB,CAAC;QACvD,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,qBAAqB,KAAK,WAAW,EAAE;YACzE,OAAO,IAAI,0BAA0B,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SACtD;aAAM,IAAI,uBAAuB,KAAK,WAAW,EAAE;YAClD,OAAO,IAAI,4BAA4B,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SACxD;aAAM;YACL,IAAI,WAAW,GAAG,MAAM,CAAC,MAAM,CAAE,WAAmB,CAAC,SAAS,CAAC,CAAC;YAChE,WAAW,CAAC,KAAK,CAAC,WAAW,EAAE,IAAI,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YACzD,OAAO,WAAW,CAAC;SACpB;IACH,CAAC;IACH,gCAAC;AAAD,CAAC,AApBD,IAoBC;;AAED,MAAM,oCAAoC,QAAkB;IAC1D,OAAO,IAAI,yBAAyB,CAAC,QAAQ,CAAC,CAAC,OAAO,EAAE,CAAC;AAC3D,CAAC","sourcesContent":["import { Injector } from '@angular/core';\nimport { AppConfig, Config } from '../../config/app-config';\nimport { Util } from '../../util/util';\nimport { OntimizeEEPermissionsService } from './ontimize-ee-permissions.service';\nimport { OntimizePermissionsService } from './ontimize-permissions.service';\n\nexport class PermissionsServiceFactory {\n\n  protected config: Config;\n\n  constructor(protected injector: Injector) {\n    this.config = this.injector.get(AppConfig).getConfiguration();\n  }\n\n  public factory(): any {\n    const serviceType = this.config.permissionsServiceType;\n    if (!Util.isDefined(serviceType) || 'OntimizePermissions' === serviceType) {\n      return new OntimizePermissionsService(this.injector);\n    } else if ('OntimizeEEPermissions' === serviceType) {\n      return new OntimizeEEPermissionsService(this.injector);\n    } else {\n      let newInstance = Object.create((serviceType as any).prototype);\n      serviceType.apply(newInstance, new Array(this.injector));\n      return newInstance;\n    }\n  }\n}\n\nexport function permissionsServiceFactory(injector: Injector) {\n  return new PermissionsServiceFactory(injector).factory();\n}\n"]}