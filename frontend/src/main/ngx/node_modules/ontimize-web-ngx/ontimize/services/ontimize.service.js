import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Injectable, Injector } from '@angular/core';
import { Router } from '@angular/router';
import { Observable } from 'rxjs';
import { share } from 'rxjs/operators';
import { AppConfig } from '../config/app-config';
import { LoginService } from '../services';
import { Codes, ServiceUtils, Util } from '../utils';
import { OntimizeServiceResponseParser } from './parser/o-service-response.parser';
var OntimizeService = (function () {
    function OntimizeService(injector) {
        this.injector = injector;
        this.entity = '';
        this.kv = {};
        this.av = [];
        this.sqltypes = {};
        this.pagesize = 10;
        this.offset = 0;
        this.orderby = [];
        this.totalsize = -1;
        this._sessionid = -1;
        this.httpClient = this.injector.get(HttpClient);
        this._config = this.injector.get(AppConfig);
        this._appConfig = this._config.getConfiguration();
        this.responseParser = this.injector.get(OntimizeServiceResponseParser);
    }
    OntimizeService.prototype.getDefaultServiceConfiguration = function (serviceName) {
        var loginService = this.injector.get(LoginService);
        var configuration = this._config.getServiceConfiguration();
        var servConfig = {};
        if (serviceName && configuration.hasOwnProperty(serviceName)) {
            servConfig = configuration[serviceName];
        }
        servConfig[Codes.SESSION_KEY] = loginService.getSessionInfo();
        return servConfig;
    };
    OntimizeService.prototype.configureService = function (config) {
        this._urlBase = config.urlBase ? config.urlBase : this._appConfig['apiEndpoint'];
        this._sessionid = config.session ? config.session.id : -1;
        this._user = config.session ? config.session.user : '';
        this._startSessionPath = this._appConfig['startSessionPath'] ? this._appConfig['startSessionPath'] : '/startsession';
        if (config.entity !== undefined) {
            this.entity = config.entity;
        }
    };
    Object.defineProperty(OntimizeService.prototype, "urlBase", {
        get: function () {
            return this._urlBase;
        },
        set: function (value) {
            this._urlBase = value;
        },
        enumerable: true,
        configurable: true
    });
    OntimizeService.prototype.startsession = function (user, password) {
        var encodedPassword = encodeURIComponent(password);
        var url = this._urlBase + this._startSessionPath + '?user=' + user + '&password=' + encodedPassword;
        var self = this;
        var dataObservable = new Observable(function (_startSessionObserver) {
            self.httpClient.get(url).subscribe(function (resp) {
                if (resp >= 0) {
                    _startSessionObserver.next(resp);
                }
                else {
                    _startSessionObserver.error('Invalid user or password');
                }
            }, function (error) { return _startSessionObserver.error(error); });
        });
        return dataObservable.pipe(share());
    };
    OntimizeService.prototype.endsession = function (user, sessionId) {
        var url = this._urlBase + '/endsession?user=' + user + '&sessionid=' + sessionId;
        var self = this;
        var dataObservable = new Observable(function (_closeSessionObserver) {
            self.httpClient.get(url).subscribe(function (resp) {
                _closeSessionObserver.next(resp);
            }, function (error) {
                if (error.status === 401 || error.status === 0 || !error.ok) {
                    _closeSessionObserver.next(0);
                }
                else {
                    _closeSessionObserver.error(error);
                }
            });
        });
        return dataObservable.pipe(share());
    };
    OntimizeService.prototype.hassession = function (user, sessionId) {
        var url = this._urlBase + '/hassession?user=' + user + '&sessionid=' + sessionId;
        var _innerObserver;
        var dataObservable = new Observable(function (observer) { return _innerObserver = observer; }).pipe(share());
        this.httpClient.get(url).subscribe(function (resp) {
            _innerObserver.next(resp);
        }, function (error) { return _innerObserver.error(error); });
        return dataObservable.pipe(share());
    };
    OntimizeService.prototype.query = function (kv, av, entity, sqltypes) {
        entity = (Util.isDefined(entity)) ? entity : this.entity;
        kv = (Util.isDefined(kv)) ? kv : this.kv;
        av = (Util.isDefined(av)) ? av : this.av;
        sqltypes = (Util.isDefined(sqltypes)) ? sqltypes : this.sqltypes;
        var url = this._urlBase + '/query';
        var options = {
            headers: this.buildHeaders()
        };
        var body = JSON.stringify({
            user: this._user,
            sessionid: this._sessionid,
            type: 1,
            entity: entity,
            kv: kv,
            av: av,
            sqltypes: sqltypes
        });
        var self = this;
        var dataObservable = new Observable(function (_innerObserver) {
            self.httpClient.post(url, body, options).subscribe(function (resp) {
                self.parseSuccessfulQueryResponse(resp, _innerObserver);
            }, function (error) {
                self.parseUnsuccessfulQueryResponse(error, _innerObserver);
            }, function () { return _innerObserver.complete(); });
        });
        return dataObservable.pipe(share());
    };
    OntimizeService.prototype.advancedQuery = function (kv, av, entity, sqltypes, offset, pagesize, orderby) {
        entity = (Util.isDefined(entity)) ? entity : this.entity;
        kv = (Util.isDefined(kv)) ? kv : this.kv;
        av = (Util.isDefined(av)) ? av : this.av;
        sqltypes = (Util.isDefined(sqltypes)) ? sqltypes : this.sqltypes;
        orderby = (Util.isDefined(orderby)) ? orderby : this.orderby;
        offset = (Util.isDefined(offset)) ? offset : this.offset;
        pagesize = (Util.isDefined(pagesize)) ? pagesize : this.pagesize;
        var url = this._urlBase + '/advancedquery';
        var options = {
            headers: this.buildHeaders()
        };
        var body = JSON.stringify({
            user: this._user,
            sessionid: this._sessionid,
            type: 1,
            entity: entity,
            kv: kv,
            av: av,
            sqltypes: sqltypes,
            offset: offset,
            pageSize: pagesize,
            orderBy: orderby
        });
        var self = this;
        var dataObservable = new Observable(function (_innerObserver) {
            self.httpClient.post(url, body, options).subscribe(function (resp) {
                self.parseSuccessfulAdvancedQueryResponse(resp, _innerObserver);
            }, function (error) {
                self.parseUnsuccessfulAdvancedQueryResponse(error, _innerObserver);
            }, function () { return _innerObserver.complete(); });
        });
        return dataObservable.pipe(share());
    };
    OntimizeService.prototype.insert = function (av, entity, sqltypes) {
        if (av === void 0) { av = {}; }
        entity = (Util.isDefined(entity)) ? entity : this.entity;
        av = (Util.isDefined(av)) ? av : this.av;
        sqltypes = (Util.isDefined(sqltypes)) ? sqltypes : this.sqltypes;
        var url = this._urlBase + '/insert';
        var options = {
            headers: this.buildHeaders()
        };
        var body = JSON.stringify({
            user: this._user,
            sessionid: this._sessionid,
            entity: entity,
            av: av,
            sqltypes: sqltypes
        });
        var self = this;
        var dataObservable = new Observable(function (_innerObserver) {
            self.httpClient.post(url, body, options).subscribe(function (resp) {
                self.parseSuccessfulInsertResponse(resp, _innerObserver);
            }, function (error) {
                self.parseUnsuccessfulInsertResponse(error, _innerObserver);
            }, function () { return _innerObserver.complete(); });
        });
        return dataObservable.pipe(share());
    };
    OntimizeService.prototype.update = function (kv, av, entity, sqltypes) {
        if (kv === void 0) { kv = {}; }
        if (av === void 0) { av = {}; }
        entity = (Util.isDefined(entity)) ? entity : this.entity;
        kv = (Util.isDefined(kv)) ? kv : this.kv;
        av = (Util.isDefined(av)) ? av : this.av;
        sqltypes = (Util.isDefined(sqltypes)) ? sqltypes : this.sqltypes;
        var url = this._urlBase + '/update';
        var options = {
            headers: this.buildHeaders()
        };
        var body = JSON.stringify({
            user: this._user,
            sessionid: this._sessionid,
            entity: entity,
            kv: kv,
            av: av,
            sqltypes: sqltypes
        });
        var self = this;
        var dataObservable = new Observable(function (_innerObserver) {
            self.httpClient.post(url, body, options).subscribe(function (resp) {
                self.parseSuccessfulUpdateResponse(resp, _innerObserver);
            }, function (error) {
                self.parseUnsuccessfulUpdateResponse(error, _innerObserver);
            }, function () { return _innerObserver.complete(); });
        });
        return dataObservable.pipe(share());
    };
    OntimizeService.prototype.delete = function (kv, entity, sqltypes) {
        if (kv === void 0) { kv = {}; }
        entity = (Util.isDefined(entity)) ? entity : this.entity;
        kv = (Util.isDefined(kv)) ? kv : this.kv;
        sqltypes = (Util.isDefined(sqltypes)) ? sqltypes : this.sqltypes;
        var url = this._urlBase + '/delete';
        var options = {
            headers: this.buildHeaders()
        };
        var body = JSON.stringify({
            user: this._user,
            sessionid: this._sessionid,
            entity: entity,
            kv: kv,
            sqltypes: sqltypes
        });
        var self = this;
        var dataObservable = new Observable(function (_innerObserver) {
            self.httpClient.post(url, body, options).subscribe(function (resp) {
                self.parseSuccessfulDeleteResponse(resp, _innerObserver);
            }, function (error) {
                self.parseUnsuccessfulDeleteResponse(error, _innerObserver);
            }, function () { return _innerObserver.complete(); });
        });
        return dataObservable.pipe(share());
    };
    OntimizeService.prototype.redirectLogin = function (sessionExpired) {
        if (sessionExpired === void 0) { sessionExpired = false; }
        var router = this.injector.get(Router);
        var loginService = this.injector.get(LoginService);
        if (sessionExpired) {
            loginService.sessionExpired();
        }
        ServiceUtils.redirectLogin(router, sessionExpired);
    };
    OntimizeService.prototype.buildHeaders = function () {
        return new HttpHeaders({
            'Access-Control-Allow-Origin': '*',
            'Content-Type': 'application/json;charset=UTF-8'
        });
    };
    OntimizeService.prototype.parseSuccessfulResponse = function (resp, _innerObserver) {
        this.responseParser.parseSuccessfulResponse(resp, _innerObserver, this);
    };
    OntimizeService.prototype.parseSuccessfulQueryResponse = function (resp, _innerObserver) {
        this.parseSuccessfulResponse(resp, _innerObserver);
    };
    OntimizeService.prototype.parseSuccessfulAdvancedQueryResponse = function (resp, _innerObserver) {
        this.parseSuccessfulResponse(resp, _innerObserver);
    };
    OntimizeService.prototype.parseSuccessfulInsertResponse = function (resp, _innerObserver) {
        this.parseSuccessfulResponse(resp, _innerObserver);
    };
    OntimizeService.prototype.parseSuccessfulUpdateResponse = function (resp, _innerObserver) {
        this.parseSuccessfulResponse(resp, _innerObserver);
    };
    OntimizeService.prototype.parseSuccessfulDeleteResponse = function (resp, _innerObserver) {
        this.parseSuccessfulResponse(resp, _innerObserver);
    };
    OntimizeService.prototype.parseUnsuccessfulResponse = function (error, _innerObserver) {
        this.responseParser.parseUnsuccessfulResponse(error, _innerObserver, this);
    };
    OntimizeService.prototype.parseUnsuccessfulQueryResponse = function (resp, _innerObserver) {
        this.parseUnsuccessfulResponse(resp, _innerObserver);
    };
    OntimizeService.prototype.parseUnsuccessfulAdvancedQueryResponse = function (resp, _innerObserver) {
        this.parseUnsuccessfulResponse(resp, _innerObserver);
    };
    OntimizeService.prototype.parseUnsuccessfulInsertResponse = function (resp, _innerObserver) {
        this.parseUnsuccessfulResponse(resp, _innerObserver);
    };
    OntimizeService.prototype.parseUnsuccessfulUpdateResponse = function (resp, _innerObserver) {
        this.parseUnsuccessfulResponse(resp, _innerObserver);
    };
    OntimizeService.prototype.parseUnsuccessfulDeleteResponse = function (resp, _innerObserver) {
        this.parseUnsuccessfulResponse(resp, _innerObserver);
    };
    OntimizeService.decorators = [
        { type: Injectable },
    ];
    OntimizeService.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    return OntimizeService;
}());
export { OntimizeService };
//# sourceMappingURL=ontimize.service.js.map