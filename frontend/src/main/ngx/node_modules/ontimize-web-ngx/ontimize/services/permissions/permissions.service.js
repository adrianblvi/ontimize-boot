import { Injector, Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { share } from 'rxjs/operators';
import { AppConfig } from '../../config/app-config';
import { Util } from '../../utils';
import { OntimizePermissionsService } from './ontimize-permissions.service';
import { OntimizeEEPermissionsService } from './ontimize-ee-permissions.service';
var PermissionsService = (function () {
    function PermissionsService(injector) {
        this.injector = injector;
        var appConfig = this.injector.get(AppConfig).getConfiguration();
        if (Util.isDefined(appConfig.permissionsConfiguration)) {
            this.ontimizePermissionsConfig = appConfig.permissionsConfiguration;
        }
    }
    PermissionsService.prototype.configureService = function () {
        var loadingService = OntimizePermissionsService;
        try {
            this.permissionsService = this.injector.get(loadingService);
            if (Util.isPermissionsService(this.permissionsService)) {
                if (this.permissionsService instanceof OntimizePermissionsService) {
                    this.permissionsService.configureService(this.ontimizePermissionsConfig);
                }
                else if (this.permissionsService instanceof OntimizeEEPermissionsService) {
                    this.permissionsService.configureService(this.ontimizePermissionsConfig);
                }
            }
        }
        catch (e) {
            console.error(e);
        }
    };
    PermissionsService.prototype.restart = function () {
        this.permissions = undefined;
    };
    PermissionsService.prototype.hasPermissions = function () {
        return this.permissions !== undefined;
    };
    PermissionsService.prototype.getUserPermissionsAsPromise = function () {
        var self = this;
        return new Promise(function (resolve, reject) {
            self.permissions = {};
            if (Util.isDefined(self.ontimizePermissionsConfig)) {
                self.configureService();
                self.queryPermissions().subscribe(function () {
                    resolve(true);
                }, function (error) {
                    resolve(true);
                });
            }
            else {
                resolve(true);
            }
        });
    };
    PermissionsService.prototype.queryPermissions = function () {
        var self = this;
        var dataObservable = new Observable(function (innerObserver) {
            self.permissionsService.loadPermissions().subscribe(function (res) {
                self.permissions = res;
                innerObserver.next(res);
            }, function (err) {
                console.error('[Permissions.queryPermissions]: error', err);
                innerObserver.error(err);
            }, function () {
                innerObserver.complete();
            });
        });
        return dataObservable.pipe(share());
    };
    PermissionsService.prototype.getPermissionIdFromActRoute = function (actRoute) {
        var result;
        var snapshot = actRoute.snapshot;
        result = ((snapshot.data || {})['oPermission'] || {})['permissionId'];
        while (Util.isDefined(snapshot.firstChild) && !Util.isDefined(result)) {
            snapshot = snapshot.firstChild;
            result = ((snapshot.data || {})['oPermission'] || {})['permissionId'];
        }
        return result;
    };
    PermissionsService.prototype.getComponentPermissionsUsingRoute = function (attr, actRoute) {
        var result;
        var permissionId = this.getPermissionIdFromActRoute(actRoute);
        if (Util.isDefined(permissionId)) {
            var routePermissions = (this.permissions.routes || []).find(function (route) { return route.permissionId === permissionId; });
            if (Util.isDefined(routePermissions)) {
                result = (routePermissions.components || []).find(function (comp) { return comp.attr === attr; });
            }
        }
        return result;
    };
    PermissionsService.prototype.getOComponentPermissions = function (attr, actRoute, selector) {
        if (!Util.isDefined(this.permissions)) {
            return undefined;
        }
        var routePermissions;
        var genericRoutePerm = this.getComponentPermissionsUsingRoute(attr, actRoute);
        if (genericRoutePerm && genericRoutePerm.selector === selector) {
            routePermissions = genericRoutePerm;
        }
        var compPermissions;
        var attrPermissions = (this.permissions.components || []).find(function (comp) { return comp.attr === attr; });
        if (attrPermissions && attrPermissions.selector === selector) {
            compPermissions = attrPermissions;
        }
        return {
            route: routePermissions,
            component: compPermissions
        };
    };
    PermissionsService.prototype.getTablePermissions = function (attr, actRoute) {
        if (!Util.isDefined(this.permissions)) {
            return undefined;
        }
        var perm = this.getOComponentPermissions(attr, actRoute, 'o-table');
        var routePerm = perm.route;
        var compPerm = perm.component;
        if (!Util.isDefined(routePerm) || !Util.isDefined(compPerm)) {
            return compPerm || routePerm;
        }
        var permissions = {
            selector: 'o-table',
            attr: routePerm.attr,
            menu: this.mergeOTableMenuPermissions(compPerm.menu, routePerm.menu),
            columns: this.mergeOPermissionsArrays(compPerm.columns, routePerm.columns),
            actions: this.mergeOPermissionsArrays(compPerm.actions, routePerm.actions),
            contextMenu: this.mergeOPermissionsArrays(compPerm.contextMenu, routePerm.contextMenu)
        };
        return permissions;
    };
    PermissionsService.prototype.getFormPermissions = function (attr, actRoute) {
        if (!Util.isDefined(this.permissions)) {
            return undefined;
        }
        var perm = this.getOComponentPermissions(attr, actRoute, 'o-form');
        var routePerm = perm.route;
        var compPerm = perm.component;
        if (!Util.isDefined(routePerm) || !Util.isDefined(compPerm)) {
            return compPerm || routePerm;
        }
        var permissions = {
            selector: 'o-form',
            attr: routePerm.attr,
            components: this.mergeOPermissionsArrays(compPerm.components, routePerm.components),
            actions: this.mergeOPermissionsArrays(compPerm.actions, routePerm.actions)
        };
        return permissions;
    };
    PermissionsService.prototype.getMenuPermissions = function (attr) {
        var permissions;
        if (!Util.isDefined(this.permissions)) {
            return undefined;
        }
        var allMenu = this.permissions.menu || [];
        permissions = allMenu.find(function (comp) { return comp.attr === attr; });
        return permissions;
    };
    PermissionsService.prototype.mergeOPermissionsArrays = function (permissionsA, permissionsB) {
        if (!Util.isDefined(permissionsA) || !Util.isDefined(permissionsB)) {
            return permissionsA || permissionsB;
        }
        var result = Object.assign([], permissionsA);
        permissionsB.forEach(function (perm) {
            var found = result.find(function (r) { return r.attr === perm.attr; });
            if (found) {
                found.visible = perm.visible;
                found.enabled = perm.enabled;
            }
            else {
                result.push(perm);
            }
        });
        return result;
    };
    PermissionsService.prototype.mergeOTableMenuPermissions = function (permissionsA, permissionsB) {
        if (!Util.isDefined(permissionsA) || !Util.isDefined(permissionsB)) {
            return permissionsA || permissionsB;
        }
        var result = {
            visible: permissionsB.visible,
            enabled: permissionsB.enabled,
            items: this.mergeOPermissionsArrays(permissionsA.items, permissionsB.items)
        };
        return result;
    };
    PermissionsService.prototype.isPermissionIdRouteRestricted = function (permissionId) {
        var routeData = (this.permissions.routes || []).find(function (route) { return route.permissionId === permissionId; });
        return Util.isDefined(routeData) && routeData.enabled === false;
    };
    PermissionsService.decorators = [
        { type: Injectable },
    ];
    PermissionsService.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    return PermissionsService;
}());
export { PermissionsService };
//# sourceMappingURL=permissions.service.js.map