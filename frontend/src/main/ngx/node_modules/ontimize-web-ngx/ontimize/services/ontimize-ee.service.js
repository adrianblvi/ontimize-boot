import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Injectable, Injector } from '@angular/core';
import { Router } from '@angular/router';
import { Observable } from 'rxjs';
import { share } from 'rxjs/operators';
import { AppConfig } from '../config/app-config';
import { LoginService } from '../services';
import { Codes, ServiceUtils, Util } from '../utils';
import { OntimizeServiceResponseParser } from './parser/o-service-response.parser';
var OntimizeEEService = (function () {
    function OntimizeEEService(injector) {
        this.injector = injector;
        this.path = '';
        this.kv = {};
        this.av = [];
        this.sqltypes = {};
        this.pagesize = 10;
        this.offset = 0;
        this.orderby = [];
        this.totalsize = -1;
        this.httpClient = this.injector.get(HttpClient);
        this._config = this.injector.get(AppConfig);
        this._appConfig = this._config.getConfiguration();
        this.responseParser = this.injector.get(OntimizeServiceResponseParser);
    }
    OntimizeEEService.prototype.getDefaultServiceConfiguration = function (serviceName) {
        var loginService = this.injector.get(LoginService);
        var configuration = this._config.getServiceConfiguration();
        var servConfig = {};
        if (serviceName && configuration.hasOwnProperty(serviceName)) {
            servConfig = configuration[serviceName];
        }
        servConfig[Codes.SESSION_KEY] = loginService.getSessionInfo();
        return servConfig;
    };
    OntimizeEEService.prototype.configureService = function (config) {
        this._urlBase = config.urlBase ? config.urlBase : this._appConfig['apiEndpoint'];
        this._sessionid = config.session ? config.session.id : -1;
        this.path = config.path;
        this._startSessionPath = this._appConfig['startSessionPath'] ? this._appConfig['startSessionPath'] : '/users/login';
    };
    Object.defineProperty(OntimizeEEService.prototype, "urlBase", {
        get: function () {
            return this._urlBase;
        },
        set: function (value) {
            this._urlBase = value;
        },
        enumerable: true,
        configurable: true
    });
    OntimizeEEService.prototype.startsession = function (user, password) {
        var url = this.urlBase + this._startSessionPath;
        var options = {
            headers: new HttpHeaders({
                'Authorization': 'Basic ' + btoa(user + ':' + password)
            }),
            'observe': 'response'
        };
        var self = this;
        var startSessionObservable = new Observable(function (_startSessionObserver) {
            self.httpClient.post(url, null, options).subscribe(function (resp) {
                if (Util.isDefined(resp) && Util.isDefined(resp.headers) && Util.isDefined(resp.headers.get('X-Auth-Token'))) {
                    _startSessionObserver.next(resp.headers.get('X-Auth-Token'));
                }
                else {
                    _startSessionObserver.error('Invalid user or password');
                }
            }, function (error) { return _startSessionObserver.error(error); });
        });
        return startSessionObservable;
    };
    OntimizeEEService.prototype.endsession = function (user, sessionId) {
        var _closeSessionObserver;
        var closeSessionObservable = new Observable(function (observer) { return _closeSessionObserver = observer; }).pipe(share());
        setTimeout(function () {
            _closeSessionObserver.next(0);
        }, 0);
        return closeSessionObservable;
    };
    OntimizeEEService.prototype.hassession = function (user, sessionId) {
        var _observer;
        var observable = new Observable(function (observer) { return _observer = observer; }).pipe(share());
        return observable;
    };
    OntimizeEEService.prototype.query = function (kv, av, entity, sqltypes) {
        kv = (Util.isDefined(kv)) ? kv : this.kv;
        av = (Util.isDefined(av)) ? av : this.av;
        sqltypes = (Util.isDefined(sqltypes)) ? sqltypes : this.sqltypes;
        var url = this._urlBase + this.path + '/' + entity + '/search';
        var options = {
            headers: this.buildHeaders()
        };
        var body = JSON.stringify({
            filter: kv,
            columns: av,
            sqltypes: sqltypes
        });
        var self = this;
        var dataObservable = new Observable(function (_innerObserver) {
            self.httpClient.post(url, body, options).subscribe(function (resp) {
                self.parseSuccessfulQueryResponse(resp, _innerObserver);
            }, function (error) {
                self.parseUnsuccessfulQueryResponse(error, _innerObserver);
            }, function () { return _innerObserver.complete(); });
        });
        return dataObservable.pipe(share());
    };
    OntimizeEEService.prototype.advancedQuery = function (kv, av, entity, sqltypes, offset, pagesize, orderby) {
        kv = (Util.isDefined(kv)) ? kv : this.kv;
        av = (Util.isDefined(av)) ? av : this.av;
        sqltypes = (Util.isDefined(sqltypes)) ? sqltypes : this.sqltypes;
        orderby = (Util.isDefined(orderby)) ? orderby : this.orderby;
        offset = (Util.isDefined(offset)) ? offset : this.offset;
        pagesize = (Util.isDefined(pagesize)) ? pagesize : this.pagesize;
        var url = this._urlBase + this.path + '/' + entity + '/advancedsearch';
        var options = {
            headers: this.buildHeaders()
        };
        var body = JSON.stringify({
            filter: kv,
            columns: av,
            sqltypes: sqltypes,
            offset: offset,
            pageSize: pagesize,
            orderBy: orderby
        });
        var self = this;
        var dataObservable = new Observable(function (_innerObserver) {
            self.httpClient.post(url, body, options).subscribe(function (resp) {
                self.parseSuccessfulAdvancedQueryResponse(resp, _innerObserver);
            }, function (error) {
                self.parseUnsuccessfulAdvancedQueryResponse(error, _innerObserver);
            }, function () { return _innerObserver.complete(); });
        });
        return dataObservable.pipe(share());
    };
    OntimizeEEService.prototype.insert = function (av, entity, sqltypes) {
        if (av === void 0) { av = {}; }
        var url = this._urlBase + this.path + '/' + entity;
        var options = {
            headers: this.buildHeaders()
        };
        var body = JSON.stringify({
            data: av,
            sqltypes: sqltypes
        });
        var self = this;
        var dataObservable = new Observable(function (_innerObserver) {
            self.httpClient.post(url, body, options).subscribe(function (resp) {
                self.parseSuccessfulInsertResponse(resp, _innerObserver);
            }, function (error) {
                self.parseUnsuccessfulInsertResponse(error, _innerObserver);
            }, function () { return _innerObserver.complete(); });
        });
        return dataObservable.pipe(share());
    };
    OntimizeEEService.prototype.update = function (kv, av, entity, sqltypes) {
        if (kv === void 0) { kv = {}; }
        if (av === void 0) { av = {}; }
        var url = this._urlBase + this.path + '/' + entity;
        var options = {
            headers: this.buildHeaders()
        };
        var body = JSON.stringify({
            filter: kv,
            data: av,
            sqltypes: sqltypes
        });
        var self = this;
        var dataObservable = new Observable(function (_innerObserver) {
            self.httpClient.put(url, body, options).subscribe(function (resp) {
                self.parseSuccessfulUpdateResponse(resp, _innerObserver);
            }, function (error) {
                self.parseUnsuccessfulUpdateResponse(error, _innerObserver);
            }, function () { return _innerObserver.complete(); });
        });
        return dataObservable.pipe(share());
    };
    OntimizeEEService.prototype.delete = function (kv, entity, sqltypes) {
        if (kv === void 0) { kv = {}; }
        var url = this._urlBase + this.path + '/' + entity;
        var headers = this.buildHeaders();
        var options = {
            headers: headers,
            body: JSON.stringify({
                filter: kv,
                sqltypes: sqltypes
            })
        };
        var self = this;
        var dataObservable = new Observable(function (_innerObserver) {
            self.httpClient.delete(url, options).subscribe(function (resp) {
                self.parseSuccessfulDeleteResponse(resp, _innerObserver);
            }, function (error) {
                self.parseUnsuccessfulDeleteResponse(error, _innerObserver);
            }, function () { return _innerObserver.complete(); });
        });
        return dataObservable.pipe(share());
    };
    OntimizeEEService.prototype.redirectLogin = function (sessionExpired) {
        if (sessionExpired === void 0) { sessionExpired = false; }
        var router = this.injector.get(Router);
        var loginService = this.injector.get(LoginService);
        if (sessionExpired) {
            loginService.sessionExpired();
        }
        ServiceUtils.redirectLogin(router, sessionExpired);
    };
    OntimizeEEService.prototype.buildHeaders = function () {
        return new HttpHeaders({
            'Access-Control-Allow-Origin': '*',
            'Content-Type': 'application/json;charset=UTF-8',
            'Authorization': 'Bearer ' + this._sessionid
        });
    };
    OntimizeEEService.prototype.parseSuccessfulResponse = function (resp, _innerObserver) {
        this.responseParser.parseSuccessfulResponse(resp, _innerObserver, this);
    };
    OntimizeEEService.prototype.parseSuccessfulQueryResponse = function (resp, _innerObserver) {
        this.parseSuccessfulResponse(resp, _innerObserver);
    };
    OntimizeEEService.prototype.parseSuccessfulAdvancedQueryResponse = function (resp, _innerObserver) {
        this.parseSuccessfulResponse(resp, _innerObserver);
    };
    OntimizeEEService.prototype.parseSuccessfulInsertResponse = function (resp, _innerObserver) {
        this.parseSuccessfulResponse(resp, _innerObserver);
    };
    OntimizeEEService.prototype.parseSuccessfulUpdateResponse = function (resp, _innerObserver) {
        this.parseSuccessfulResponse(resp, _innerObserver);
    };
    OntimizeEEService.prototype.parseSuccessfulDeleteResponse = function (resp, _innerObserver) {
        this.parseSuccessfulResponse(resp, _innerObserver);
    };
    OntimizeEEService.prototype.parseUnsuccessfulResponse = function (error, _innerObserver) {
        this.responseParser.parseUnsuccessfulResponse(error, _innerObserver, this);
    };
    OntimizeEEService.prototype.parseUnsuccessfulQueryResponse = function (resp, _innerObserver) {
        this.parseUnsuccessfulResponse(resp, _innerObserver);
    };
    OntimizeEEService.prototype.parseUnsuccessfulAdvancedQueryResponse = function (resp, _innerObserver) {
        this.parseUnsuccessfulResponse(resp, _innerObserver);
    };
    OntimizeEEService.prototype.parseUnsuccessfulInsertResponse = function (resp, _innerObserver) {
        this.parseUnsuccessfulResponse(resp, _innerObserver);
    };
    OntimizeEEService.prototype.parseUnsuccessfulUpdateResponse = function (resp, _innerObserver) {
        this.parseUnsuccessfulResponse(resp, _innerObserver);
    };
    OntimizeEEService.prototype.parseUnsuccessfulDeleteResponse = function (resp, _innerObserver) {
        this.parseUnsuccessfulResponse(resp, _innerObserver);
    };
    OntimizeEEService.decorators = [
        { type: Injectable },
    ];
    OntimizeEEService.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    return OntimizeEEService;
}());
export { OntimizeEEService };
//# sourceMappingURL=ontimize-ee.service.js.map