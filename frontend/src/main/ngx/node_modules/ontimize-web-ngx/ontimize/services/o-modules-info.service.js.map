{"version":3,"file":"o-modules-info.service.js","sourceRoot":"","sources":["../../../tmp/ontimize/services/o-modules-info.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,eAAe,CAAC;AACrD,OAAO,EAAc,OAAO,EAAE,MAAM,MAAM,CAAC;AAC3C,OAAO,EAAE,MAAM,EAAE,aAAa,EAAE,cAAc,EAAE,MAAM,iBAAiB,CAAC;AACxE,OAAO,EAAE,iBAAiB,EAAE,MAAM,aAAa,CAAC;AAOhD;IASE,6BACY,QAAkB;QAD9B,iBAiBC;QAhBW,aAAQ,GAAR,QAAQ,CAAU;QAHtB,YAAO,GAAG,IAAI,OAAO,EAAO,CAAC;QAKnC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACxC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;QAClD,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;QAE7D,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,UAAA,EAAE;YAC7B,IAAI,EAAE,YAAY,aAAa,EAAE;gBAC/B,IAAI,WAAW,GAAG,KAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBACpD,IAAI,WAAW,KAAK,EAAE,CAAC,GAAG,EAAE;oBAC1B,KAAI,CAAC,aAAa,CAAC;wBACjB,IAAI,EAAE,WAAW;qBAClB,CAAC,CAAC;iBACJ;aACF;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,2CAAa,GAAb,UAAc,IAAgB;QAC5B,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACvB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC1B,CAAC;IAED,2CAAa,GAAb;QACE,OAAO,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;IAED,uDAAyB,GAAzB;QACE,OAAO,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC;IACrC,CAAC;;gBAvCF,UAAU;;;gBAVU,QAAQ;;IAmD7B,0BAAC;CAAA,AAzCD,IAyCC;SAxCY,mBAAmB","sourcesContent":["import { Injectable, Injector } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { Router, NavigationEnd, ActivatedRoute } from '@angular/router';\nimport { OTranslateService } from '../services';\n\nexport interface ModuleInfo {\n  name?: string;\n  route?: string;\n}\n\n@Injectable()\nexport class OModulesInfoService {\n  protected storedInfo: ModuleInfo;\n  protected actRoute: ActivatedRoute;\n  protected router: Router;\n  protected translateService: OTranslateService;\n\n  private subject = new Subject<any>();\n\n  constructor(\n    protected injector: Injector\n  ) {\n    this.router = this.injector.get(Router);\n    this.actRoute = this.injector.get(ActivatedRoute);\n    this.translateService = this.injector.get(OTranslateService);\n\n    this.router.events.subscribe(ev => {\n      if (ev instanceof NavigationEnd) {\n        let translation = this.translateService.get(ev.url);\n        if (translation !== ev.url) {\n          this.setModuleInfo({\n            name: translation\n          });\n        }\n      }\n    });\n  }\n\n  setModuleInfo(info: ModuleInfo) {\n    this.storedInfo = info;\n    this.subject.next(info);\n  }\n\n  getModuleInfo(): ModuleInfo {\n    return this.storedInfo;\n  }\n\n  getModuleChangeObservable(): Observable<any> {\n    return this.subject.asObservable();\n  }\n\n}\n"]}