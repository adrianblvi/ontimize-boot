import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Injector } from '@angular/core';
import { Observable } from 'rxjs';
import { AppConfig, Config } from '../config/app-config';
import { IAuthService, IDataService } from '../utils';
import { OntimizeServiceResponseParser } from './parser/o-service-response.parser';
export declare class OntimizeEEService implements IAuthService, IDataService {
    protected injector: Injector;
    path: string;
    kv: Object;
    av: Array<string>;
    sqltypes: Object;
    pagesize: number;
    offset: number;
    orderby: Array<Object>;
    totalsize: number;
    protected httpClient: HttpClient;
    protected _sessionid: string;
    protected _urlBase: string;
    protected _appConfig: Config;
    protected _config: AppConfig;
    protected _startSessionPath: string;
    protected responseParser: OntimizeServiceResponseParser;
    constructor(injector: Injector);
    getDefaultServiceConfiguration(serviceName?: string): {};
    configureService(config: any): void;
    urlBase: string;
    startsession(user: string, password: string): Observable<{}>;
    endsession(user: string, sessionId: any): Observable<any>;
    hassession(user: string, sessionId: any): Observable<any>;
    query(kv?: Object, av?: Array<string>, entity?: string, sqltypes?: Object): Observable<any>;
    advancedQuery(kv?: Object, av?: Array<string>, entity?: string, sqltypes?: Object, offset?: number, pagesize?: number, orderby?: Array<Object>): Observable<any>;
    insert(av: Object, entity: string, sqltypes?: Object): Observable<any>;
    update(kv?: Object, av?: Object, entity?: string, sqltypes?: Object): Observable<any>;
    delete(kv?: Object, entity?: string, sqltypes?: Object): Observable<any>;
    redirectLogin(sessionExpired?: boolean): void;
    protected buildHeaders(): HttpHeaders;
    protected parseSuccessfulResponse(resp: any, _innerObserver: any): void;
    protected parseSuccessfulQueryResponse(resp: any, _innerObserver: any): void;
    protected parseSuccessfulAdvancedQueryResponse(resp: any, _innerObserver: any): void;
    protected parseSuccessfulInsertResponse(resp: any, _innerObserver: any): void;
    protected parseSuccessfulUpdateResponse(resp: any, _innerObserver: any): void;
    protected parseSuccessfulDeleteResponse(resp: any, _innerObserver: any): void;
    protected parseUnsuccessfulResponse(error: any, _innerObserver: any): void;
    protected parseUnsuccessfulQueryResponse(resp: any, _innerObserver: any): void;
    protected parseUnsuccessfulAdvancedQueryResponse(resp: any, _innerObserver: any): void;
    protected parseUnsuccessfulInsertResponse(resp: any, _innerObserver: any): void;
    protected parseUnsuccessfulUpdateResponse(resp: any, _innerObserver: any): void;
    protected parseUnsuccessfulDeleteResponse(resp: any, _innerObserver: any): void;
}
