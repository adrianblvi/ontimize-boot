import { HttpClient, HttpEventType, HttpHeaders, HttpRequest } from '@angular/common/http';
import { Injectable, Injector } from '@angular/core';
import { Router } from '@angular/router';
import { Observable } from 'rxjs';
import { share } from 'rxjs/operators';
import { AppConfig } from '../config/app-config';
import { LoginService } from '../services';
import { Codes, ServiceUtils } from '../utils';
var OntimizeFileService = (function () {
    function OntimizeFileService(injector) {
        this.injector = injector;
        this.path = '';
        this.httpClient = this.injector.get(HttpClient);
        this._config = this.injector.get(AppConfig);
        this._appConfig = this._config.getConfiguration();
    }
    OntimizeFileService.prototype.getDefaultServiceConfiguration = function (serviceName) {
        var loginService = this.injector.get(LoginService);
        var configuration = this._config.getServiceConfiguration();
        var servConfig = {};
        if (serviceName && configuration.hasOwnProperty(serviceName)) {
            servConfig = configuration[serviceName];
        }
        servConfig[Codes.SESSION_KEY] = loginService.getSessionInfo();
        return servConfig;
    };
    OntimizeFileService.prototype.configureService = function (config) {
        this._urlBase = config.urlBase ? config.urlBase : this._appConfig['apiEndpoint'];
        this._sessionid = config.session ? config.session.id : -1;
        this.path = config.path;
    };
    Object.defineProperty(OntimizeFileService.prototype, "urlBase", {
        get: function () {
            return this._urlBase;
        },
        set: function (value) {
            this._urlBase = value;
        },
        enumerable: true,
        configurable: true
    });
    OntimizeFileService.prototype.upload = function (files, entity, data) {
        var url = this._urlBase + this.path + '/' + entity;
        var headers = new HttpHeaders({
            'Access-Control-Allow-Origin': '*',
            'Authorization': 'Bearer ' + this._sessionid
        });
        var _innerObserver;
        var dataObservable = new Observable(function (observer) { return _innerObserver = observer; }).pipe(share());
        var toUpload = new FormData();
        files.forEach(function (item) {
            item.prepareToUpload();
            item.isUploading = true;
            toUpload.append('name', item.name);
            toUpload.append('file', item.file);
        });
        if (data) {
            toUpload.append('data', JSON.stringify(data));
        }
        var request = new HttpRequest('POST', url, toUpload, {
            headers: headers,
            reportProgress: true
        });
        var self = this;
        this.httpClient.request(request).subscribe(function (resp) {
            if (HttpEventType.UploadProgress === resp.type) {
                var progressData = {
                    loaded: resp.loaded,
                    total: resp.total
                };
                _innerObserver.next(progressData);
            }
            else if (HttpEventType.Response === resp.type) {
                if (resp.body) {
                    if (resp.body['code'] === 3) {
                        self.redirectLogin(true);
                    }
                    else if (resp.body['code'] === 1) {
                        _innerObserver.error(resp.body['message']);
                    }
                    else if (resp.body['code'] === 0) {
                        _innerObserver.next(resp.body);
                    }
                    else {
                        _innerObserver.error('Service unavailable');
                    }
                }
                else {
                    _innerObserver.next(resp.body);
                }
            }
        }, function (error) {
            console.error(error);
            if (error.status === 401) {
                self.redirectLogin(true);
            }
            else {
                _innerObserver.error(error);
            }
        }, function () { return _innerObserver.complete(); });
        return dataObservable;
    };
    OntimizeFileService.prototype.redirectLogin = function (sessionExpired) {
        if (sessionExpired === void 0) { sessionExpired = false; }
        var router = this.injector.get(Router);
        var loginService = this.injector.get(LoginService);
        if (sessionExpired) {
            loginService.sessionExpired();
        }
        ServiceUtils.redirectLogin(router, sessionExpired);
    };
    OntimizeFileService.decorators = [
        { type: Injectable },
    ];
    OntimizeFileService.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    return OntimizeFileService;
}());
export { OntimizeFileService };
//# sourceMappingURL=ontimize-file.service.js.map