import { HttpClient } from '@angular/common/http';
import { EventEmitter, Injectable, Injector } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { Observable } from 'rxjs';
import { AppConfig } from '../../config/app-config';
import * as CORE_TRANSLATIONS from '../../i18n/i18n';
import { MomentService, SnackBarService } from '../../services';
import { ObservableWrapper } from '../../util/async';
var OTranslateService = (function () {
    function OTranslateService(injector) {
        this.injector = injector;
        this.DEFAULT_LANG = 'en';
        this.onLanguageChanged = new EventEmitter();
        this.notFoundLang = [];
        this.existingLangFiles = [];
        this.ngxTranslateService = this.injector.get(TranslateService);
        this.momentService = this.injector.get(MomentService);
        this.httpClient = this.injector.get(HttpClient);
        this.appConfig = this.injector.get(AppConfig);
    }
    OTranslateService.prototype.checkExistingLangFile = function (lang) {
        var _this = this;
        var self = this;
        return new Promise(function (resolve) {
            if (self.existingLangFiles.indexOf(lang) !== -1) {
                resolve(true);
                return;
            }
            var localeAssetsPath = _this.ngxTranslateService.currentLoader.prefix;
            var localeAssetsExtension = _this.ngxTranslateService.currentLoader.suffix;
            self.httpClient.get(localeAssetsPath + lang + localeAssetsExtension).subscribe(function () {
                if (self.existingLangFiles.indexOf(lang) === -1) {
                    self.existingLangFiles.push(lang);
                }
                resolve(true);
            }, function () {
                if (self.notFoundLang.indexOf(lang) === -1) {
                    self.notFoundLang.push(lang);
                }
                resolve(false);
            });
        });
    };
    OTranslateService.prototype.setDefaultLang = function (lang) {
        this.ngxTranslateService.defaultLang = lang;
        this.checkExistingLangFile(lang).then(function (exists) {
            if (!exists) {
                console.error('Default language(' + lang + ') has no bundle file defined');
            }
        });
    };
    OTranslateService.prototype.get = function (text, values) {
        if (values === void 0) { values = []; }
        var textTranslated = undefined;
        try {
            var bundle = this.ngxTranslateService.get(text, values);
            if (bundle && bundle['value']) {
                textTranslated = bundle['value'];
            }
            textTranslated = textTranslated === text ? undefined : textTranslated;
        }
        catch (e) {
            textTranslated = undefined;
        }
        if (!textTranslated) {
            var bundle = CORE_TRANSLATIONS.MAP[this.ngxTranslateService.currentLang] || CORE_TRANSLATIONS.MAP[this.DEFAULT_LANG];
            if (bundle && bundle[text]) {
                textTranslated = bundle[text];
            }
            else {
                textTranslated = text;
            }
        }
        return textTranslated;
    };
    OTranslateService.prototype.setAppLang = function (lang) {
        var _this = this;
        var observable = new Observable(function (observer) {
            _this.use(lang, observer);
        });
        return observable;
    };
    OTranslateService.prototype.use = function (lang, observer) {
        var _this = this;
        if (lang === undefined) {
            var newLang = lang || this.DEFAULT_LANG;
            this.propagateLang(newLang, {}, observer);
        }
        else {
            this.checkExistingLangFile(lang).then(function (exists) {
                var newLang = lang;
                if (!exists) {
                    newLang = _this.ngxTranslateService.getDefaultLang();
                    var msg = CORE_TRANSLATIONS.MAP[newLang || _this.DEFAULT_LANG]['MESSAGES.ERROR_MISSING_LANG'];
                    _this.injector.get(SnackBarService).open(msg, {
                        milliseconds: 2500
                    });
                }
                _this.ngxTranslateService.use(newLang).subscribe(function (res) {
                    _this.propagateLang(newLang, res, observer);
                });
            });
        }
    };
    OTranslateService.prototype.propagateLang = function (lang, langRes, observer) {
        var coreBundle = CORE_TRANSLATIONS.MAP[lang || this.DEFAULT_LANG];
        if (coreBundle !== undefined) {
            var mixed = Object.assign({}, coreBundle, langRes);
            this.ngxTranslateService.translations[lang] = mixed;
        }
        this.momentService.load(lang);
        ObservableWrapper.callEmit(this.onLanguageChanged, lang);
        if (observer) {
            observer.next(langRes);
        }
    };
    OTranslateService.prototype.getCurrentLang = function () {
        return this.ngxTranslateService.currentLang;
    };
    OTranslateService.prototype.getBrowserLang = function () {
        if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {
            return undefined;
        }
        var navigator = window.navigator;
        var browserLang = navigator.languages ? navigator.languages[0] : null;
        browserLang = navigator.language || browserLang || navigator.browserLanguage || navigator.userLanguage;
        if (browserLang.indexOf('-') !== -1) {
            browserLang = browserLang.split('-')[0];
        }
        if (browserLang.indexOf('_') !== -1) {
            browserLang = browserLang.split('_')[0];
        }
        return browserLang;
    };
    OTranslateService.ASSETS_PATH = './assets/i18n/';
    OTranslateService.ASSETS_EXTENSION = '.json';
    OTranslateService.decorators = [
        { type: Injectable },
    ];
    OTranslateService.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    return OTranslateService;
}());
export { OTranslateService };
//# sourceMappingURL=o-translate.service.js.map