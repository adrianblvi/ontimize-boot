import { Injector, Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { Util } from '../../utils';
import { SnackBarService } from '../snackbar.service';
import { ShareCanActivateChildService } from '../share-can-activate-child.service';
import { PermissionsService } from './permissions.service';
var PermissionsGuardService = (function () {
    function PermissionsGuardService(injector) {
        this.injector = injector;
        this.router = this.injector.get(Router);
        this.permissionsService = this.injector.get(PermissionsService);
        this.snackBarService = this.injector.get(SnackBarService);
        this.shareCanActivateChildService = this.injector.get(ShareCanActivateChildService);
        this.shareCanActivateChildService.setPermissionsGuard(this);
    }
    PermissionsGuardService.prototype.canActivateChild = function (childRoute, state) {
        var restricted = false;
        var oPermission = childRoute.data ? childRoute.data['oPermission'] : undefined;
        var permissionId = (oPermission || {})['permissionId'];
        if (Util.isDefined(permissionId)) {
            restricted = this.permissionsService.isPermissionIdRouteRestricted(permissionId);
            if (restricted) {
                var msg = 'MESSAGES.NAVIGATION_NOT_ALLOWED_PERMISSION';
                var route = oPermission['restrictedPermissionsRedirect'];
                if (Util.isDefined(route)) {
                    msg = 'MESSAGES.NAVIGATION_REDIRECTED_PERMISSION';
                    this.router.navigate([route]);
                }
                this.snackBarService.open(msg);
            }
        }
        return !restricted;
    };
    PermissionsGuardService.decorators = [
        { type: Injectable },
    ];
    PermissionsGuardService.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    return PermissionsGuardService;
}());
export { PermissionsGuardService };
//# sourceMappingURL=permissions-can-activate.guard.js.map