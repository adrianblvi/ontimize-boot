{"version":3,"file":"number.service.js","sourceRoot":"","sources":["../../../tmp/ontimize/services/number.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injector } from '@angular/core';\nimport { Util } from '../util/util';\nimport { AppConfig, Config } from '../config/app-config';\n\nexport class NumberService {\n\n  public static DEFAULT_DECIMAL_DIGITS = 2;\n\n  protected _grouping: boolean;\n  protected _minDecimalDigits: number;\n  protected _maxDecimalDigits: number;\n  protected _locale: string;\n  private _config: Config;\n\n  constructor(protected injector: Injector) {\n    this._config = this.injector.get(AppConfig).getConfiguration();\n    //TODO: initialize from config\n    this._minDecimalDigits = NumberService.DEFAULT_DECIMAL_DIGITS;\n    this._maxDecimalDigits = NumberService.DEFAULT_DECIMAL_DIGITS;\n\n    this._grouping = true;\n    this._locale = this._config.locale;\n  }\n\n  get grouping(): boolean {\n    return this._grouping;\n  }\n\n  set grouping(value: boolean) {\n    this._grouping = value;\n  }\n\n  get minDecimalDigits(): number {\n    return this._minDecimalDigits;\n  }\n\n  set minDecimalDigits(value: number) {\n    this._minDecimalDigits = value;\n  }\n\n  get maxDecimalDigits(): number {\n    return this._maxDecimalDigits;\n  }\n\n  set maxDecimalDigits(value: number) {\n    this._maxDecimalDigits = value;\n  }\n\n  get locale(): string {\n    return this._locale;\n  }\n\n  set locale(value: string) {\n    this._locale = value;\n  }\n\n  getIntegerValue(value: any, args: any) {\n    const grouping = args ? args.grouping : undefined;\n    if (!Util.isDefined(value) && !Util.isDefined(grouping) || !grouping) {\n      return value;\n    }\n    const thousandSeparator = args ? args.thousandSeparator : undefined;\n    const locale = args ? args.locale : undefined;\n    // Ensure value is an integer\n    let intValue: any = parseInt(value, 10);\n    if (isNaN(intValue)) {\n      return void 0;\n    }\n    // Format value\n    let formattedIntValue = intValue;\n    if (Util.isDefined(locale)) {\n      formattedIntValue = new Intl.NumberFormat(locale).format(intValue);\n    } else if (!Util.isDefined(thousandSeparator)) {\n      formattedIntValue = new Intl.NumberFormat(this._locale).format(intValue);\n    } else {\n      formattedIntValue = String(intValue).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, thousandSeparator);\n    }\n    return formattedIntValue;\n  }\n\n  getRealValue(value: any, args: any) {\n    const grouping = args ? args.grouping : undefined;\n    if (!Util.isDefined(value) && !Util.isDefined(grouping) || !grouping) {\n      return value;\n    }\n    const locale = args ? args.locale : undefined;\n    const thousandSeparator = args ? args.thousandSeparator : undefined;\n    const decimalSeparator = args ? args.decimalSeparator : undefined;\n\n    let minDecimalDigits = args ? args.minDecimalDigits : undefined;\n    let maxDecimalDigits = args ? args.maxDecimalDigits : undefined;\n\n    if (!Util.isDefined(minDecimalDigits)) {\n      minDecimalDigits = this._minDecimalDigits;\n    }\n    if (!Util.isDefined(maxDecimalDigits)) {\n      maxDecimalDigits = this._maxDecimalDigits;\n    }\n\n    let formattedRealValue = value;\n    let formatterArgs = {\n      minimumFractionDigits: minDecimalDigits,\n      maximumFractionDigits: maxDecimalDigits\n    };\n\n    if (Util.isDefined(locale)) {\n      formattedRealValue = new Intl.NumberFormat(locale, formatterArgs).format(value);\n    } else if (!Util.isDefined(thousandSeparator) || !Util.isDefined(decimalSeparator)) {\n      formattedRealValue = new Intl.NumberFormat(this._locale, formatterArgs).format(value);\n    } else {\n      let realValue = parseFloat(value);\n      if (!isNaN(realValue)) {\n        formattedRealValue = String(realValue);\n        let tmpStr = realValue.toFixed(maxDecimalDigits);\n        tmpStr = tmpStr.replace('.', decimalSeparator);\n        if (grouping) {\n          let parts = tmpStr.split(decimalSeparator);\n          if (parts.length > 0) {\n            parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, thousandSeparator);\n            formattedRealValue = parts.join(decimalSeparator);\n          }\n        } else {\n          formattedRealValue = tmpStr;\n        }\n      }\n    }\n    return formattedRealValue;\n  }\n\n  getPercentValue(value: any, args: any) {\n    const valueBase = args ? args.valueBase : undefined;\n    let parsedValue = value;\n    switch (valueBase) {\n      case 100:\n        break;\n      case 1:\n      default:\n        parsedValue = parsedValue * 100;\n        break;\n    }\n    const formattedPercentValue = this.getRealValue(parsedValue, args) + ' %';\n    return formattedPercentValue;\n  }\n\n}\n"]}