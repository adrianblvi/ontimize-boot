import { Util } from '../util/util';
import { AppConfig } from '../config/app-config';
var NumberService = (function () {
    function NumberService(injector) {
        this.injector = injector;
        this._config = this.injector.get(AppConfig).getConfiguration();
        this._minDecimalDigits = NumberService.DEFAULT_DECIMAL_DIGITS;
        this._maxDecimalDigits = NumberService.DEFAULT_DECIMAL_DIGITS;
        this._grouping = true;
        this._locale = this._config.locale;
    }
    Object.defineProperty(NumberService.prototype, "grouping", {
        get: function () {
            return this._grouping;
        },
        set: function (value) {
            this._grouping = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumberService.prototype, "minDecimalDigits", {
        get: function () {
            return this._minDecimalDigits;
        },
        set: function (value) {
            this._minDecimalDigits = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumberService.prototype, "maxDecimalDigits", {
        get: function () {
            return this._maxDecimalDigits;
        },
        set: function (value) {
            this._maxDecimalDigits = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumberService.prototype, "locale", {
        get: function () {
            return this._locale;
        },
        set: function (value) {
            this._locale = value;
        },
        enumerable: true,
        configurable: true
    });
    NumberService.prototype.getIntegerValue = function (value, args) {
        var grouping = args ? args.grouping : undefined;
        if (!Util.isDefined(value) && !Util.isDefined(grouping) || !grouping) {
            return value;
        }
        var thousandSeparator = args ? args.thousandSeparator : undefined;
        var locale = args ? args.locale : undefined;
        var intValue = parseInt(value, 10);
        if (isNaN(intValue)) {
            return void 0;
        }
        var formattedIntValue = intValue;
        if (Util.isDefined(locale)) {
            formattedIntValue = new Intl.NumberFormat(locale).format(intValue);
        }
        else if (!Util.isDefined(thousandSeparator)) {
            formattedIntValue = new Intl.NumberFormat(this._locale).format(intValue);
        }
        else {
            formattedIntValue = String(intValue).toString().replace(/\B(?=(\d{3})+(?!\d))/g, thousandSeparator);
        }
        return formattedIntValue;
    };
    NumberService.prototype.getRealValue = function (value, args) {
        var grouping = args ? args.grouping : undefined;
        if (!Util.isDefined(value) && !Util.isDefined(grouping) || !grouping) {
            return value;
        }
        var locale = args ? args.locale : undefined;
        var thousandSeparator = args ? args.thousandSeparator : undefined;
        var decimalSeparator = args ? args.decimalSeparator : undefined;
        var minDecimalDigits = args ? args.minDecimalDigits : undefined;
        var maxDecimalDigits = args ? args.maxDecimalDigits : undefined;
        if (!Util.isDefined(minDecimalDigits)) {
            minDecimalDigits = this._minDecimalDigits;
        }
        if (!Util.isDefined(maxDecimalDigits)) {
            maxDecimalDigits = this._maxDecimalDigits;
        }
        var formattedRealValue = value;
        var formatterArgs = {
            minimumFractionDigits: minDecimalDigits,
            maximumFractionDigits: maxDecimalDigits
        };
        if (Util.isDefined(locale)) {
            formattedRealValue = new Intl.NumberFormat(locale, formatterArgs).format(value);
        }
        else if (!Util.isDefined(thousandSeparator) || !Util.isDefined(decimalSeparator)) {
            formattedRealValue = new Intl.NumberFormat(this._locale, formatterArgs).format(value);
        }
        else {
            var realValue = parseFloat(value);
            if (!isNaN(realValue)) {
                formattedRealValue = String(realValue);
                var tmpStr = realValue.toFixed(maxDecimalDigits);
                tmpStr = tmpStr.replace('.', decimalSeparator);
                if (grouping) {
                    var parts = tmpStr.split(decimalSeparator);
                    if (parts.length > 0) {
                        parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, thousandSeparator);
                        formattedRealValue = parts.join(decimalSeparator);
                    }
                }
                else {
                    formattedRealValue = tmpStr;
                }
            }
        }
        return formattedRealValue;
    };
    NumberService.prototype.getPercentValue = function (value, args) {
        var valueBase = args ? args.valueBase : undefined;
        var parsedValue = value;
        switch (valueBase) {
            case 100:
                break;
            case 1:
            default:
                parsedValue = parsedValue * 100;
                break;
        }
        var formattedPercentValue = this.getRealValue(parsedValue, args) + ' %';
        return formattedPercentValue;
    };
    NumberService.DEFAULT_DECIMAL_DIGITS = 2;
    return NumberService;
}());
export { NumberService };
//# sourceMappingURL=number.service.js.map