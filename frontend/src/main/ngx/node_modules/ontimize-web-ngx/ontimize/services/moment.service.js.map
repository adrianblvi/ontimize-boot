{"version":3,"file":"moment.service.js","sourceRoot":"","sources":["../../../tmp/ontimize/services/moment.service.ts"],"names":[],"mappings":"AAAA,OAAO,MAAM,MAAM,QAAQ,CAAC;AAG5B,OAAO,EAAE,SAAS,EAAU,MAAM,sBAAsB,CAAC;AAEzD;IASE,uBAAsB,QAAkB;QAAlB,aAAQ,GAAR,QAAQ,CAAU;QACtC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,gBAAgB,EAAE,CAAC;QAC/D,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IACjC,CAAC;IAED,4BAAI,GAAJ,UAAK,MAAc;QACjB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;IACxB,CAAC;IAED,iCAAS,GAAT,UAAU,KAAU,EAAE,MAAe,EAAE,MAAe;QACpD,IAAI,MAAM,GAAG,EAAE,CAAC;QAChB,IAAI,CAAC,MAAM,EAAE;YACX,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC;SACvB;QACD,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YAC7B,MAAM,GAAG,MAAM,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC;SACvG;aAAM;YACL,MAAM,GAAG,MAAM,CAAC,KAAK,EAAE,aAAa,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC;SAClH;QACD,MAAM,GAAG,CAAC,MAAM,KAAK,cAAc,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC;QACnD,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,iCAAS,GAAT;QACE,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IA9BM,0BAAY,GAAG,CAAC,YAAY,EAAE,YAAY,EAAE,YAAY,EAAE,uBAAuB,EAAE,0BAA0B,EAAE,sBAAsB,CAAC,CAAC;IACvI,2BAAa,GAAW,GAAG,CAAC;IA+BrC,oBAAC;CAAA,AApCD,IAoCC;SApCY,aAAa","sourcesContent":["import moment from 'moment';\n\nimport { Injector } from '@angular/core';\nimport { AppConfig, Config } from '../config/app-config';\n\nexport class MomentService {\n\n  // HTML5 input date: YYYY-MM-DD // locale ES-es: DD-MM-YYYY // locale EN-en: MM-DD-YYYY // ISO 8601:\n  // YYYY-MM-DDThh:mm:ss.S // UTC: YYYY-MM-DD hh:mm:ssZ\n  static DATE_FORMATS = ['YYYY-MM-DD', 'DD-MM-YYYY', 'MM-DD-YYYY', 'YYYY-MM-DDThh:mm:ss.S', 'YYYY-MM-DDThh:mm:ss.SSSZ', 'YYYY-MM-DD hh:mm:ssZ'];\n  static defaultFormat: string = 'L';\n  private _locale: string;\n  private _config: Config;\n\n  constructor(protected injector: Injector) {\n    this._config = this.injector.get(AppConfig).getConfiguration();\n    this.load(this._config.locale);\n  }\n\n  load(locale: string) {\n    this._locale = locale;\n  }\n\n  parseDate(value: any, format?: string, locale?: string): any {\n    var result = '';\n    if (!locale) {\n      locale = this._locale;\n    }\n    if (typeof value === 'number') {\n      result = moment(new Date(value)).locale(locale).format(format ? format : MomentService.defaultFormat);\n    } else {\n      result = moment(value, MomentService.DATE_FORMATS, locale).format(format ? format : MomentService.defaultFormat);\n    }\n    result = (result === 'Invalid date') ? '' : result;\n    return result;\n  }\n\n  getLocale() {\n    return this._locale;\n  }\n\n}\n"]}