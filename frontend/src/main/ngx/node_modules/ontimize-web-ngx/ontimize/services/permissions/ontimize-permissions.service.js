import { share } from 'rxjs/operators';
import { Injector, Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable } from 'rxjs';
import { LoginService } from '../../services';
import { AppConfig } from '../../config/app-config';
import { Util, Codes } from '../../utils';
var OntimizePermissionsService = (function () {
    function OntimizePermissionsService(injector) {
        this.injector = injector;
        this.entity = '';
        this._sessionid = -1;
        this.httpClient = this.injector.get(HttpClient);
        this._config = this.injector.get(AppConfig);
        this._appConfig = this._config.getConfiguration();
    }
    OntimizePermissionsService.prototype.getDefaultServiceConfiguration = function () {
        var loginService = this.injector.get(LoginService);
        var servConfig = {};
        servConfig[Codes.SESSION_KEY] = loginService.getSessionInfo();
        return servConfig;
    };
    OntimizePermissionsService.prototype.configureService = function (permissionsConfig) {
        var config = this.getDefaultServiceConfiguration();
        this._urlBase = config.urlBase ? config.urlBase : this._appConfig['apiEndpoint'];
        this._sessionid = config.session ? config.session.id : -1;
        this._user = config.session ? config.session.user : '';
        if (Util.isDefined(permissionsConfig)) {
            if (permissionsConfig.entity !== undefined) {
                this.entity = permissionsConfig.entity;
            }
            if (permissionsConfig.keyColumn !== undefined) {
                this.keyColumn = permissionsConfig.keyColumn;
            }
            if (permissionsConfig.valueColumn !== undefined) {
                this.valueColumn = permissionsConfig.valueColumn;
            }
        }
    };
    OntimizePermissionsService.prototype.loadPermissions = function () {
        var kv = {};
        kv[this.keyColumn] = this._user;
        var av = [this.valueColumn];
        var url = this._urlBase + '/query';
        var options = {
            headers: this.buildHeaders()
        };
        var body = JSON.stringify({
            user: this._user,
            sessionid: this._sessionid,
            type: 1,
            entity: this.entity,
            kv: kv,
            av: av
        });
        var self = this;
        var dataObservable = new Observable(function (_innerObserver) {
            self.httpClient.post(url, body, options).subscribe(function (res) {
                var permissions = {};
                if ((res.code === Codes.ONTIMIZE_SUCCESSFUL_CODE) && Util.isDefined(res.data)) {
                    var response = res.data;
                    if ((response.length === 1) && Util.isObject(response[0])) {
                        var permissionsResp = response[0];
                        try {
                            permissions = permissionsResp.hasOwnProperty(self.valueColumn) ? JSON.parse(permissionsResp[self.valueColumn]) : {};
                        }
                        catch (e) {
                            console.warn('[OntimizePermissionsService: permissions parsing failed]');
                        }
                    }
                }
                _innerObserver.next(permissions);
            }, function (error) {
                _innerObserver.error(error);
            }, function () { return _innerObserver.complete(); });
        });
        return dataObservable.pipe(share());
    };
    OntimizePermissionsService.prototype.buildHeaders = function () {
        return new HttpHeaders({
            'Access-Control-Allow-Origin': '*',
            'Content-Type': 'application/json;charset=UTF-8'
        });
    };
    OntimizePermissionsService.decorators = [
        { type: Injectable },
    ];
    OntimizePermissionsService.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    return OntimizePermissionsService;
}());
export { OntimizePermissionsService };
//# sourceMappingURL=ontimize-permissions.service.js.map