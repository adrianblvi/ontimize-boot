{"version":3,"file":"ontimize-file.service.js","sourceRoot":"","sources":["../../../tmp/ontimize/services/ontimize-file.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { HttpClient, HttpEventType, HttpHeaders, HttpRequest } from '@angular/common/http';\nimport { Injectable, Injector } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { share } from 'rxjs/operators';\nimport { AppConfig, Config } from '../config/app-config';\nimport { LoginService } from '../services';\nimport { Codes, ServiceUtils } from '../utils';\n\n@Injectable()\nexport class OntimizeFileService {\n\n  public path: string = '';\n\n  protected httpClient: HttpClient;\n  protected _sessionid: string;\n  protected _urlBase: string;\n  protected _appConfig: Config;\n  protected _config: AppConfig;\n\n  constructor(protected injector: Injector) {\n    this.httpClient = this.injector.get(HttpClient);\n    this._config = this.injector.get(AppConfig);\n    this._appConfig = this._config.getConfiguration();\n  }\n\n  public getDefaultServiceConfiguration(serviceName?: string) {\n    let loginService: LoginService = this.injector.get(LoginService);\n    let configuration = this._config.getServiceConfiguration();\n\n    let servConfig = {};\n    if (serviceName && configuration.hasOwnProperty(serviceName)) {\n      servConfig = configuration[serviceName];\n    }\n    servConfig[Codes.SESSION_KEY] = loginService.getSessionInfo();\n    return servConfig;\n  }\n\n  public configureService(config: any): void {\n    this._urlBase = config.urlBase ? config.urlBase : this._appConfig['apiEndpoint'];\n    this._sessionid = config.session ? config.session.id : -1;\n    this.path = config.path;\n  }\n\n  public get urlBase(): string {\n    return this._urlBase;\n  }\n\n  public set urlBase(value: string) {\n    this._urlBase = value;\n  }\n\n  /**\n   * Sends file/s upload request/s\n   *\n   * @param files the array of files to upload\n   * @param entity the entity\n   */\n  public upload(files: any[], entity: string, data?: Object): Observable<any> {\n    const url = this._urlBase + this.path + '/' + entity;\n\n    const headers: HttpHeaders = new HttpHeaders({\n      'Access-Control-Allow-Origin': '*',\n      'Authorization': 'Bearer ' + this._sessionid\n    });\n\n    let _innerObserver: any;\n    const dataObservable = new Observable(observer => _innerObserver = observer).pipe(share());\n\n    let toUpload: any = new FormData();\n    files.forEach(item => {\n      item.prepareToUpload();\n      item.isUploading = true;\n      toUpload.append('name', item.name);\n      toUpload.append('file', item.file);\n    });\n    if (data) {\n      toUpload.append('data', JSON.stringify(data));\n    }\n\n    const request = new HttpRequest('POST', url, toUpload, {\n      headers: headers,\n      reportProgress: true\n    });\n\n    const self = this;\n    this.httpClient.request(request).subscribe(resp => {\n      if (HttpEventType.UploadProgress === resp.type) {\n        // Upload progress event received\n        let progressData = {\n          loaded: resp.loaded,\n          total: resp.total\n        };\n        _innerObserver.next(progressData);\n      } else if (HttpEventType.Response === resp.type) {\n        // Full response received\n        if (resp.body) {\n          if (resp.body['code'] === 3) {\n            self.redirectLogin(true);\n          } else if (resp.body['code'] === 1) {\n            _innerObserver.error(resp.body['message']);\n          } else if (resp.body['code'] === 0) {\n            // RESPONSE\n            _innerObserver.next(resp.body);\n          } else {\n            // Unknow state -> error\n            _innerObserver.error('Service unavailable');\n          }\n        } else {\n          _innerObserver.next(resp.body);\n        }\n      }\n    }, error => {\n      console.error(error);\n      if (error.status === 401) {\n        self.redirectLogin(true);\n      } else {\n        _innerObserver.error(error);\n      }\n    },\n      () => _innerObserver.complete());\n\n    return dataObservable;\n  }\n\n  protected redirectLogin(sessionExpired: boolean = false) {\n    let router = this.injector.get(Router);\n    const loginService = this.injector.get(LoginService);\n    if (sessionExpired) {\n      loginService.sessionExpired();\n    }\n    ServiceUtils.redirectLogin(router, sessionExpired);\n  }\n\n}\n"]}