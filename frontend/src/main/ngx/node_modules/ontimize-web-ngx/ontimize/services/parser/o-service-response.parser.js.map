{"version":3,"file":"o-service-response.parser.js","sourceRoot":"","sources":["../../../../tmp/ontimize/services/parser/o-service-response.parser.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,eAAe,CAAC;AAGrD,OAAO,EAAE,KAAK,EAAgB,MAAM,aAAa,CAAC;AAElD;IAGE,uCACY,QAAkB;QAAlB,aAAQ,GAAR,QAAQ,CAAU;IAC1B,CAAC;IAEL,+DAAuB,GAAvB,UAAwB,IAAI,EAAE,UAA2B,EAAE,OAAqB;QAC9E,IAAI,IAAI,IAAI,IAAI,CAAC,IAAI,KAAK,KAAK,CAAC,0BAA0B,EAAE;YAC1D,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;SAC7B;aAAM,IAAI,IAAI,IAAI,IAAI,CAAC,IAAI,KAAK,KAAK,CAAC,oBAAoB,EAAE;YAC3D,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SAChC;aAAM,IAAI,IAAI,IAAI,IAAI,CAAC,IAAI,KAAK,KAAK,CAAC,wBAAwB,EAAE;YAC/D,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACvB;aAAM;YAEL,UAAU,CAAC,KAAK,CAAC,qBAAqB,CAAC,CAAC;SACzC;IACH,CAAC;IAED,iEAAyB,GAAzB,UAA0B,KAAK,EAAE,UAA2B,EAAE,OAAqB;QACjF,IAAI,KAAK,CAAC,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE;YACrF,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;SAC7B;aAAM;YACL,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;SACzB;IACH,CAAC;;gBA1BF,UAAU;;;gBALU,QAAQ;;IAiC7B,oCAAC;CAAA,AA5BD,IA4BC;SA3BY,6BAA6B","sourcesContent":["import { Injectable, Injector } from '@angular/core';\nimport { Subscriber } from 'rxjs';\n\nimport { Codes, IAuthService } from '../../utils';\n\n@Injectable()\nexport class OntimizeServiceResponseParser {\n\n  constructor(\n    protected injector: Injector\n  ) { }\n\n  parseSuccessfulResponse(resp, subscriber: Subscriber<any>, service: IAuthService) {\n    if (resp && resp.code === Codes.ONTIMIZE_UNAUTHORIZED_CODE) {\n      service.redirectLogin(true);\n    } else if (resp && resp.code === Codes.ONTIMIZE_FAILED_CODE) {\n      subscriber.error(resp.message);\n    } else if (resp && resp.code === Codes.ONTIMIZE_SUCCESSFUL_CODE) {\n      subscriber.next(resp);\n    } else {\n      // Unknow state -> error\n      subscriber.error('Service unavailable');\n    }\n  }\n\n  parseUnsuccessfulResponse(error, subscriber: Subscriber<any>, service: IAuthService) {\n    if (error.status !== 500 && (error.status === 401 || error.status === 0) && !error.ok) {\n      service.redirectLogin(true);\n    } else {\n      subscriber.error(error);\n    }\n  }\n\n}\n"]}