var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { TranslateHttpLoader } from '@ngx-translate/http-loader';
import { Observable, combineLatest } from 'rxjs';
import { share } from 'rxjs/operators';
import { AppConfig } from '../../config/app-config';
import { Codes } from '../../utils';
import { OTranslateService } from './o-translate.service';
var OTranslateHttpLoader = (function (_super) {
    __extends(OTranslateHttpLoader, _super);
    function OTranslateHttpLoader(httpClient, prefix, suffix, injector) {
        if (prefix === void 0) { prefix = OTranslateService.ASSETS_PATH; }
        if (suffix === void 0) { suffix = OTranslateService.ASSETS_EXTENSION; }
        var _this = _super.call(this, httpClient, prefix, suffix) || this;
        _this.injector = injector;
        _this.appConfig = _this.injector.get(AppConfig);
        _this.httpClient = httpClient;
        return _this;
    }
    OTranslateHttpLoader.prototype.getAssetsPath = function () {
        return this.prefix;
    };
    OTranslateHttpLoader.prototype.getAssetsExtension = function () {
        return this.suffix;
    };
    OTranslateHttpLoader.prototype.getLocalTranslation = function (lang) {
        var innerObserver;
        var dataObservable = new Observable(function (observer) { return innerObserver = observer; }).pipe(share());
        _super.prototype.getTranslation.call(this, lang)
            .subscribe(function (res) {
            innerObserver.next(res);
            innerObserver.complete();
        }, function (error) {
            innerObserver.next(undefined);
        }, function () { return innerObserver.complete(); });
        return dataObservable;
    };
    OTranslateHttpLoader.prototype.getTranslation = function (lang) {
        var translationOrigins = [];
        translationOrigins.push(this.getLocalTranslation(lang));
        if (this.appConfig.useRemoteBundle()) {
            translationOrigins.push(this.getRemoteBundle(lang));
        }
        var innerObserver;
        var dataObservable = new Observable(function (observer) { return innerObserver = observer; }).pipe(share());
        combineLatest.apply(void 0, translationOrigins).subscribe(function (res) {
            var staticBundle = res[0] || {};
            var remoteBundle = res[1] || {};
            var allBundles = Object.assign(staticBundle, remoteBundle);
            innerObserver.next(allBundles);
        });
        return dataObservable;
    };
    OTranslateHttpLoader.prototype.getRemoteBundle = function (lang) {
        var _this = this;
        var bundleEndpoint = this.appConfig.getBundleEndpoint();
        var innerObserver;
        var dataObservable = new Observable(function (observer) { return innerObserver = observer; }).pipe(share());
        if (!bundleEndpoint) {
            innerObserver.next([]);
        }
        var url = bundleEndpoint + '?lang=' + lang;
        this.httpClient.get(url).subscribe(function (resp) {
            var response = {};
            if (resp.code === Codes.ONTIMIZE_SUCCESSFUL_CODE) {
                response = _this.parseBundleResponse(resp.data);
            }
            innerObserver.next(response);
        }, function (error) {
            console.log('Remote Bundle service is not available');
            innerObserver.next(error);
        }, function () { return innerObserver.complete(); });
        return dataObservable;
    };
    OTranslateHttpLoader.prototype.parseBundleResponse = function (data) {
        var result = {};
        data.forEach(function (item) {
            result[item[OTranslateHttpLoader.BUNDLE_KEY]] = item[OTranslateHttpLoader.BUNDLE_VALUE];
        });
        return result;
    };
    OTranslateHttpLoader.BUNDLE_KEY = 'key';
    OTranslateHttpLoader.BUNDLE_VALUE = 'value';
    return OTranslateHttpLoader;
}(TranslateHttpLoader));
export { OTranslateHttpLoader };
//# sourceMappingURL=o-translate-http-loader.js.map