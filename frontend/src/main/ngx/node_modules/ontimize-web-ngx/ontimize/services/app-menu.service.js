import { Injector, Injectable } from '@angular/core';
import { Codes } from '../utils';
import { AppConfig } from '../config/app-config';
var AppMenuService = (function () {
    function AppMenuService(injector) {
        this.injector = injector;
        this._config = this.injector.get(AppConfig);
        this.MENU_ROOTS = this._config.getMenuConfiguration();
        this.ALL_MENU_ITEMS = [];
        for (var i = 0, len = this.MENU_ROOTS.length; i < len; i++) {
            var item = this.MENU_ROOTS[i];
            this.ALL_MENU_ITEMS = this.ALL_MENU_ITEMS.concat(this.getMenuItems(item));
        }
    }
    AppMenuService.prototype.getMenuRoots = function () {
        return this.MENU_ROOTS;
    };
    AppMenuService.prototype.getMenuRootById = function (id) {
        return this.MENU_ROOTS.find(function (c) { return c.id === id; });
    };
    AppMenuService.prototype.getAllMenuItems = function () {
        return this.ALL_MENU_ITEMS;
    };
    AppMenuService.prototype.getMenuItemById = function (id) {
        return this.ALL_MENU_ITEMS.find(function (i) { return i.id === id; });
    };
    AppMenuService.prototype.getMenuItemType = function (item) {
        var type;
        switch (true) {
            case (item.route === Codes.LOGIN_ROUTE):
                type = 'logout';
                break;
            case (item.route !== undefined):
                type = 'route';
                break;
            case (item.action !== undefined):
                type = 'action';
                break;
            case (item.locale !== undefined):
                type = 'locale';
                break;
            case (item.user !== undefined):
                type = 'user-info';
                break;
            case (item.items !== undefined):
                type = 'group';
                break;
            default:
                type = 'default';
                break;
        }
        return type;
    };
    AppMenuService.prototype.isMenuGroup = function (item) {
        return this.getMenuItemType(item) === 'group';
    };
    AppMenuService.prototype.getMenuItems = function (item) {
        if (item.items !== undefined) {
            return item.items;
        }
        return [item];
    };
    AppMenuService.decorators = [
        { type: Injectable },
    ];
    AppMenuService.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    return AppMenuService;
}());
export { AppMenuService };
//# sourceMappingURL=app-menu.service.js.map