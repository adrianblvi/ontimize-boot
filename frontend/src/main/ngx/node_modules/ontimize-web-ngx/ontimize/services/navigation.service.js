import { Injectable, Injector, EventEmitter } from '@angular/core';
import { NavigationEnd, Router } from '@angular/router';
import { Location } from '@angular/common';
import { ReplaySubject } from 'rxjs';
import { map, filter } from 'rxjs/operators';
import { Codes, Util } from '../utils';
import { ObservableWrapper } from '../util/async';
import { LocalStorageService } from './local-storage.service';
var ONavigationItem = (function () {
    function ONavigationItem(value) {
        this.url = value['url'] ? value['url'] : '';
        this.queryParams = value[Codes.QUERY_PARAMS] ? value[Codes.QUERY_PARAMS] : {};
        this.text = value['text'] ? value['text'] : '';
        this.displayText = value['displayText'] ? value['displayText'] : '';
        this.formRoutes = value['formRoutes'];
        this.activeFormMode = value['activeFormMode'];
        this.keysValues = value['keysValues'];
        this.queryConfiguration = value['queryConfiguration'];
    }
    ONavigationItem.prototype.getActiveModePath = function () {
        var result;
        if (Util.isDefined(this.activeFormMode)) {
            result = (this.formRoutes || {})[this.activeFormMode];
        }
        return result;
    };
    ONavigationItem.prototype.findAndMergeNavigationItem = function (storageData) {
        var _this = this;
        if (storageData === void 0) { storageData = []; }
        var storedItem = storageData.find(function (element) { return element.url === _this.url; });
        if (storedItem) {
            this[Codes.QUERY_PARAMS] = storedItem[Codes.QUERY_PARAMS];
            this.displayText = storedItem.displayText;
            this.formRoutes = storedItem.formRoutes;
            this.formLayoutRoutes = storedItem.formLayoutRoutes;
            this.activeFormMode = storedItem.activeFormMode;
            this.keysValues = storedItem.keysValues;
            this.queryConfiguration = storedItem.queryConfiguration;
        }
    };
    ONavigationItem.prototype.isInsertFormRoute = function () {
        return this.activeFormMode === 'insertFormRoute';
    };
    ONavigationItem.prototype.getInsertFormRoute = function () {
        var routes = this.formRoutes;
        return routes ? (routes.insertFormRoute || Codes.DEFAULT_INSERT_ROUTE) : Codes.DEFAULT_INSERT_ROUTE;
    };
    ONavigationItem.prototype.getEditFormRoute = function () {
        var routes = this.formRoutes;
        return routes ? (routes.editFormRoute || Codes.DEFAULT_EDIT_ROUTE) : Codes.DEFAULT_EDIT_ROUTE;
    };
    ONavigationItem.prototype.getDetailFormRoute = function () {
        var routes = this.formRoutes;
        return routes ? (routes.detailFormRoute || Codes.DEFAULT_DETAIL_ROUTE) : Codes.DEFAULT_DETAIL_ROUTE;
    };
    ONavigationItem.prototype.isMainFormLayoutManagerComponent = function () {
        return Util.isDefined(this.formLayoutRoutes);
    };
    ONavigationItem.prototype.getFormRoutes = function () {
        return this.formRoutes;
    };
    ONavigationItem.prototype.setFormRoutes = function (arg) {
        if (arg && arg.mainFormLayoutManagerComponent) {
            this.formLayoutRoutes = arg;
        }
        else {
            this.formRoutes = arg;
        }
    };
    ONavigationItem.prototype.deleteActiveFormMode = function () {
        this.activeFormMode = undefined;
    };
    return ONavigationItem;
}());
export { ONavigationItem };
var MAXIMIUM_NAVIGATION_HEAP_SIZE = 15;
var NavigationService = (function () {
    function NavigationService(injector) {
        var _this = this;
        this.injector = injector;
        this.currentTitle = null;
        this.visible = true;
        this.navigationItems = [];
        this.allNavigationItems = [];
        this.navigationEventsSource = new ReplaySubject(1);
        this.navigationEvents$ = this.navigationEventsSource.asObservable();
        this._titleEmitter = new EventEmitter();
        this._visibleEmitter = new EventEmitter();
        this._sidenavEmitter = new EventEmitter();
        this.router = this.injector.get(Router);
        this.localStorageService = this.injector.get(LocalStorageService);
        this.location = this.injector.get(Location);
        this.location.subscribe(function (val) {
            var previousRoute = _this.getPreviousRouteData();
            var qParams = Object.keys(previousRoute.queryParams);
            var arr = [];
            qParams.forEach(function (p) {
                arr.push(p + "=" + previousRoute.queryParams[p]);
            });
            var fullUrl = "/" + previousRoute.url;
            if (arr.length > 0) {
                fullUrl = "/" + previousRoute.url + "?" + arr.join('&');
            }
            if (fullUrl === val.url) {
                _this.navigationItems.pop();
            }
        });
    }
    NavigationService.prototype.initialize = function () {
        var _this = this;
        var self = this;
        var navEndEvents = this.router.events.pipe(filter(function (event) { return event instanceof NavigationEnd; }));
        navEndEvents
            .pipe(map(function () { return _this.router.routerState.root; }))
            .pipe(map(function (route) {
            while (route.firstChild) {
                route = route.firstChild;
            }
            return route;
        }))
            .pipe(filter(function (route) { return route.outlet === 'primary'; }))
            .subscribe(self.parseNavigationItems.bind(self));
    };
    NavigationService.prototype.parseNavigationItems = function (activatedRoute) {
        var storedNavigation = this.getStoredData();
        var route = this.router.routerState.root.snapshot;
        var url = '';
        var navigationItems = [];
        while (Util.isDefined(route.firstChild)) {
            route = route.firstChild;
            if (!route || !route.url || route.routeConfig === null || !route.routeConfig.path) {
                continue;
            }
            var lastNavData = navigationItems[navigationItems.length - 1];
            var parsedRoute = this.parseRoute(url, route.url, lastNavData);
            url = parsedRoute.url;
            if (storedNavigation.length > 1 && parsedRoute.routeArr.length > 0) {
                var lastStored = storedNavigation[storedNavigation.length - 1];
                if (lastStored.url === url) {
                    var newItem = new ONavigationItem(lastStored);
                    var newItemActivePath = newItem.getActiveModePath();
                    if (!newItemActivePath || parsedRoute.routeArr.length > newItemActivePath.split('/').length) {
                        navigationItems.push(newItem);
                        var parsed = this.parseRoute(url, parsedRoute.routeArr, newItem);
                        url = parsed.url;
                        parsedRoute.text = parsed.text;
                    }
                }
            }
            var formRoutes = undefined;
            if (lastNavData && lastNavData.formLayoutRoutes) {
                formRoutes = Object.assign({}, lastNavData.formLayoutRoutes);
            }
            var navigationItem = new ONavigationItem({
                url: url,
                queryParams: route.queryParams,
                text: parsedRoute.text,
                formRoutes: formRoutes,
                activeFormMode: formRoutes ? (lastNavData && lastNavData.activeFormMode) : undefined
            });
            navigationItem.findAndMergeNavigationItem(storedNavigation);
            navigationItems.push(navigationItem);
        }
        if (navigationItems.length > 1) {
            navigationItems[navigationItems.length - 1].terminal = true;
        }
        var mergedNavigation = this.mergeNavigationItems(navigationItems, storedNavigation);
        this.setNavigationItems(navigationItems, mergedNavigation);
    };
    NavigationService.prototype.parseRoute = function (url, routeSegments, navData) {
        var text = '';
        var modePathArr = [];
        var modePath = navData ? navData.getActiveModePath() : undefined;
        if (modePath && modePath.length > 0) {
            modePathArr = modePath.split('/');
            var detailRoute = navData.getDetailFormRoute();
            if (Util.isDefined(detailRoute)) {
                url += url.length > 0 ? ('/' + detailRoute) : detailRoute;
            }
        }
        var routeArr = [];
        for (var i = 0, len = routeSegments.length; i < len; i++) {
            var s = routeSegments[i];
            var notModePath = modePathArr.indexOf(s.path) === -1;
            if (notModePath && text.length === 0) {
                text = text.length > 0 ? ('/' + s.path) : s.path;
                url += url.length > 0 ? ('/' + s.path) : s.path;
            }
            else if (notModePath) {
                url += url.length > 0 ? ('/' + s.path) : s.path;
            }
            else {
                routeArr.push(s);
            }
        }
        var activeMode = navData ? navData.activeFormMode : undefined;
        if (modePath && modePath.length > 0 && (activeMode === 'editFormRoute') || (activeMode === 'insertFormRoute')) {
            url += url.length > 0 ? ('/' + modePath) : modePath;
        }
        return {
            url: url,
            text: text,
            routeArr: routeArr
        };
    };
    NavigationService.prototype.setNavigationItems = function (navigationItems, mergedNavigationItems) {
        this.navigationItems = mergedNavigationItems;
        this.storeNavigation();
        this.navigationEventsSource.next(navigationItems);
    };
    NavigationService.prototype.getDataToStore = function () {
        return this.navigationItems;
    };
    NavigationService.prototype.getComponentKey = function () {
        return NavigationService.NAVIGATION_STORAGE_KEY;
    };
    NavigationService.prototype.storeNavigation = function () {
        if (this.localStorageService) {
            this.localStorageService.updateComponentStorage(this);
        }
    };
    NavigationService.prototype.setTitle = function (title) {
        this.currentTitle = title;
        this._emitTitleChanged(this.currentTitle);
    };
    NavigationService.prototype.setVisible = function (visible) {
        this.visible = visible;
        this._emitVisibleChanged(this.visible);
    };
    NavigationService.prototype.openSidenav = function () {
        this._emitOpenSidenav();
    };
    NavigationService.prototype.closeSidenav = function () {
        this._emitCloseSidenav();
    };
    NavigationService.prototype.onTitleChange = function (onNext) {
        return ObservableWrapper.subscribe(this._titleEmitter, onNext);
    };
    NavigationService.prototype.onVisibleChange = function (onNext) {
        return ObservableWrapper.subscribe(this._visibleEmitter, onNext);
    };
    NavigationService.prototype.onSidenavChange = function (onNext) {
        return ObservableWrapper.subscribe(this._sidenavEmitter, onNext);
    };
    NavigationService.prototype._emitTitleChanged = function (title) {
        ObservableWrapper.callEmit(this._titleEmitter, title);
    };
    NavigationService.prototype._emitVisibleChanged = function (visible) {
        ObservableWrapper.callEmit(this._visibleEmitter, visible);
    };
    NavigationService.prototype._emitOpenSidenav = function () {
        ObservableWrapper.callEmit(this._sidenavEmitter, 'open');
    };
    NavigationService.prototype._emitCloseSidenav = function () {
        ObservableWrapper.callEmit(this._sidenavEmitter, 'close');
    };
    NavigationService.prototype.storeFormRoutes = function (routes, activeMode, queryConf) {
        if (queryConf === void 0) { queryConf = undefined; }
        if (this.navigationItems.length > 0) {
            this.navigationItems[this.navigationItems.length - 1].setFormRoutes(routes);
            this.navigationItems[this.navigationItems.length - 1].activeFormMode = activeMode;
            if (queryConf) {
                this.navigationItems[this.navigationItems.length - 1].keysValues = queryConf.keysValues;
                delete queryConf.keysValues;
                if (Object.keys(queryConf).length > 0) {
                    this.navigationItems[this.navigationItems.length - 1].queryConfiguration = queryConf;
                }
            }
            this.storeNavigation();
        }
    };
    NavigationService.prototype.getStoredData = function () {
        var storageData = this.localStorageService.getComponentStorage(this);
        var result = [];
        Object.keys(storageData).forEach(function (key) { return result.push(new ONavigationItem(storageData[key])); });
        return result;
    };
    NavigationService.prototype.getPreviousRouteData = function () {
        var result;
        var len = this.navigationItems.length;
        if (len >= 2) {
            result = this.navigationItems[len - 2];
            if (result && result.formRoutes && result.formRoutes.mainFormLayoutManagerComponent && this.navigationItems[len - 3]) {
                var parent_1 = this.navigationItems[len - 3];
                if (parent_1.isMainFormLayoutManagerComponent()) {
                    result = parent_1;
                }
            }
        }
        return result;
    };
    NavigationService.prototype.removeLastItem = function () {
        this.navigationItems.pop();
        this.storeNavigation();
    };
    NavigationService.prototype.getLastItem = function () {
        var result;
        if (this.navigationItems.length > 0) {
            result = this.navigationItems[this.navigationItems.length - 1];
        }
        return result;
    };
    NavigationService.prototype.deleteActiveFormMode = function (arg) {
        arg.deleteActiveFormMode();
        this.storeNavigation();
    };
    NavigationService.prototype.mergeNavigationItems = function (navigationItems, storedNavigation) {
        if (storedNavigation.length === 0 || storedNavigation.length > MAXIMIUM_NAVIGATION_HEAP_SIZE) {
            return navigationItems;
        }
        var result = [];
        var lastCommonIndex;
        for (var i = navigationItems.length - 1; i >= 0; i--) {
            for (var j = storedNavigation.length - 1; j >= 0; j--) {
                if (storedNavigation[j].url === navigationItems[i].url && i !== navigationItems.length - 1) {
                    lastCommonIndex = i;
                    break;
                }
            }
            if (lastCommonIndex !== undefined) {
                break;
            }
        }
        storedNavigation.forEach(function (s) { return result.push(s); });
        if (lastCommonIndex !== undefined) {
            for (var j = lastCommonIndex + 1, len = navigationItems.length; j < len; j++) {
                if (storedNavigation[storedNavigation.length - 1].url !== navigationItems[j].url) {
                    result.push(navigationItems[j]);
                }
            }
        }
        return result;
    };
    NavigationService.NAVIGATION_STORAGE_KEY = 'nav_service';
    NavigationService.decorators = [
        { type: Injectable },
    ];
    NavigationService.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    return NavigationService;
}());
export { NavigationService };
//# sourceMappingURL=navigation.service.js.map