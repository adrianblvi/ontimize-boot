import { Injector } from '@angular/core';
import { ActivatedRoute, Router, UrlSegment } from '@angular/router';
import { Location } from '@angular/common';
import { Observable } from 'rxjs';
import { ILocalStorageComponent, LocalStorageService } from './local-storage.service';
export declare type ONavigationRoutes = {
    mainFormLayoutManagerComponent?: boolean;
    detailFormRoute: string;
    editFormRoute: string;
    insertFormRoute: string;
};
export declare class ONavigationItem {
    url: string;
    queryParams: Object;
    text: string;
    displayText: string;
    terminal: boolean;
    activeFormMode: string;
    formRoutes: ONavigationRoutes;
    formLayoutRoutes: ONavigationRoutes;
    keysValues: any;
    queryConfiguration: any;
    constructor(value: Object);
    getActiveModePath(): string;
    findAndMergeNavigationItem(storageData?: ONavigationItem[]): void;
    isInsertFormRoute(): boolean;
    getInsertFormRoute(): string;
    getEditFormRoute(): string;
    getDetailFormRoute(): string;
    isMainFormLayoutManagerComponent(): boolean;
    getFormRoutes(): ONavigationRoutes;
    setFormRoutes(arg: ONavigationRoutes): void;
    deleteActiveFormMode(): void;
}
export declare class NavigationService implements ILocalStorageComponent {
    protected injector: Injector;
    static NAVIGATION_STORAGE_KEY: string;
    currentTitle: string;
    visible: boolean;
    protected navigationItems: Array<ONavigationItem>;
    protected allNavigationItems: ONavigationItem[];
    protected router: Router;
    protected localStorageService: LocalStorageService;
    protected location: Location;
    private navigationEventsSource;
    navigationEvents$: Observable<Array<ONavigationItem>>;
    private _titleEmitter;
    private _visibleEmitter;
    private _sidenavEmitter;
    constructor(injector: Injector);
    initialize(): void;
    protected parseNavigationItems(activatedRoute: ActivatedRoute): void;
    protected parseRoute(url: string, routeSegments: UrlSegment[], navData: ONavigationItem): any;
    setNavigationItems(navigationItems: ONavigationItem[], mergedNavigationItems: ONavigationItem[]): void;
    getDataToStore(): Object;
    getComponentKey(): string;
    protected storeNavigation(): void;
    setTitle(title: string): void;
    setVisible(visible: boolean): void;
    openSidenav(): void;
    closeSidenav(): void;
    onTitleChange(onNext: (value: any) => void): Object;
    onVisibleChange(onNext: (value: boolean) => void): Object;
    onSidenavChange(onNext: (value: any) => void): Object;
    private _emitTitleChanged;
    private _emitVisibleChanged;
    private _emitOpenSidenav;
    private _emitCloseSidenav;
    storeFormRoutes(routes: ONavigationRoutes, activeMode: string, queryConf?: any): void;
    protected getStoredData(): any[];
    getPreviousRouteData(): ONavigationItem;
    removeLastItem(): void;
    getLastItem(): ONavigationItem;
    deleteActiveFormMode(arg: ONavigationItem): void;
    protected mergeNavigationItems(navigationItems: ONavigationItem[], storedNavigation: ONavigationItem[]): ONavigationItem[];
}
