{"version":3,"file":"o-translate.service.js","sourceRoot":"","sources":["../../../../tmp/ontimize/services/translate/o-translate.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { EventEmitter, Injectable, Injector } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { Observable, Subscriber } from 'rxjs';\nimport { AppConfig } from '../../config/app-config';\nimport * as CORE_TRANSLATIONS from '../../i18n/i18n';\nimport { MomentService, SnackBarService } from '../../services';\nimport { ObservableWrapper } from '../../util/async';\n\n@Injectable()\nexport class OTranslateService {\n\n  public static ASSETS_PATH = './assets/i18n/';\n  public static ASSETS_EXTENSION = '.json';\n\n  public DEFAULT_LANG = 'en';\n  public onLanguageChanged: EventEmitter<any> = new EventEmitter();\n\n  protected ngxTranslateService: TranslateService;\n  protected momentService: MomentService;\n  protected httpClient: HttpClient;\n\n  protected notFoundLang: Array<String> = [];\n  protected appConfig: AppConfig;\n\n  protected existingLangFiles: Array<String> = [];\n\n  constructor(protected injector: Injector) {\n    this.ngxTranslateService = this.injector.get(TranslateService);\n    this.momentService = this.injector.get(MomentService);\n    this.httpClient = this.injector.get(HttpClient);\n    this.appConfig = this.injector.get(AppConfig);\n  }\n\n  protected checkExistingLangFile(lang: string): Promise<any> {\n    var self = this;\n    return new Promise((resolve) => {\n      if (self.existingLangFiles.indexOf(lang) !== -1) {\n        resolve(true);\n        return;\n      }\n      let localeAssetsPath = (this.ngxTranslateService.currentLoader as any).prefix;\n      let localeAssetsExtension = (this.ngxTranslateService.currentLoader as any).suffix;\n      self.httpClient.get(localeAssetsPath + lang + localeAssetsExtension).subscribe(function () {\n        if (self.existingLangFiles.indexOf(lang) === -1) {\n          self.existingLangFiles.push(lang);\n        }\n        // I18N File loaded successfully\n        resolve(true);\n      }, function () {\n        // I18N File failed to load\n        if (self.notFoundLang.indexOf(lang) === -1) {\n          self.notFoundLang.push(lang);\n        }\n        resolve(false);\n      });\n    });\n  }\n\n  public setDefaultLang(lang: string): void {\n    this.ngxTranslateService.defaultLang = lang;\n    this.checkExistingLangFile(lang).then((exists) => {\n      if (!exists) {\n        console.error('Default language(' + lang + ') has no bundle file defined');\n      }\n    });\n  }\n\n  public get(text: string, values: any[] = []): string {\n    let textTranslated = undefined;\n    try {\n      let bundle = this.ngxTranslateService.get(text, values);\n      if (bundle && bundle['value']) {\n        textTranslated = bundle['value'];\n      }\n      textTranslated = textTranslated === text ? undefined : textTranslated;\n    } catch (e) {\n      textTranslated = undefined;\n    }\n    if (!textTranslated) {\n      let bundle = CORE_TRANSLATIONS.MAP[this.ngxTranslateService.currentLang] || CORE_TRANSLATIONS.MAP[this.DEFAULT_LANG];\n      if (bundle && bundle[text]) {\n        textTranslated = bundle[text];\n      } else {\n        textTranslated = text;\n      }\n    }\n    return textTranslated;\n  }\n\n  public setAppLang(lang: string): Observable<any> {\n    var observable = new Observable(observer => {\n      this.use(lang, observer);\n    });\n    return observable;\n  }\n\n  public use(lang: string, observer?: Subscriber<any>): void {\n    if (lang === undefined) {\n      let newLang = lang || this.DEFAULT_LANG;\n      //setting lang for initializING moment and other components\n      this.propagateLang(newLang, {}, observer);\n    } else {\n      this.checkExistingLangFile(lang).then((exists) => {\n        let newLang = lang;\n        if (!exists) {\n          newLang = this.ngxTranslateService.getDefaultLang();\n          const msg = CORE_TRANSLATIONS.MAP[newLang || this.DEFAULT_LANG]['MESSAGES.ERROR_MISSING_LANG'];\n          this.injector.get(SnackBarService).open(msg, {\n            milliseconds: 2500\n          });\n        }\n        this.ngxTranslateService.use(newLang).subscribe(\n          res => {\n            this.propagateLang(newLang, res, observer);\n          }\n        );\n      });\n    }\n  }\n\n  protected propagateLang(lang: string, langRes?: any, observer?: Subscriber<any>) {\n    const coreBundle = CORE_TRANSLATIONS.MAP[lang || this.DEFAULT_LANG];\n    if (coreBundle !== undefined) {\n      const mixed = Object.assign({}, coreBundle, langRes);\n      this.ngxTranslateService.translations[lang] = mixed;\n    }\n    this.momentService.load(lang);\n    ObservableWrapper.callEmit(this.onLanguageChanged, lang);\n    if (observer) {\n      observer.next(langRes);\n    }\n  }\n\n  public getCurrentLang() {\n    return this.ngxTranslateService.currentLang;\n  }\n\n  public getBrowserLang() {\n    // copying this.ngxTranslateService.getBrowserLang() but with a fix for default selected language (browserLang)\n    if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n      return undefined;\n    }\n    const navigator: any = window.navigator;\n    var browserLang = navigator.languages ? navigator.languages[0] : null;\n    browserLang = navigator.language || browserLang || navigator.browserLanguage || navigator.userLanguage;\n    if (browserLang.indexOf('-') !== -1) {\n      browserLang = browserLang.split('-')[0];\n    }\n    if (browserLang.indexOf('_') !== -1) {\n      browserLang = browserLang.split('_')[0];\n    }\n    return browserLang;\n  }\n\n}\n"]}