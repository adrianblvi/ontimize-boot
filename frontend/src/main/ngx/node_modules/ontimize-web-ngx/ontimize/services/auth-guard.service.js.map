{"version":3,"file":"auth-guard.service.js","sourceRoot":"","sources":["../../../tmp/ontimize/services/auth-guard.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AACrD,OAAO,EAAe,MAAM,EAA+C,MAAM,iBAAiB,CAAC;AACnG,OAAO,EAAE,YAAY,EAAE,gBAAgB,EAAE,MAAM,aAAa,CAAC;AAC7D,OAAO,EAAE,KAAK,EAAE,MAAM,UAAU,CAAC;AACjC,OAAO,EAAE,kBAAkB,EAAE,MAAM,mCAAmC,CAAC;AAEvE;IAQE,0BAAsB,QAAkB;QAAlB,aAAQ,GAAR,QAAQ,CAAU;QACtC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACxC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;QACpD,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;QAC5D,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;IAClE,CAAC;IAED,sCAAW,GAAX,UAAY,IAA4B,EAAE,KAA0B;QAClE,IAAI,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE,CAAC;QAChD,IAAI,MAAM,GAA+B,UAAU,CAAC;QACpD,IAAI,CAAC,UAAU,EAAE;YACf,IAAI,CAAC,kBAAkB,CAAC,OAAO,EAAE,CAAC;YAClC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC;SAC3C;QACD,IAAI,UAAU,EAAE;YACd,IAAI,CAAC,kBAAkB,EAAE,CAAC;YAC1B,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,cAAc,EAAE,EAAE;gBAC7C,MAAM,GAAG,IAAI,CAAC,kBAAkB,CAAC,2BAA2B,EAAE,CAAC;aAChE;SACF;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,6CAAkB,GAAlB;QACE,IAAM,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,cAAc,EAAE,CAAC;QAEvD,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC;YAChC,QAAQ,EAAE,WAAW,CAAC,IAAI;YAC1B,MAAM,EAAE,kCAAkC;SAC3C,CAAC,CAAC;IACL,CAAC;;gBAtCF,UAAU;;;gBANF,QAAQ;;IA6CjB,uBAAC;CAAA,AAvCD,IAuCC;SAtCY,gBAAgB","sourcesContent":["import { Injector, Injectable } from '@angular/core';\nimport { CanActivate, Router, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { LoginService, OUserInfoService } from '../services';\nimport { Codes } from '../utils';\nimport { PermissionsService } from './permissions/permissions.service';\n\n@Injectable()\nexport class AuthGuardService implements CanActivate {\n\n  protected router: Router;\n  protected loginService: LoginService;\n  protected oUserInfoService: OUserInfoService;\n  protected permissionsService: PermissionsService;\n\n  constructor(protected injector: Injector) {\n    this.router = this.injector.get(Router);\n    this.loginService = this.injector.get(LoginService);\n    this.oUserInfoService = this.injector.get(OUserInfoService);\n    this.permissionsService = this.injector.get(PermissionsService);\n  }\n\n  canActivate(next: ActivatedRouteSnapshot, state: RouterStateSnapshot): Promise<boolean> | boolean {\n    let isLoggedIn = this.loginService.isLoggedIn();\n    let result: Promise<boolean> | boolean = isLoggedIn;\n    if (!isLoggedIn) {\n      this.permissionsService.restart();\n      this.router.navigate([Codes.LOGIN_ROUTE]);\n    }\n    if (isLoggedIn) {\n      this.setUserInformation();\n      if (!this.permissionsService.hasPermissions()) {\n        result = this.permissionsService.getUserPermissionsAsPromise();\n      }\n    }\n    return result;\n  }\n\n  setUserInformation() {\n    const sessionInfo = this.loginService.getSessionInfo();\n    // TODO query user information\n    this.oUserInfoService.setUserInfo({\n      username: sessionInfo.user,\n      avatar: './assets/images/user_profile.png'\n    });\n  }\n}\n"]}