var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Injectable } from '@angular/core';
import { TranslateDefaultParser } from '@ngx-translate/core';
import { Util } from '../../utils';
var OTranslateParser = (function (_super) {
    __extends(OTranslateParser, _super);
    function OTranslateParser() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.templateMatcher = /{\s?([0-9][^{}\s]*)\s?}/g;
        return _this;
    }
    OTranslateParser.prototype.interpolate = function (expr, params) {
        if (typeof expr !== 'string' || !params) {
            return expr;
        }
        return expr.replace(this.templateMatcher, function (substring, index) {
            var argValue = Util.isDefined(params[index]) ? params[index] : '';
            return !isNaN(parseInt(index)) ? argValue : substring;
        });
    };
    OTranslateParser.decorators = [
        { type: Injectable },
    ];
    return OTranslateParser;
}(TranslateDefaultParser));
export { OTranslateParser };
//# sourceMappingURL=o-translate.parser.js.map