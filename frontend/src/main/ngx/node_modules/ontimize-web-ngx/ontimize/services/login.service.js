import { EventEmitter, Injectable, Injector } from '@angular/core';
import { Router } from '@angular/router';
import { combineLatest, Observable } from 'rxjs';
import { share } from 'rxjs/operators';
import { AppConfig } from '../config/app-config';
import { DialogService, OntimizeService, ORemoteConfigurationService, PermissionsService } from '../services';
import { Codes, ObservableWrapper, ServiceUtils } from '../utils';
var LoginService = (function () {
    function LoginService(injector) {
        this.injector = injector;
        this.onLogin = new EventEmitter();
        this.onLogout = new EventEmitter();
        this._config = this.injector.get(AppConfig).getConfiguration();
        this.router = this.injector.get(Router);
        this._localStorageKey = this._config['uuid'];
        var sessionInfo = this.getSessionInfo();
        if (sessionInfo && sessionInfo.id && sessionInfo.user && sessionInfo.user.length > 0) {
            this._user = sessionInfo.user;
        }
        this.dialogService = injector.get(DialogService);
    }
    Object.defineProperty(LoginService.prototype, "user", {
        get: function () {
            return this._user;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LoginService.prototype, "localStorageKey", {
        get: function () {
            return this._localStorageKey;
        },
        enumerable: true,
        configurable: true
    });
    LoginService.prototype.configureOntimizeAuthService = function (config) {
        this.ontService = this.injector.get(OntimizeService);
        var servConf = {};
        servConf[Codes.SESSION_KEY] = this.getSessionInfo();
        this.ontService.configureService(servConf);
    };
    LoginService.prototype.retrieveAuthService = function () {
        var _this = this;
        return new Promise(function (resolve) {
            if (_this.ontService !== undefined) {
                resolve(_this.ontService);
            }
            else {
                _this.configureOntimizeAuthService(_this._config);
                resolve(_this.ontService);
            }
        });
    };
    LoginService.prototype.login = function (user, password) {
        this._user = user;
        var self = this;
        var innerObserver;
        var dataObservable = new Observable(function (observer) { return innerObserver = observer; }).pipe(share());
        this.retrieveAuthService().then(function (service) {
            service.startsession(user, password).subscribe(function (resp) {
                self.onLoginSuccess(resp);
                var permissionsService = self.injector.get(PermissionsService);
                var remoteConfigService = self.injector.get(ORemoteConfigurationService);
                var pendingArray = [];
                pendingArray.push(permissionsService.getUserPermissionsAsPromise());
                pendingArray.push(remoteConfigService.initialize());
                combineLatest(pendingArray).subscribe(function () {
                    innerObserver.next();
                    innerObserver.complete();
                });
            }, function (error) {
                self.onLoginError(error);
                innerObserver.error(error);
            });
        });
        return dataObservable.pipe(share());
    };
    LoginService.prototype.onLoginSuccess = function (sessionId) {
        var session = {
            user: this._user,
            id: sessionId
        };
        this.storeSessionInfo(session);
        ObservableWrapper.callEmit(this.onLogin, session);
    };
    LoginService.prototype.onLoginError = function (error) {
        this.dialogService.alert('ERROR', 'MESSAGES.ERROR_LOGIN');
    };
    LoginService.prototype.logout = function () {
        ObservableWrapper.callEmit(this.onLogout, null);
        var self = this;
        var sessionInfo = this.getSessionInfo();
        var dataObservable = new Observable(function (innerObserver) {
            self.retrieveAuthService().then(function (service) {
                service.endsession(sessionInfo.user, sessionInfo.id).subscribe(function (resp) {
                    var remoteConfigService = self.injector.get(ORemoteConfigurationService);
                    remoteConfigService.finalize().subscribe(function () {
                        self.onLogoutSuccess(resp);
                        innerObserver.next();
                        innerObserver.complete();
                    });
                }, function (error) {
                    self.onLogoutError(error);
                    innerObserver.error(error);
                });
            });
        });
        return dataObservable.pipe(share());
    };
    LoginService.prototype.onLogoutSuccess = function (sessionId) {
        if (sessionId === 0) {
            this.sessionExpired();
        }
    };
    LoginService.prototype.onLogoutError = function (error) {
        console.error('Error on logout');
    };
    LoginService.prototype.sessionExpired = function () {
        var sessionInfo = this.getSessionInfo();
        delete sessionInfo.id;
        delete sessionInfo.user;
        this.storeSessionInfo(sessionInfo);
    };
    LoginService.prototype.isLoggedIn = function () {
        var sessionInfo = this.getSessionInfo();
        if (sessionInfo && sessionInfo.id && sessionInfo.user && sessionInfo.user.length > 0) {
            if (isNaN(sessionInfo.id) && sessionInfo.id < 0) {
                return false;
            }
            return true;
        }
        return false;
    };
    LoginService.prototype.storeSessionInfo = function (sessionInfo) {
        if (sessionInfo !== undefined) {
            var info = localStorage.getItem(this._localStorageKey);
            var stored = null;
            if (info && info.length > 0) {
                stored = JSON.parse(info);
            }
            else {
                stored = {};
            }
            stored[Codes.SESSION_KEY] = sessionInfo;
            localStorage.setItem(this._localStorageKey, JSON.stringify(stored));
        }
    };
    LoginService.prototype.getSessionInfo = function () {
        var info = localStorage.getItem(this._localStorageKey);
        if (!info) {
            return {};
        }
        var stored = JSON.parse(info);
        return stored[Codes.SESSION_KEY] || {};
    };
    LoginService.prototype.logoutAndRedirect = function () {
        var _this = this;
        this.logout().subscribe(function () {
            ServiceUtils.redirectLogin(_this.router, false);
        });
    };
    LoginService.prototype.logoutWithConfirmationAndRedirect = function () {
        var _this = this;
        this.dialogService.confirm('CONFIRM', 'MESSAGES.CONFIRM_LOGOUT').then(function (res) {
            if (res) {
                _this.logoutAndRedirect();
            }
        });
    };
    LoginService.decorators = [
        { type: Injectable },
    ];
    LoginService.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    return LoginService;
}());
export { LoginService };
//# sourceMappingURL=login.service.js.map