{"version":3,"file":"o-mat-error.js","sourceRoot":"","sources":["../../../../../tmp/ontimize/shared/material/o-mat-error/o-mat-error.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,cAAc,EAAE,UAAU,EAAE,iBAAiB,EAAE,QAAQ,EAAE,MAAM,EAAE,uBAAuB,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,eAAe,CAAC;AAC/J,OAAO,EAAE,YAAY,EAAE,MAAM,iBAAiB,CAAC;AAC/C,OAAO,EAAE,kBAAkB,EAAE,gBAAgB,EAAE,MAAM,mBAAmB,CAAC;AACzE,OAAO,EAAE,KAAK,EAAE,MAAM,qBAAqB,CAAC;AAE5C,MAAM,CAAC,IAAM,mBAAmB,GAC9B,IAAI,cAAc,CAAmB,qBAAqB,CAAC,CAAC;AAQ9D,IAAI,YAAY,GAAG,CAAC,CAAC;AAErB;IAqBE,4BACY,QAAkB,EAClB,UAAsB,EACtB,EAAqB,EACU,YAA8B;QAH7D,aAAQ,GAAR,QAAQ,CAAU;QAClB,eAAU,GAAV,UAAU,CAAY;QACtB,OAAE,GAAF,EAAE,CAAmB;QATxB,OAAE,GAAW,eAAa,YAAY,EAAI,CAAC;QAC3C,SAAI,GAAW,EAAE,CAAC;QAWzB,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,CAAC;QACrD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,IAAI,UAAU,CAAC;IACxD,CAAC;IAED,sBAAI,+CAAe;aAAnB;YACE,OAAO,IAAI,CAAC,SAAS,KAAK,KAAK,CAAC,oBAAoB,CAAC;QACvD,CAAC;;;OAAA;;gBAjCF,SAAS,SAAC;oBACT,QAAQ,EAAE,WAAW;oBACrB,QAAQ,EAAE,2FAIT;oBACD,eAAe,EAAE,uBAAuB,CAAC,MAAM;oBAC/C,IAAI,EAAE;wBACJ,OAAO,EAAE,WAAW;wBACpB,MAAM,EAAE,OAAO;wBACf,WAAW,EAAE,IAAI;qBAClB;iBACF;;;gBA7BoH,QAAQ;gBAAlF,UAAU;gBAAE,iBAAiB;gDAyCnE,QAAQ,YAAI,MAAM,SAAC,mBAAmB;;;qBAVxC,KAAK;uBACL,KAAK;;IAkBR,yBAAC;CAAA,AAlCD,IAkCC;SApBY,kBAAkB;AAsB/B;IAAA;IAMA,CAAC;;gBANA,QAAQ,SAAC;oBACR,YAAY,EAAE,CAAC,kBAAkB,CAAC;oBAClC,OAAO,EAAE,CAAC,gBAAgB,EAAE,kBAAkB,EAAE,YAAY,CAAC;oBAC7D,OAAO,EAAE,CAAC,kBAAkB,CAAC;iBAC9B;;IAED,sBAAC;CAAA,AAND,IAMC;SADY,eAAe","sourcesContent":["import { Component, Input, InjectionToken, ElementRef, ChangeDetectorRef, Optional, Inject, ChangeDetectionStrategy, Injector, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatFormFieldModule, MatTooltipModule } from '@angular/material';\nimport { Codes } from '../../../util/codes';\n\nexport const O_MAT_ERROR_OPTIONS =\n  new InjectionToken<OMatErrorOptions>('o-mat-error-options');\n\nexport type OMatErrorType = 'standard' | 'lite';\n\nexport interface OMatErrorOptions {\n  type?: OMatErrorType;\n}\n\nlet nextUniqueId = 0;\n\n@Component({\n  selector: 'mat-error',\n  template: `\n    <ng-container *ngIf=\"isStandardError\">\n      {{ text }}\n    </ng-container>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id'\n  }\n})\nexport class OMatErrorComponent {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n  @Input() text: string = '';\n\n  protected errorOptions: OMatErrorOptions;\n  protected errorType: OMatErrorType;\n\n  constructor(\n    protected injector: Injector,\n    protected elementRef: ElementRef,\n    protected cd: ChangeDetectorRef,\n    @Optional() @Inject(O_MAT_ERROR_OPTIONS) errorOptions: OMatErrorOptions\n  ) {\n    this.errorOptions = errorOptions ? errorOptions : {};\n    this.errorType = this.errorOptions.type || 'standard';\n  }\n\n  get isStandardError(): boolean {\n    return this.errorType === Codes.O_MAT_ERROR_STANDARD;\n  }\n}\n\n@NgModule({\n  declarations: [OMatErrorComponent],\n  imports: [MatTooltipModule, MatFormFieldModule, CommonModule],\n  exports: [OMatErrorComponent]\n})\nexport class OMatErrorModule {\n}\n"]}