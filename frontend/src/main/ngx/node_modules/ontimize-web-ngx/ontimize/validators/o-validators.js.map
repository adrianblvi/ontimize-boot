{"version":3,"file":"o-validators.js","sourceRoot":"","sources":["../../../tmp/ontimize/validators/o-validators.ts"],"names":[],"mappings":"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","sourcesContent":["import { FormControl, ValidationErrors } from '@angular/forms';\n\nconst EMAIL_REGEXP = /[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?\\.)+[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?/;\n\n// NIF Regular Expressions\nconst DNI_PATTERN = '^(([0-9]{8})([-]?)([a-zA-Z]{1}))$';\nconst NIE_PATTERN = '^(([x-zX-Z]{1})([-]?)([0-9]{7})([-]?)([a-zA-Z]{1}))$';\nconst DNI_CHECK = 'TRWAGMYFPDXBNJZSQVHLCKET';\nconst NUMBERS = '0123456789';\nexport const TWELVE_HOUR_FORMAT_PATTERN = '^(([0-9]|([01]?[0-9])):([0-9]|([0-5][0-9])) *([AaPp][Mm])*)$';\nexport const TWENTY_FOUR_HOUR_FORMAT_PATTERN = '^([0-9]|([01]?[0-9]|2[0-3])):[0-9]|([0-5][0-9])$';\n\nexport class OValidators {\n\n  /**\n   * Hour validator hh:mm am/pm format\n   */\n  public static twelveHourFormatValidator(control: FormControl): ValidationErrors {\n    const regExp = new RegExp(TWELVE_HOUR_FORMAT_PATTERN);\n    if (control.value && typeof control.value === 'string' && !regExp.test(control.value)) {\n      return { invalidFormatHour: true };\n    }\n    return {};\n  }\n\n  /**\n   * Hour validator HH:mm format\n   */\n  public static twentyFourHourFormatValidator(control: FormControl): ValidationErrors {\n    const regExp = new RegExp(TWENTY_FOUR_HOUR_FORMAT_PATTERN);\n    if (control.value && typeof control.value === 'string' && !regExp.test(control.value)) {\n      return { invalidFormatHour: true };\n    }\n    return {};\n  }\n\n  /**\n   * Email validator\n   */\n  public static emailValidator(control: FormControl): ValidationErrors {\n    if (control.value && control.value.length > 0 && !EMAIL_REGEXP.test(control.value)) {\n      return { invalidEmailAddress: true };\n    }\n    return {};\n  }\n\n  /**\n   * NIF validator\n   */\n  public static nifValidator(control: FormControl): ValidationErrors {\n    const newValue = control.value;\n    const regExp = new RegExp(DNI_PATTERN + '|' + NIE_PATTERN);\n\n    // removing dashes\n    let valueWithoutDashes = '';\n    for (let i in newValue) {\n      if (newValue[i] !== '-') {\n        valueWithoutDashes = valueWithoutDashes + newValue[i];\n      }\n    }\n    if (valueWithoutDashes.length > 1) {\n      const firstChar = valueWithoutDashes.charAt(0);\n      if (NUMBERS.indexOf(firstChar) !== -1) {\n        const number = valueWithoutDashes.substring(0, valueWithoutDashes.length - 1);\n        const pos = parseInt(number, 10) % 23;\n        const expectedLetter = DNI_CHECK.substring(pos, pos + 1);\n        const letter = valueWithoutDashes.charAt(valueWithoutDashes.length - 1);\n        const dniLetterError = (expectedLetter !== letter.toUpperCase());\n        if (dniLetterError) {\n          return { invalidNIFLetter: true };\n        } else {\n          if (!regExp.test(valueWithoutDashes)) {\n            return { invalidNIF: true };\n          }\n        }\n      } else {\n        if (!regExp.test(valueWithoutDashes)) {\n          return { invalidNIF: true };\n        }\n      }\n    }\n    return undefined;\n  }\n\n}\n"]}