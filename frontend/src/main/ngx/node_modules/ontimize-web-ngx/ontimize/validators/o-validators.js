var EMAIL_REGEXP = /[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?\.)+[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?/;
var DNI_PATTERN = '^(([0-9]{8})([-]?)([a-zA-Z]{1}))$';
var NIE_PATTERN = '^(([x-zX-Z]{1})([-]?)([0-9]{7})([-]?)([a-zA-Z]{1}))$';
var DNI_CHECK = 'TRWAGMYFPDXBNJZSQVHLCKET';
var NUMBERS = '0123456789';
export var TWELVE_HOUR_FORMAT_PATTERN = '^(([0-9]|([01]?[0-9])):([0-9]|([0-5][0-9])) *([AaPp][Mm])*)$';
export var TWENTY_FOUR_HOUR_FORMAT_PATTERN = '^([0-9]|([01]?[0-9]|2[0-3])):[0-9]|([0-5][0-9])$';
var OValidators = (function () {
    function OValidators() {
    }
    OValidators.twelveHourFormatValidator = function (control) {
        var regExp = new RegExp(TWELVE_HOUR_FORMAT_PATTERN);
        if (control.value && typeof control.value === 'string' && !regExp.test(control.value)) {
            return { invalidFormatHour: true };
        }
        return {};
    };
    OValidators.twentyFourHourFormatValidator = function (control) {
        var regExp = new RegExp(TWENTY_FOUR_HOUR_FORMAT_PATTERN);
        if (control.value && typeof control.value === 'string' && !regExp.test(control.value)) {
            return { invalidFormatHour: true };
        }
        return {};
    };
    OValidators.emailValidator = function (control) {
        if (control.value && control.value.length > 0 && !EMAIL_REGEXP.test(control.value)) {
            return { invalidEmailAddress: true };
        }
        return {};
    };
    OValidators.nifValidator = function (control) {
        var newValue = control.value;
        var regExp = new RegExp(DNI_PATTERN + '|' + NIE_PATTERN);
        var valueWithoutDashes = '';
        for (var i in newValue) {
            if (newValue[i] !== '-') {
                valueWithoutDashes = valueWithoutDashes + newValue[i];
            }
        }
        if (valueWithoutDashes.length > 1) {
            var firstChar = valueWithoutDashes.charAt(0);
            if (NUMBERS.indexOf(firstChar) !== -1) {
                var number = valueWithoutDashes.substring(0, valueWithoutDashes.length - 1);
                var pos = parseInt(number, 10) % 23;
                var expectedLetter = DNI_CHECK.substring(pos, pos + 1);
                var letter = valueWithoutDashes.charAt(valueWithoutDashes.length - 1);
                var dniLetterError = (expectedLetter !== letter.toUpperCase());
                if (dniLetterError) {
                    return { invalidNIFLetter: true };
                }
                else {
                    if (!regExp.test(valueWithoutDashes)) {
                        return { invalidNIF: true };
                    }
                }
            }
            else {
                if (!regExp.test(valueWithoutDashes)) {
                    return { invalidNIF: true };
                }
            }
        }
        return undefined;
    };
    return OValidators;
}());
export { OValidators };
//# sourceMappingURL=o-validators.js.map