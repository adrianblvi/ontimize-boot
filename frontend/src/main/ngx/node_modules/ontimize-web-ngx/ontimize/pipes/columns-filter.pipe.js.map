{"version":3,"file":"columns-filter.pipe.js","sourceRoot":"","sources":["../../../tmp/ontimize/pipes/columns-filter.pipe.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,IAAI,EAAiB,MAAM,eAAe,CAAC;AAEpD;IAAA;IAuDA,CAAC;IA9CC,qCAAS,GAAT,UAAU,KAAiB,EAAE,IAAS;QAAtC,iBAoCC;QAnCC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,MAAM,IAAI,CAAC,EAAE;YAC7B,OAAO,KAAK,CAAC;SACd;QAED,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QAClE,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,eAAe,CAAC,CAAC;QAE3C,IAAI,CAAC,IAAI,CAAC,aAAa,IAAI,CAAC,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,WAAW,CAAC,MAAM,KAAK,CAAC,EAAE;YAC7E,OAAO,KAAK,CAAC;SACd;QAED,IAAI,KAAK,KAAK,SAAS,IAAI,KAAK,KAAK,IAAI,EAAE;YACzC,OAAO,KAAK,CAAC;SACd;QAED,IAAI,IAAI,GAAG,IAAI,CAAC;QAChB,OAAO,KAAK,CAAC,MAAM,CAAC,UAAC,IAAI;YACvB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBAClD,IAAI,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;gBACpC,IAAI,KAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE;oBAC1B,SAAS;iBACV;gBACD,IAAI,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC;gBAC9B,IAAI,SAAS,EAAE;oBACb,SAAS,GAAG,SAAS,CAAC,QAAQ,EAAE,CAAC;oBACjC,IAAI,KAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE;wBAC5B,SAAS;qBACV;oBAED,IAAI,SAAS,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE;wBACxE,OAAO,IAAI,CAAC;qBACb;iBACF;aACF;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,oCAAQ,GAAR,UAAS,KAAa;QACpB,IAAI,KAAK,KAAK,SAAS,IAAI,KAAK,KAAK,IAAI;eACpC,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;YACvB,OAAO,IAAI,CAAC;SACb;QACD,OAAO,KAAK,CAAC;IACf,CAAC;;gBArDF,IAAI,SAAC;oBACJ,IAAI,EAAE,eAAe;iBACtB;;IAqDD,wBAAC;CAAA,AAvDD,IAuDC;SAnDY,iBAAiB","sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'columnsfilter'\n})\n\nexport class ColumnsFilterPipe implements PipeTransform {\n\n  filterValue: string;\n  filterColumns: Array<string>;\n\n  transform(value: Array<any>, args: any): any {\n    if (!args || args.length <= 1) {\n      return value;\n    }\n\n    this.filterValue = args['filtervalue'] ? args['filtervalue'] : '';\n    this.filterColumns = args['filtercolumns'];\n\n    if (!this.filterColumns || !this.filterValue || this.filterValue.length === 0) {\n      return value;\n    }\n\n    if (value === undefined || value === null) {\n      return value;\n    }\n\n    let that = this;\n    return value.filter((item) => {\n      for (let i = 0; i < that.filterColumns.length; i++) {\n        let colName = that.filterColumns[i];\n        if (this._isBlank(colName)) {\n          continue;\n        }\n        let origValue = item[colName];\n        if (origValue) {\n          origValue = origValue.toString();\n          if (this._isBlank(origValue)) {\n            continue;\n          }\n\n          if (origValue.toUpperCase().indexOf(that.filterValue.toUpperCase()) > -1) {\n            return item;\n          }\n        }\n      }\n    });\n  }\n\n  _isBlank(value: string): boolean {\n    if (value === undefined || value === null\n      || value.length === 0) {\n      return true;\n    }\n    return false;\n  }\n\n}\n"]}