import { ChangeDetectorRef, Injector, NgModule, Pipe } from '@angular/core';
import { OTranslateService } from '../services';
import { Util } from '../utils';
var OTranslatePipe = (function () {
    function OTranslatePipe(injector) {
        this.injector = injector;
        this.value = '';
        this._ref = this.injector.get(ChangeDetectorRef);
        this.oTranslateService = this.injector.get(OTranslateService);
    }
    OTranslatePipe.prototype.ngOnDestroy = function () {
        this._dispose();
    };
    OTranslatePipe.prototype.transform = function (text, args) {
        var _this = this;
        if (!text || text.length === 0) {
            return text;
        }
        if (Util.equals(text, this.lastKey) && Util.equals(args, this.lastParams)) {
            return this.value;
        }
        this.lastKey = text;
        this.lastParams = args;
        this.updateValue(text);
        this._dispose();
        if (!this.onLanguageChanged) {
            this.onLanguageChanged = this.oTranslateService.onLanguageChanged.subscribe(function (lang) {
                if (_this.lastKey) {
                    _this.lastKey = null;
                    _this.updateValue(text);
                }
            });
        }
        return this.value;
    };
    OTranslatePipe.prototype.updateValue = function (key) {
        var args = Util.isDefined(this.lastParams) ? this.lastParams.values || [] : [];
        var res = this.oTranslateService.get(key, args);
        this.value = res !== undefined ? res : key;
        this.lastKey = key;
        this._ref.markForCheck();
    };
    OTranslatePipe.prototype._dispose = function () {
        if (typeof this.onLanguageChanged !== 'undefined') {
            this.onLanguageChanged.unsubscribe();
            this.onLanguageChanged = undefined;
        }
    };
    OTranslatePipe.decorators = [
        { type: Pipe, args: [{
                    name: 'oTranslate',
                    pure: false
                },] },
    ];
    OTranslatePipe.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    return OTranslatePipe;
}());
export { OTranslatePipe };
var OTranslateModule = (function () {
    function OTranslateModule() {
    }
    OTranslateModule.forRoot = function () {
        return {
            ngModule: OTranslateModule,
            providers: []
        };
    };
    OTranslateModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [OTranslatePipe],
                    imports: [],
                    exports: [OTranslatePipe]
                },] },
    ];
    return OTranslateModule;
}());
export { OTranslateModule };
//# sourceMappingURL=o-translate.pipe.js.map