{"version":3,"file":"o-translate.pipe.js","sourceRoot":"","sources":["../../../tmp/ontimize/pipes/o-translate.pipe.ts"],"names":[],"mappings":"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","sourcesContent":["import { ChangeDetectorRef, EventEmitter, Injector, ModuleWithProviders, NgModule, OnDestroy, Pipe, PipeTransform } from '@angular/core';\n\nimport { OTranslateService } from '../services';\nimport { Util } from '../utils';\n\nexport interface ITranslatePipeArgument {\n  values?: any[];\n}\n\n@Pipe({\n  name: 'oTranslate',\n  pure: false // required to update the value when the promise is resolved\n})\nexport class OTranslatePipe implements PipeTransform, OnDestroy {\n\n  public value: string = '';\n  public lastKey: string;\n  public lastParams: any;\n\n  public onLanguageChanged: EventEmitter<any>;\n\n  protected oTranslateService: OTranslateService;\n  protected _ref: ChangeDetectorRef;\n\n  constructor(protected injector: Injector) {\n    this._ref = this.injector.get(ChangeDetectorRef);\n    this.oTranslateService = this.injector.get(OTranslateService);\n  }\n\n  public ngOnDestroy(): void {\n    this._dispose();\n  }\n\n  public transform(text: string, args: ITranslatePipeArgument): string {\n    if (!text || text.length === 0) {\n      return text;\n    }\n\n    // if we ask another time for the same key, return the last value\n    if (Util.equals(text, this.lastKey) && Util.equals(args, this.lastParams)) {\n      return this.value;\n    }\n\n    // store the query, in case it changes\n    this.lastKey = text;\n\n    // store the params, in case they change\n    this.lastParams = args;\n\n    // set the value\n    this.updateValue(text);\n\n    // if there is a subscription to onLanguageChanged, clean it\n    this._dispose();\n\n    // subscribe to onLanguageChanged event, in case the language changes\n    if (!this.onLanguageChanged) {\n      this.onLanguageChanged = this.oTranslateService.onLanguageChanged.subscribe(lang => {\n        if (this.lastKey) {\n          this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n          this.updateValue(text);\n        }\n      });\n    }\n    return this.value;\n  }\n\n  public updateValue(key: string): void {\n    const args = Util.isDefined(this.lastParams) ? this.lastParams.values || [] : [];\n\n    const res = this.oTranslateService.get(key, args);\n    this.value = res !== undefined ? res : key;\n    this.lastKey = key;\n    this._ref.markForCheck();\n  }\n\n  protected _dispose(): void {\n    if (typeof this.onLanguageChanged !== 'undefined') {\n      this.onLanguageChanged.unsubscribe();\n      this.onLanguageChanged = undefined;\n    }\n  }\n\n}\n\n@NgModule({\n  declarations: [OTranslatePipe],\n  imports: [],\n  exports: [OTranslatePipe]\n})\nexport class OTranslateModule {\n  public static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: OTranslateModule,\n      providers: []\n    };\n  }\n}\n"]}